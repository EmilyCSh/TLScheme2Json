[
	{
		"name": "error",
		"methods": [
			{
				"name": "code",
				"type": "int32",
				"description": "Error code; subject to future changes. If the error code is 406, the error message must not be processed in any way and must not be displayed to the user"
			},
			{
				"name": "message",
				"type": "string",
				"description": "Error message; subject to future changes"
			}
		],
		"description": "An object of this type can be returned on every function call, in case of an error",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ok",
		"methods": null,
		"description": "An object of this type is returned on a successful function call for certain functions",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "AuthenticationCodeType",
		"methods": null,
		"description": "Provides information about the method by which an authentication code is delivered to the user",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "authenticationCodeTypeTelegramMessage",
		"methods": [
			{
				"name": "length",
				"type": "int32",
				"description": "Length of the code"
			}
		],
		"description": "A digit-only authentication code is delivered via a private Telegram message, which can be viewed from another active session",
		"inheritance": "AuthenticationCodeType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "authenticationCodeTypeSms",
		"methods": [
			{
				"name": "length",
				"type": "int32",
				"description": "Length of the code"
			}
		],
		"description": "A digit-only authentication code is delivered via an SMS message to the specified phone number; non-official applications may not receive this type of code",
		"inheritance": "AuthenticationCodeType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "authenticationCodeTypeSmsWord",
		"methods": [
			{
				"name": "first_letter",
				"type": "string",
				"description": "The first letters of the word if known"
			}
		],
		"description": "An authentication code is a word delivered via an SMS message to the specified phone number; non-official applications may not receive this type of code",
		"inheritance": "AuthenticationCodeType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "authenticationCodeTypeSmsPhrase",
		"methods": [
			{
				"name": "first_word",
				"type": "string",
				"description": "The first word of the phrase if known"
			}
		],
		"description": "An authentication code is a phrase from multiple words delivered via an SMS message to the specified phone number; non-official applications may not receive this type of code",
		"inheritance": "AuthenticationCodeType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "authenticationCodeTypeCall",
		"methods": [
			{
				"name": "length",
				"type": "int32",
				"description": "Length of the code"
			}
		],
		"description": "A digit-only authentication code is delivered via a phone call to the specified phone number",
		"inheritance": "AuthenticationCodeType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "authenticationCodeTypeFlashCall",
		"methods": [
			{
				"name": "pattern",
				"type": "string",
				"description": "Pattern of the phone number from which the call will be made"
			}
		],
		"description": "An authentication code is delivered by an immediately canceled call to the specified phone number. The phone number that calls is the code that must be entered automatically",
		"inheritance": "AuthenticationCodeType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "authenticationCodeTypeMissedCall",
		"methods": [
			{
				"name": "phone_number_prefix",
				"type": "string",
				"description": "Prefix of the phone number from which the call will be made"
			},
			{
				"name": "length",
				"type": "int32",
				"description": "Number of digits in the code, excluding the prefix"
			}
		],
		"description": "An authentication code is delivered by an immediately canceled call to the specified phone number. The last digits of the phone number that calls are the code that must be entered manually by the user",
		"inheritance": "AuthenticationCodeType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "authenticationCodeTypeFragment",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "URL to open to receive the code"
			},
			{
				"name": "length",
				"type": "int32",
				"description": "Length of the code"
			}
		],
		"description": "A digit-only authentication code is delivered to https://fragment.com. The user must be logged in there via a wallet owning the phone number's NFT",
		"inheritance": "AuthenticationCodeType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "authenticationCodeTypeFirebaseAndroid",
		"methods": [
			{
				"name": "device_verification_parameters",
				"type": "FirebaseDeviceVerificationParameters",
				"description": "Parameters to be used for device verification"
			},
			{
				"name": "length",
				"type": "int32",
				"description": "Length of the code"
			}
		],
		"description": "A digit-only authentication code is delivered via Firebase Authentication to the official Android application",
		"inheritance": "AuthenticationCodeType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "authenticationCodeTypeFirebaseIos",
		"methods": [
			{
				"name": "receipt",
				"type": "string",
				"description": "Receipt of successful application token validation to compare with receipt from push notification"
			},
			{
				"name": "push_timeout",
				"type": "int32",
				"description": "Time after the next authentication method is expected to be used if verification push notification isn't received, in seconds"
			},
			{
				"name": "length",
				"type": "int32",
				"description": "Length of the code"
			}
		],
		"description": "A digit-only authentication code is delivered via Firebase Authentication to the official iOS application",
		"inheritance": "AuthenticationCodeType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "authenticationCodeInfo",
		"methods": [
			{
				"name": "phone_number",
				"type": "string",
				"description": "A phone number that is being authenticated"
			},
			{
				"name": "type",
				"type": "AuthenticationCodeType",
				"description": "The way the code was sent to the user"
			},
			{
				"name": "next_type",
				"type": "AuthenticationCodeType",
				"description": "The way the next code will be sent to the user; may be null"
			},
			{
				"name": "timeout",
				"type": "int32",
				"description": "Timeout before the code can be re-sent, in seconds"
			}
		],
		"description": "Information about the authentication code that was sent",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "emailAddressAuthenticationCodeInfo",
		"methods": [
			{
				"name": "email_address_pattern",
				"type": "string",
				"description": "Pattern of the email address to which an authentication code was sent"
			},
			{
				"name": "length",
				"type": "int32",
				"description": "Length of the code; 0 if unknown"
			}
		],
		"description": "Information about the email address authentication code that was sent",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "EmailAddressAuthentication",
		"methods": null,
		"description": "Contains authentication data for an email address",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "emailAddressAuthenticationCode",
		"methods": [
			{
				"name": "code",
				"type": "string",
				"description": "The code"
			}
		],
		"description": "An authentication code delivered to a user's email address",
		"inheritance": "EmailAddressAuthentication",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "emailAddressAuthenticationAppleId",
		"methods": [
			{
				"name": "token",
				"type": "string",
				"description": "The token"
			}
		],
		"description": "An authentication token received through Apple ID",
		"inheritance": "EmailAddressAuthentication",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "emailAddressAuthenticationGoogleId",
		"methods": [
			{
				"name": "token",
				"type": "string",
				"description": "The token"
			}
		],
		"description": "An authentication token received through Google ID",
		"inheritance": "EmailAddressAuthentication",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "EmailAddressResetState",
		"methods": null,
		"description": "Describes reset state of an email address",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "emailAddressResetStateAvailable",
		"methods": [
			{
				"name": "wait_period",
				"type": "int32",
				"description": "Time required to wait before the email address can be reset; 0 if the user is subscribed to Telegram Premium"
			}
		],
		"description": "Email address can be reset after the given period. Call resetAuthenticationEmailAddress to reset it and allow the user to authorize with a code sent to the user's phone number",
		"inheritance": "EmailAddressResetState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "emailAddressResetStatePending",
		"methods": [
			{
				"name": "reset_in",
				"type": "int32",
				"description": "Left time before the email address will be reset, in seconds. updateAuthorizationState is not sent when this field changes"
			}
		],
		"description": "Email address reset has already been requested. Call resetAuthenticationEmailAddress to check whether immediate reset is possible",
		"inheritance": "EmailAddressResetState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "textEntity",
		"methods": [
			{
				"name": "offset",
				"type": "int32",
				"description": "Offset of the entity, in UTF-16 code units"
			},
			{
				"name": "length",
				"type": "int32",
				"description": "Length of the entity, in UTF-16 code units"
			},
			{
				"name": "type",
				"type": "TextEntityType",
				"description": "Type of the entity"
			}
		],
		"description": "Represents a part of the text that needs to be formatted in some unusual way",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "textEntities",
		"methods": [
			{
				"name": "entities",
				"type": "vector<textEntity>",
				"description": "List of text entities"
			}
		],
		"description": "Contains a list of text entities",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "formattedText",
		"methods": [
			{
				"name": "text",
				"type": "string",
				"description": "The text"
			},
			{
				"name": "entities",
				"type": "vector<textEntity>",
				"description": "Entities contained in the text. Entities can be nested, but must not mutually intersect with each other. Pre, Code and PreCode entities can't contain other entities. BlockQuote entities can't contain other BlockQuote entities. Bold, Italic, Underline, Strikethrough, and Spoiler entities can contain and can be part of any other entities. All other entities can't contain each other"
			}
		],
		"description": "A text with some entities",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "termsOfService",
		"methods": [
			{
				"name": "text",
				"type": "formattedText",
				"description": "Text of the terms of service"
			},
			{
				"name": "min_user_age",
				"type": "int32",
				"description": "The minimum age of a user to be able to accept the terms; 0 if age isn't restricted"
			},
			{
				"name": "show_popup",
				"type": "Bool",
				"description": "True, if a blocking popup with terms of service must be shown to the user"
			}
		],
		"description": "Contains Telegram terms of service",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "AuthorizationState",
		"methods": null,
		"description": "Represents the current authorization state of the TDLib client",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "authorizationStateWaitTdlibParameters",
		"methods": null,
		"description": "Initialization parameters are needed. Call setTdlibParameters to provide them",
		"inheritance": "AuthorizationState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "authorizationStateWaitPhoneNumber",
		"methods": null,
		"description": "TDLib needs the user's phone number to authorize. Call setAuthenticationPhoneNumber to provide the phone number, or use requestQrCodeAuthentication or checkAuthenticationBotToken for other authentication options",
		"inheritance": "AuthorizationState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "authorizationStateWaitEmailAddress",
		"methods": [
			{
				"name": "allow_apple_id",
				"type": "Bool",
				"description": "True, if authorization through Apple ID is allowed"
			},
			{
				"name": "allow_google_id",
				"type": "Bool",
				"description": "True, if authorization through Google ID is allowed"
			}
		],
		"description": "TDLib needs the user's email address to authorize. Call setAuthenticationEmailAddress to provide the email address, or directly call checkAuthenticationEmailCode with Apple ID/Google ID token if allowed",
		"inheritance": "AuthorizationState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "authorizationStateWaitEmailCode",
		"methods": [
			{
				"name": "allow_apple_id",
				"type": "Bool",
				"description": "True, if authorization through Apple ID is allowed"
			},
			{
				"name": "allow_google_id",
				"type": "Bool",
				"description": "True, if authorization through Google ID is allowed"
			},
			{
				"name": "code_info",
				"type": "emailAddressAuthenticationCodeInfo",
				"description": "Information about the sent authentication code"
			},
			{
				"name": "email_address_reset_state",
				"type": "EmailAddressResetState",
				"description": "Reset state of the email address; may be null if the email address can't be reset"
			}
		],
		"description": "TDLib needs the user's authentication code sent to an email address to authorize. Call checkAuthenticationEmailCode to provide the code",
		"inheritance": "AuthorizationState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "authorizationStateWaitCode",
		"methods": [
			{
				"name": "code_info",
				"type": "authenticationCodeInfo",
				"description": "Information about the authorization code that was sent"
			}
		],
		"description": "TDLib needs the user's authentication code to authorize. Call checkAuthenticationCode to check the code",
		"inheritance": "AuthorizationState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "authorizationStateWaitOtherDeviceConfirmation",
		"methods": [
			{
				"name": "link",
				"type": "string",
				"description": "A tg:// URL for the QR code. The link will be updated frequently"
			}
		],
		"description": "The user needs to confirm authorization on another logged in device by scanning a QR code with the provided link",
		"inheritance": "AuthorizationState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "authorizationStateWaitRegistration",
		"methods": [
			{
				"name": "terms_of_service",
				"type": "termsOfService",
				"description": "Telegram terms of service"
			}
		],
		"description": "The user is unregistered and need to accept terms of service and enter their first name and last name to finish registration. Call registerUser to accept the terms of service and provide the data",
		"inheritance": "AuthorizationState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "authorizationStateWaitPassword",
		"methods": [
			{
				"name": "password_hint",
				"type": "string",
				"description": "Hint for the password; may be empty"
			},
			{
				"name": "has_recovery_email_address",
				"type": "Bool",
				"description": "True, if a recovery email address has been set up"
			},
			{
				"name": "has_passport_data",
				"type": "Bool",
				"description": "True, if some Telegram Passport elements were saved"
			},
			{
				"name": "recovery_email_address_pattern",
				"type": "string",
				"description": "Pattern of the email address to which the recovery email was sent; empty until a recovery email has been sent"
			}
		],
		"description": "The user has been authorized, but needs to enter a 2-step verification password to start using the application. Call checkAuthenticationPassword to provide the password, or requestAuthenticationPasswordRecovery to recover the password, or deleteAccount to delete the account after a week",
		"inheritance": "AuthorizationState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "authorizationStateReady",
		"methods": null,
		"description": "The user has been successfully authorized. TDLib is now ready to answer general requests",
		"inheritance": "AuthorizationState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "authorizationStateLoggingOut",
		"methods": null,
		"description": "The user is currently logging out",
		"inheritance": "AuthorizationState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "authorizationStateClosing",
		"methods": null,
		"description": "TDLib is closing, all subsequent queries will be answered with the error 500. Note that closing TDLib can take a while. All resources will be freed only after authorizationStateClosed has been received",
		"inheritance": "AuthorizationState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "authorizationStateClosed",
		"methods": null,
		"description": "TDLib client is in its final state. All databases are closed and all resources are released. No other updates will be received after this. All queries will be responded to with error code 500. To continue working, one must create a new instance of the TDLib client",
		"inheritance": "AuthorizationState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "FirebaseDeviceVerificationParameters",
		"methods": null,
		"description": "Describes parameters to be used for device verification",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "firebaseDeviceVerificationParametersSafetyNet",
		"methods": [
			{
				"name": "nonce",
				"type": "bytes",
				"description": "Nonce to pass to the SafetyNet Attestation API"
			}
		],
		"description": "Device verification must be performed with the SafetyNet Attestation API",
		"inheritance": "FirebaseDeviceVerificationParameters",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "firebaseDeviceVerificationParametersPlayIntegrity",
		"methods": [
			{
				"name": "nonce",
				"type": "string",
				"description": "Base64url-encoded nonce to pass to the Play Integrity API"
			},
			{
				"name": "cloud_project_number",
				"type": "int64",
				"description": "Cloud project number to pass to the Play Integrity API"
			}
		],
		"description": "Device verification must be performed with the classic Play Integrity verification (https://developer.android.com/google/play/integrity/classic)",
		"inheritance": "FirebaseDeviceVerificationParameters",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passwordState",
		"methods": [
			{
				"name": "has_password",
				"type": "Bool",
				"description": "True, if a 2-step verification password is set"
			},
			{
				"name": "password_hint",
				"type": "string",
				"description": "Hint for the password; may be empty"
			},
			{
				"name": "has_recovery_email_address",
				"type": "Bool",
				"description": "True, if a recovery email is set"
			},
			{
				"name": "has_passport_data",
				"type": "Bool",
				"description": "True, if some Telegram Passport elements were saved"
			},
			{
				"name": "recovery_email_address_code_info",
				"type": "emailAddressAuthenticationCodeInfo",
				"description": "Information about the recovery email address to which the confirmation email was sent; may be null"
			},
			{
				"name": "login_email_address_pattern",
				"type": "string",
				"description": "Pattern of the email address set up for logging in"
			},
			{
				"name": "pending_reset_date",
				"type": "int32",
				"description": "If not 0, point in time (Unix timestamp) after which the 2-step verification password can be reset immediately using resetPassword"
			}
		],
		"description": "Represents the current state of 2-step verification",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "recoveryEmailAddress",
		"methods": [
			{
				"name": "recovery_email_address",
				"type": "string",
				"description": "Recovery email address"
			}
		],
		"description": "Contains information about the current recovery email address",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "temporaryPasswordState",
		"methods": [
			{
				"name": "has_password",
				"type": "Bool",
				"description": "True, if a temporary password is available"
			},
			{
				"name": "valid_for",
				"type": "int32",
				"description": "Time left before the temporary password expires, in seconds"
			}
		],
		"description": "Returns information about the availability of a temporary password, which can be used for payments",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "localFile",
		"methods": [
			{
				"name": "path",
				"type": "string",
				"description": "Local path to the locally available file part; may be empty"
			},
			{
				"name": "can_be_downloaded",
				"type": "Bool",
				"description": "True, if it is possible to download or generate the file"
			},
			{
				"name": "can_be_deleted",
				"type": "Bool",
				"description": "True, if the file can be deleted"
			},
			{
				"name": "is_downloading_active",
				"type": "Bool",
				"description": "True, if the file is currently being downloaded (or a local copy is being generated by some other means)"
			},
			{
				"name": "is_downloading_completed",
				"type": "Bool",
				"description": "True, if the local copy is fully available"
			},
			{
				"name": "download_offset",
				"type": "int53",
				"description": "Download will be started from this offset. downloaded_prefix_size is calculated from this offset"
			},
			{
				"name": "downloaded_prefix_size",
				"type": "int53",
				"description": "If is_downloading_completed is false, then only some prefix of the file starting from download_offset is ready to be read. downloaded_prefix_size is the size of that prefix in bytes"
			},
			{
				"name": "downloaded_size",
				"type": "int53",
				"description": "Total downloaded file size, in bytes. Can be used only for calculating download progress. The actual file size may be bigger, and some parts of it may contain garbage"
			}
		],
		"description": "Represents a local file",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "remoteFile",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Remote file identifier; may be empty. Can be used by the current user across application restarts or even from other devices. Uniquely identifies a file, but a file can have a lot of different valid identifiers. If the identifier starts with \"http://\" or \"https://\", it represents the HTTP URL of the file. TDLib is currently unable to download files if only their URL is known. If downloadFile/addFileToDownloads is called on such a file or if it is sent to a secret chat, TDLib starts a file generation process by sending updateFileGenerationStart to the application with the HTTP URL in the original_path and \"#url#\" as the conversion string. Application must generate the file by downloading it to the specified location"
			},
			{
				"name": "unique_id",
				"type": "string",
				"description": "Unique file identifier; may be empty if unknown. The unique file identifier which is the same for the same file even for different users and is persistent over time"
			},
			{
				"name": "is_uploading_active",
				"type": "Bool",
				"description": "True, if the file is currently being uploaded (or a remote copy is being generated by some other means)"
			},
			{
				"name": "is_uploading_completed",
				"type": "Bool",
				"description": "True, if a remote copy is fully available"
			},
			{
				"name": "uploaded_size",
				"type": "int53",
				"description": "Size of the remote available part of the file, in bytes; 0 if unknown"
			}
		],
		"description": "Represents a remote file",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "file",
		"methods": [
			{
				"name": "id",
				"type": "int32",
				"description": "Unique file identifier"
			},
			{
				"name": "size",
				"type": "int53",
				"description": "File size, in bytes; 0 if unknown"
			},
			{
				"name": "expected_size",
				"type": "int53",
				"description": "Approximate file size in bytes in case the exact file size is unknown. Can be used to show download/upload progress"
			},
			{
				"name": "local",
				"type": "localFile",
				"description": "Information about the local copy of the file"
			},
			{
				"name": "remote",
				"type": "remoteFile",
				"description": "Information about the remote copy of the file"
			}
		],
		"description": "Represents a file",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "InputFile",
		"methods": null,
		"description": "Points to a file",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputFileId",
		"methods": [
			{
				"name": "id",
				"type": "int32",
				"description": "Unique file identifier"
			}
		],
		"description": "A file defined by its unique identifier",
		"inheritance": "InputFile",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputFileRemote",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Remote file identifier"
			}
		],
		"description": "A file defined by its remote identifier. The remote identifier is guaranteed to be usable only if the corresponding file is still accessible to the user and known to TDLib. For example, if the file is from a message, then the message must be not deleted and accessible to the user. If the file database is disabled, then the corresponding object with the file must be preloaded by the application",
		"inheritance": "InputFile",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputFileLocal",
		"methods": [
			{
				"name": "path",
				"type": "string",
				"description": "Local path to the file"
			}
		],
		"description": "A file defined by a local path",
		"inheritance": "InputFile",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputFileGenerated",
		"methods": [
			{
				"name": "original_path",
				"type": "string",
				"description": "Local path to a file from which the file is generated. The path doesn't have to be a valid path and is used by TDLib only to detect name and MIME type of the generated file"
			},
			{
				"name": "conversion",
				"type": "string",
				"description": "String specifying the conversion applied to the original file; must be persistent across application restarts. Conversions beginning with '#' are reserved for internal TDLib usage"
			},
			{
				"name": "expected_size",
				"type": "int53",
				"description": "Expected size of the generated file, in bytes; pass 0 if unknown"
			}
		],
		"description": "A file generated by the application. The application must handle updates updateFileGenerationStart and updateFileGenerationStop to generate the file when asked by TDLib",
		"inheritance": "InputFile",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "photoSize",
		"methods": [
			{
				"name": "type",
				"type": "string",
				"description": "Image type (see https://core.telegram.org/constructor/photoSize)"
			},
			{
				"name": "photo",
				"type": "file",
				"description": "Information about the image file"
			},
			{
				"name": "width",
				"type": "int32",
				"description": "Image width"
			},
			{
				"name": "height",
				"type": "int32",
				"description": "Image height"
			},
			{
				"name": "progressive_sizes",
				"type": "vector<int32>",
				"description": "Sizes of progressive JPEG file prefixes, which can be used to preliminarily show the image; in bytes"
			}
		],
		"description": "Describes an image in JPEG format",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "minithumbnail",
		"methods": [
			{
				"name": "width",
				"type": "int32",
				"description": "Thumbnail width, usually doesn't exceed 40"
			},
			{
				"name": "height",
				"type": "int32",
				"description": "Thumbnail height, usually doesn't exceed 40"
			},
			{
				"name": "data",
				"type": "bytes",
				"description": "The thumbnail in JPEG format"
			}
		],
		"description": "Thumbnail image of a very poor quality and low resolution",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ThumbnailFormat",
		"methods": null,
		"description": "Describes format of a thumbnail",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "thumbnailFormatJpeg",
		"methods": null,
		"description": "The thumbnail is in JPEG format",
		"inheritance": "ThumbnailFormat",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "thumbnailFormatGif",
		"methods": null,
		"description": "The thumbnail is in static GIF format. It will be used only for some bot inline query results",
		"inheritance": "ThumbnailFormat",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "thumbnailFormatMpeg4",
		"methods": null,
		"description": "The thumbnail is in MPEG4 format. It will be used only for some animations and videos",
		"inheritance": "ThumbnailFormat",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "thumbnailFormatPng",
		"methods": null,
		"description": "The thumbnail is in PNG format. It will be used only for background patterns",
		"inheritance": "ThumbnailFormat",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "thumbnailFormatTgs",
		"methods": null,
		"description": "The thumbnail is in TGS format. It will be used only for sticker sets",
		"inheritance": "ThumbnailFormat",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "thumbnailFormatWebm",
		"methods": null,
		"description": "The thumbnail is in WEBM format. It will be used only for sticker sets",
		"inheritance": "ThumbnailFormat",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "thumbnailFormatWebp",
		"methods": null,
		"description": "The thumbnail is in WEBP format. It will be used only for some stickers and sticker sets",
		"inheritance": "ThumbnailFormat",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "thumbnail",
		"methods": [
			{
				"name": "format",
				"type": "ThumbnailFormat",
				"description": "Thumbnail format"
			},
			{
				"name": "width",
				"type": "int32",
				"description": "Thumbnail width"
			},
			{
				"name": "height",
				"type": "int32",
				"description": "Thumbnail height"
			},
			{
				"name": "file",
				"type": "file",
				"description": "The thumbnail"
			}
		],
		"description": "Represents a thumbnail",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "MaskPoint",
		"methods": null,
		"description": "Part of the face, relative to which a mask is placed",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "maskPointForehead",
		"methods": null,
		"description": "The mask is placed relatively to the forehead",
		"inheritance": "MaskPoint",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "maskPointEyes",
		"methods": null,
		"description": "The mask is placed relatively to the eyes",
		"inheritance": "MaskPoint",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "maskPointMouth",
		"methods": null,
		"description": "The mask is placed relatively to the mouth",
		"inheritance": "MaskPoint",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "maskPointChin",
		"methods": null,
		"description": "The mask is placed relatively to the chin",
		"inheritance": "MaskPoint",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "maskPosition",
		"methods": [
			{
				"name": "point",
				"type": "MaskPoint",
				"description": "Part of the face, relative to which the mask is placed"
			},
			{
				"name": "x_shift",
				"type": "double",
				"description": "Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just to the left of the default mask position)"
			},
			{
				"name": "y_shift",
				"type": "double",
				"description": "Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. (For example, 1.0 will place the mask just below the default mask position)"
			},
			{
				"name": "scale",
				"type": "double",
				"description": "Mask scaling coefficient. (For example, 2.0 means a doubled size)"
			}
		],
		"description": "Position on a photo where a mask is placed",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "StickerFormat",
		"methods": null,
		"description": "Describes format of a sticker",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "stickerFormatWebp",
		"methods": null,
		"description": "The sticker is an image in WEBP format",
		"inheritance": "StickerFormat",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "stickerFormatTgs",
		"methods": null,
		"description": "The sticker is an animation in TGS format",
		"inheritance": "StickerFormat",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "stickerFormatWebm",
		"methods": null,
		"description": "The sticker is a video in WEBM format",
		"inheritance": "StickerFormat",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "StickerType",
		"methods": null,
		"description": "Describes type of sticker",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "stickerTypeRegular",
		"methods": null,
		"description": "The sticker is a regular sticker",
		"inheritance": "StickerType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "stickerTypeMask",
		"methods": null,
		"description": "The sticker is a mask in WEBP format to be placed on photos or videos",
		"inheritance": "StickerType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "stickerTypeCustomEmoji",
		"methods": null,
		"description": "The sticker is a custom emoji to be used inside message text and caption",
		"inheritance": "StickerType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "StickerFullType",
		"methods": null,
		"description": "Contains full information about sticker type",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "stickerFullTypeRegular",
		"methods": [
			{
				"name": "premium_animation",
				"type": "file",
				"description": "Premium animation of the sticker; may be null. If present, only Telegram Premium users can use the sticker"
			}
		],
		"description": "The sticker is a regular sticker",
		"inheritance": "StickerFullType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "stickerFullTypeMask",
		"methods": [
			{
				"name": "mask_position",
				"type": "maskPosition",
				"description": "Position where the mask is placed; may be null"
			}
		],
		"description": "The sticker is a mask in WEBP format to be placed on photos or videos",
		"inheritance": "StickerFullType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "stickerFullTypeCustomEmoji",
		"methods": [
			{
				"name": "custom_emoji_id",
				"type": "int64",
				"description": "Identifier of the custom emoji"
			},
			{
				"name": "needs_repainting",
				"type": "Bool",
				"description": "True, if the sticker must be repainted to a text color in messages, the color of the Telegram Premium badge in emoji status, white color on chat photos, or another appropriate color in other places"
			}
		],
		"description": "The sticker is a custom emoji to be used inside message text and caption. Currently, only Telegram Premium users can use custom emoji",
		"inheritance": "StickerFullType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "closedVectorPath",
		"methods": [
			{
				"name": "commands",
				"type": "vector<VectorPathCommand>",
				"description": "List of vector path commands"
			}
		],
		"description": "Represents a closed vector path. The path begins at the end point of the last command. The coordinate system origin is in the upper-left corner",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "outline",
		"methods": [
			{
				"name": "paths",
				"type": "vector<closedVectorPath>",
				"description": "The list of closed vector paths"
			}
		],
		"description": "Represents outline of an image",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pollOption",
		"methods": [
			{
				"name": "text",
				"type": "formattedText",
				"description": "Option text; 1-100 characters. Only custom emoji entities are allowed"
			},
			{
				"name": "voter_count",
				"type": "int32",
				"description": "Number of voters for this option, available only for closed or voted polls"
			},
			{
				"name": "vote_percentage",
				"type": "int32",
				"description": "The percentage of votes for this option; 0-100"
			},
			{
				"name": "is_chosen",
				"type": "Bool",
				"description": "True, if the option was chosen by the user"
			},
			{
				"name": "is_being_chosen",
				"type": "Bool",
				"description": "True, if the option is being chosen by a pending setPollAnswer request"
			}
		],
		"description": "Describes one answer option of a poll",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "PollType",
		"methods": null,
		"description": "Describes the type of poll",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pollTypeRegular",
		"methods": [
			{
				"name": "allow_multiple_answers",
				"type": "Bool",
				"description": "True, if multiple answer options can be chosen simultaneously"
			}
		],
		"description": "A regular poll",
		"inheritance": "PollType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pollTypeQuiz",
		"methods": [
			{
				"name": "correct_option_id",
				"type": "int32",
				"description": "0-based identifier of the correct answer option; -1 for a yet unanswered poll"
			},
			{
				"name": "explanation",
				"type": "formattedText",
				"description": "Text that is shown when the user chooses an incorrect answer or taps on the lamp icon; 0-200 characters with at most 2 line feeds; empty for a yet unanswered poll"
			}
		],
		"description": "A poll in quiz mode, which has exactly one correct answer option and can be answered only once",
		"inheritance": "PollType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "animation",
		"methods": [
			{
				"name": "duration",
				"type": "int32",
				"description": "Duration of the animation, in seconds; as defined by the sender"
			},
			{
				"name": "width",
				"type": "int32",
				"description": "Width of the animation"
			},
			{
				"name": "height",
				"type": "int32",
				"description": "Height of the animation"
			},
			{
				"name": "file_name",
				"type": "string",
				"description": "Original name of the file; as defined by the sender"
			},
			{
				"name": "mime_type",
				"type": "string",
				"description": "MIME type of the file, usually \"image/gif\" or \"video/mp4\""
			},
			{
				"name": "has_stickers",
				"type": "Bool",
				"description": "True, if stickers were added to the animation. The list of corresponding sticker set can be received using getAttachedStickerSets"
			},
			{
				"name": "minithumbnail",
				"type": "minithumbnail",
				"description": "Animation minithumbnail; may be null"
			},
			{
				"name": "thumbnail",
				"type": "thumbnail",
				"description": "Animation thumbnail in JPEG or MPEG4 format; may be null"
			},
			{
				"name": "animation",
				"type": "file",
				"description": "File containing the animation"
			}
		],
		"description": "Describes an animation file. The animation must be encoded in GIF or MPEG4 format",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "audio",
		"methods": [
			{
				"name": "duration",
				"type": "int32",
				"description": "Duration of the audio, in seconds; as defined by the sender"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Title of the audio; as defined by the sender"
			},
			{
				"name": "performer",
				"type": "string",
				"description": "Performer of the audio; as defined by the sender"
			},
			{
				"name": "file_name",
				"type": "string",
				"description": "Original name of the file; as defined by the sender"
			},
			{
				"name": "mime_type",
				"type": "string",
				"description": "The MIME type of the file; as defined by the sender"
			},
			{
				"name": "album_cover_minithumbnail",
				"type": "minithumbnail",
				"description": "The minithumbnail of the album cover; may be null"
			},
			{
				"name": "album_cover_thumbnail",
				"type": "thumbnail",
				"description": "The thumbnail of the album cover in JPEG format; as defined by the sender. The full size thumbnail is expected to be extracted from the downloaded audio file; may be null"
			},
			{
				"name": "external_album_covers",
				"type": "vector<thumbnail>",
				"description": "Album cover variants to use if the downloaded audio file contains no album cover. Provided thumbnail dimensions are approximate"
			},
			{
				"name": "audio",
				"type": "file",
				"description": "File containing the audio"
			}
		],
		"description": "Describes an audio file. Audio is usually in MP3 or M4A format",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "document",
		"methods": [
			{
				"name": "file_name",
				"type": "string",
				"description": "Original name of the file; as defined by the sender"
			},
			{
				"name": "mime_type",
				"type": "string",
				"description": "MIME type of the file; as defined by the sender"
			},
			{
				"name": "minithumbnail",
				"type": "minithumbnail",
				"description": "Document minithumbnail; may be null"
			},
			{
				"name": "thumbnail",
				"type": "thumbnail",
				"description": "Document thumbnail in JPEG or PNG format (PNG will be used only for background patterns); as defined by the sender; may be null"
			},
			{
				"name": "document",
				"type": "file",
				"description": "File containing the document"
			}
		],
		"description": "Describes a document of any type",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "photo",
		"methods": [
			{
				"name": "has_stickers",
				"type": "Bool",
				"description": "True, if stickers were added to the photo. The list of corresponding sticker sets can be received using getAttachedStickerSets"
			},
			{
				"name": "minithumbnail",
				"type": "minithumbnail",
				"description": "Photo minithumbnail; may be null"
			},
			{
				"name": "sizes",
				"type": "vector<photoSize>",
				"description": "Available variants of the photo, in different sizes"
			}
		],
		"description": "Describes a photo",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "sticker",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "Unique sticker identifier within the set; 0 if none"
			},
			{
				"name": "set_id",
				"type": "int64",
				"description": "Identifier of the sticker set to which the sticker belongs; 0 if none"
			},
			{
				"name": "width",
				"type": "int32",
				"description": "Sticker width; as defined by the sender"
			},
			{
				"name": "height",
				"type": "int32",
				"description": "Sticker height; as defined by the sender"
			},
			{
				"name": "emoji",
				"type": "string",
				"description": "Emoji corresponding to the sticker"
			},
			{
				"name": "format",
				"type": "StickerFormat",
				"description": "Sticker format"
			},
			{
				"name": "full_type",
				"type": "StickerFullType",
				"description": "Sticker's full type"
			},
			{
				"name": "thumbnail",
				"type": "thumbnail",
				"description": "Sticker thumbnail in WEBP or JPEG format; may be null"
			},
			{
				"name": "sticker",
				"type": "file",
				"description": "File containing the sticker"
			}
		],
		"description": "Describes a sticker",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "video",
		"methods": [
			{
				"name": "duration",
				"type": "int32",
				"description": "Duration of the video, in seconds; as defined by the sender"
			},
			{
				"name": "width",
				"type": "int32",
				"description": "Video width; as defined by the sender"
			},
			{
				"name": "height",
				"type": "int32",
				"description": "Video height; as defined by the sender"
			},
			{
				"name": "file_name",
				"type": "string",
				"description": "Original name of the file; as defined by the sender"
			},
			{
				"name": "mime_type",
				"type": "string",
				"description": "MIME type of the file; as defined by the sender"
			},
			{
				"name": "has_stickers",
				"type": "Bool",
				"description": "True, if stickers were added to the video. The list of corresponding sticker sets can be received using getAttachedStickerSets"
			},
			{
				"name": "supports_streaming",
				"type": "Bool",
				"description": "True, if the video is expected to be streamed"
			},
			{
				"name": "minithumbnail",
				"type": "minithumbnail",
				"description": "Video minithumbnail; may be null"
			},
			{
				"name": "thumbnail",
				"type": "thumbnail",
				"description": "Video thumbnail in JPEG or MPEG4 format; as defined by the sender; may be null"
			},
			{
				"name": "video",
				"type": "file",
				"description": "File containing the video"
			}
		],
		"description": "Describes a video file",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "videoNote",
		"methods": [
			{
				"name": "duration",
				"type": "int32",
				"description": "Duration of the video, in seconds; as defined by the sender"
			},
			{
				"name": "waveform",
				"type": "bytes",
				"description": "A waveform representation of the video note's audio in 5-bit format; may be empty if unknown"
			},
			{
				"name": "length",
				"type": "int32",
				"description": "Video width and height; as defined by the sender"
			},
			{
				"name": "minithumbnail",
				"type": "minithumbnail",
				"description": "Video minithumbnail; may be null"
			},
			{
				"name": "thumbnail",
				"type": "thumbnail",
				"description": "Video thumbnail in JPEG format; as defined by the sender; may be null"
			},
			{
				"name": "speech_recognition_result",
				"type": "SpeechRecognitionResult",
				"description": "Result of speech recognition in the video note; may be null"
			},
			{
				"name": "video",
				"type": "file",
				"description": "File containing the video"
			}
		],
		"description": "Describes a video note. The video must be equal in width and height, cropped to a circle, and stored in MPEG4 format",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "voiceNote",
		"methods": [
			{
				"name": "duration",
				"type": "int32",
				"description": "Duration of the voice note, in seconds; as defined by the sender"
			},
			{
				"name": "waveform",
				"type": "bytes",
				"description": "A waveform representation of the voice note in 5-bit format"
			},
			{
				"name": "mime_type",
				"type": "string",
				"description": "MIME type of the file; as defined by the sender. Usually, one of \"audio/ogg\" for Opus in an OGG container, \"audio/mpeg\" for an MP3 audio, or \"audio/mp4\" for an M4A audio"
			},
			{
				"name": "speech_recognition_result",
				"type": "SpeechRecognitionResult",
				"description": "Result of speech recognition in the voice note; may be null"
			},
			{
				"name": "voice",
				"type": "file",
				"description": "File containing the voice note"
			}
		],
		"description": "Describes a voice note",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "animatedEmoji",
		"methods": [
			{
				"name": "sticker",
				"type": "sticker",
				"description": "Sticker for the emoji; may be null if yet unknown for a custom emoji. If the sticker is a custom emoji, then it can have arbitrary format"
			},
			{
				"name": "sticker_width",
				"type": "int32",
				"description": "Expected width of the sticker, which can be used if the sticker is null"
			},
			{
				"name": "sticker_height",
				"type": "int32",
				"description": "Expected height of the sticker, which can be used if the sticker is null"
			},
			{
				"name": "fitzpatrick_type",
				"type": "int32",
				"description": "Emoji modifier fitzpatrick type; 0-6; 0 if none"
			},
			{
				"name": "sound",
				"type": "file",
				"description": "File containing the sound to be played when the sticker is clicked; may be null. The sound is encoded with the Opus codec, and stored inside an OGG container"
			}
		],
		"description": "Describes an animated or custom representation of an emoji",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "contact",
		"methods": [
			{
				"name": "phone_number",
				"type": "string",
				"description": "Phone number of the user"
			},
			{
				"name": "first_name",
				"type": "string",
				"description": "First name of the user; 1-255 characters in length"
			},
			{
				"name": "last_name",
				"type": "string",
				"description": "Last name of the user"
			},
			{
				"name": "vcard",
				"type": "string",
				"description": "Additional data about the user in a form of vCard; 0-2048 bytes in length"
			},
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user, if known; 0 otherwise"
			}
		],
		"description": "Describes a user contact",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "location",
		"methods": [
			{
				"name": "latitude",
				"type": "double",
				"description": "Latitude of the location in degrees; as defined by the sender"
			},
			{
				"name": "longitude",
				"type": "double",
				"description": "Longitude of the location, in degrees; as defined by the sender"
			},
			{
				"name": "horizontal_accuracy",
				"type": "double",
				"description": "The estimated horizontal accuracy of the location, in meters; as defined by the sender. 0 if unknown"
			}
		],
		"description": "Describes a location on planet Earth",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "venue",
		"methods": [
			{
				"name": "location",
				"type": "location",
				"description": "Venue location; as defined by the sender"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Venue name; as defined by the sender"
			},
			{
				"name": "address",
				"type": "string",
				"description": "Venue address; as defined by the sender"
			},
			{
				"name": "provider",
				"type": "string",
				"description": "Provider of the venue database; as defined by the sender. Currently, only \"foursquare\" and \"gplaces\" (Google Places) need to be supported"
			},
			{
				"name": "id",
				"type": "string",
				"description": "Identifier of the venue in the provider database; as defined by the sender"
			},
			{
				"name": "type",
				"type": "string",
				"description": "Type of the venue in the provider database; as defined by the sender"
			}
		],
		"description": "Describes a venue",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "game",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "Unique game identifier"
			},
			{
				"name": "short_name",
				"type": "string",
				"description": "Game short name"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Game title"
			},
			{
				"name": "text",
				"type": "formattedText",
				"description": "Game text, usually containing scoreboards for a game"
			},
			{
				"name": "description",
				"type": "string",
				"description": "Game description"
			},
			{
				"name": "photo",
				"type": "photo",
				"description": "Game photo"
			},
			{
				"name": "animation",
				"type": "animation",
				"description": "Game animation; may be null"
			}
		],
		"description": "Describes a game. Use getInternalLink with internalLinkTypeGame to share the game",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "webApp",
		"methods": [
			{
				"name": "short_name",
				"type": "string",
				"description": "Web App short name"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Web App title"
			},
			{
				"name": "description",
				"type": "string",
				"description": "Web App description"
			},
			{
				"name": "photo",
				"type": "photo",
				"description": "Web App photo"
			},
			{
				"name": "animation",
				"type": "animation",
				"description": "Web App animation; may be null"
			}
		],
		"description": "Describes a Web App. Use getInternalLink with internalLinkTypeWebApp to share the Web App",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "poll",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "Unique poll identifier"
			},
			{
				"name": "question",
				"type": "formattedText",
				"description": "Poll question; 1-300 characters. Only custom emoji entities are allowed"
			},
			{
				"name": "options",
				"type": "vector<pollOption>",
				"description": "List of poll answer options"
			},
			{
				"name": "total_voter_count",
				"type": "int32",
				"description": "Total number of voters, participating in the poll"
			},
			{
				"name": "recent_voter_ids",
				"type": "vector<MessageSender>",
				"description": "Identifiers of recent voters, if the poll is non-anonymous"
			},
			{
				"name": "is_anonymous",
				"type": "Bool",
				"description": "True, if the poll is anonymous"
			},
			{
				"name": "type",
				"type": "PollType",
				"description": "Type of the poll"
			},
			{
				"name": "open_period",
				"type": "int32",
				"description": "Amount of time the poll will be active after creation, in seconds"
			},
			{
				"name": "close_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the poll will automatically be closed"
			},
			{
				"name": "is_closed",
				"type": "Bool",
				"description": "True, if the poll is closed"
			}
		],
		"description": "Describes a poll",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "alternativeVideo",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "Unique identifier of the alternative video, which is used in the HLS file"
			},
			{
				"name": "width",
				"type": "int32",
				"description": "Video width"
			},
			{
				"name": "height",
				"type": "int32",
				"description": "Video height"
			},
			{
				"name": "codec",
				"type": "string",
				"description": "Codec used for video file encoding, for example, \"h264\", \"h265\", or \"av1\""
			},
			{
				"name": "hls_file",
				"type": "file",
				"description": "HLS file describing the video"
			},
			{
				"name": "video",
				"type": "file",
				"description": "File containing the video"
			}
		],
		"description": "Describes an alternative re-encoded quality of a video file",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "background",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "Unique background identifier"
			},
			{
				"name": "is_default",
				"type": "Bool",
				"description": "True, if this is one of default backgrounds"
			},
			{
				"name": "is_dark",
				"type": "Bool",
				"description": "True, if the background is dark and is recommended to be used with dark theme"
			},
			{
				"name": "name",
				"type": "string",
				"description": "Unique background name"
			},
			{
				"name": "document",
				"type": "document",
				"description": "Document with the background; may be null. Null only for filled and chat theme backgrounds"
			},
			{
				"name": "type",
				"type": "BackgroundType",
				"description": "Type of the background"
			}
		],
		"description": "Describes a chat background",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "backgrounds",
		"methods": [
			{
				"name": "backgrounds",
				"type": "vector<background>",
				"description": "A list of backgrounds"
			}
		],
		"description": "Contains a list of backgrounds",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatBackground",
		"methods": [
			{
				"name": "background",
				"type": "background",
				"description": "The background"
			},
			{
				"name": "dark_theme_dimming",
				"type": "int32",
				"description": "Dimming of the background in dark themes, as a percentage; 0-100. Applied only to Wallpaper and Fill types of background"
			}
		],
		"description": "Describes a background set for a specific chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "profilePhoto",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "Photo identifier; 0 for an empty photo. Can be used to find a photo in a list of user profile photos"
			},
			{
				"name": "small",
				"type": "file",
				"description": "A small (160x160) user profile photo. The file can be downloaded only before the photo is changed"
			},
			{
				"name": "big",
				"type": "file",
				"description": "A big (640x640) user profile photo. The file can be downloaded only before the photo is changed"
			},
			{
				"name": "minithumbnail",
				"type": "minithumbnail",
				"description": "User profile photo minithumbnail; may be null"
			},
			{
				"name": "has_animation",
				"type": "Bool",
				"description": "True, if the photo has animated variant"
			},
			{
				"name": "is_personal",
				"type": "Bool",
				"description": "True, if the photo is visible only for the current user"
			}
		],
		"description": "Describes a user profile photo",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatPhotoInfo",
		"methods": [
			{
				"name": "small",
				"type": "file",
				"description": "A small (160x160) chat photo variant in JPEG format. The file can be downloaded only before the photo is changed"
			},
			{
				"name": "big",
				"type": "file",
				"description": "A big (640x640) chat photo variant in JPEG format. The file can be downloaded only before the photo is changed"
			},
			{
				"name": "minithumbnail",
				"type": "minithumbnail",
				"description": "Chat photo minithumbnail; may be null"
			},
			{
				"name": "has_animation",
				"type": "Bool",
				"description": "True, if the photo has animated variant"
			},
			{
				"name": "is_personal",
				"type": "Bool",
				"description": "True, if the photo is visible only for the current user"
			}
		],
		"description": "Contains basic information about the photo of a chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "UserType",
		"methods": null,
		"description": "Represents the type of user. The following types are possible: regular users, deleted users and bots",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userTypeRegular",
		"methods": null,
		"description": "A regular user",
		"inheritance": "UserType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userTypeDeleted",
		"methods": null,
		"description": "A deleted user or deleted bot. No information on the user besides the user identifier is available. It is not possible to perform any active actions on this type of user",
		"inheritance": "UserType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userTypeBot",
		"methods": [
			{
				"name": "can_be_edited",
				"type": "Bool",
				"description": "True, if the bot is owned by the current user and can be edited using the methods toggleBotUsernameIsActive, reorderBotActiveUsernames, setBotProfilePhoto, setBotName, setBotInfoDescription, and setBotInfoShortDescription"
			},
			{
				"name": "can_join_groups",
				"type": "Bool",
				"description": "True, if the bot can be invited to basic group and supergroup chats"
			},
			{
				"name": "can_read_all_group_messages",
				"type": "Bool",
				"description": "True, if the bot can read all messages in basic group or supergroup chats and not just those addressed to the bot. In private and channel chats a bot can always read all messages"
			},
			{
				"name": "has_main_web_app",
				"type": "Bool",
				"description": "True, if the bot has the main Web App"
			},
			{
				"name": "is_inline",
				"type": "Bool",
				"description": "True, if the bot supports inline queries"
			},
			{
				"name": "inline_query_placeholder",
				"type": "string",
				"description": "Placeholder for inline queries (displayed on the application input field)"
			},
			{
				"name": "need_location",
				"type": "Bool",
				"description": "True, if the location of the user is expected to be sent with every inline query to this bot"
			},
			{
				"name": "can_connect_to_business",
				"type": "Bool",
				"description": "True, if the bot supports connection to Telegram Business accounts"
			},
			{
				"name": "can_be_added_to_attachment_menu",
				"type": "Bool",
				"description": "True, if the bot can be added to attachment or side menu"
			},
			{
				"name": "active_user_count",
				"type": "int32",
				"description": "The number of recently active users of the bot"
			}
		],
		"description": "A bot (see https://core.telegram.org/bots)",
		"inheritance": "UserType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userTypeUnknown",
		"methods": null,
		"description": "No information on the user besides the user identifier is available, yet this user has not been deleted. This object is extremely rare and must be handled like a deleted user. It is not possible to perform any actions on users of this type",
		"inheritance": "UserType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "botCommand",
		"methods": [
			{
				"name": "command",
				"type": "string",
				"description": "Text of the bot command"
			},
			{
				"name": "description",
				"type": "string",
				"description": "Description of the bot command"
			}
		],
		"description": "Represents a command supported by a bot",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "botCommands",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Bot's user identifier"
			},
			{
				"name": "commands",
				"type": "vector<botCommand>",
				"description": "List of bot commands"
			}
		],
		"description": "Contains a list of bot commands",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "botMenuButton",
		"methods": [
			{
				"name": "text",
				"type": "string",
				"description": "Text of the button"
			},
			{
				"name": "url",
				"type": "string",
				"description": "URL of a Web App to open when the button is pressed. If the link is of the type internalLinkTypeWebApp, then it must be processed accordingly. Otherwise, the link must be passed to openWebApp"
			}
		],
		"description": "Describes a button to be shown instead of bot commands menu button",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "botVerificationParameters",
		"methods": [
			{
				"name": "icon_custom_emoji_id",
				"type": "int64",
				"description": "Identifier of the custom emoji that is used as the verification sign"
			},
			{
				"name": "organization_name",
				"type": "string",
				"description": "Name of the organization that provides verification"
			},
			{
				"name": "default_custom_description",
				"type": "formattedText",
				"description": "Default custom description of verification reason to be used as placeholder in setMessageSenderBotVerification; may be null if none"
			},
			{
				"name": "can_set_custom_description",
				"type": "Bool",
				"description": "True, if the bot is allowed to provide custom description for verified entities"
			}
		],
		"description": "Describes parameters of verification that is provided by a bot",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "botVerification",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the bot that provided the verification"
			},
			{
				"name": "icon_custom_emoji_id",
				"type": "int64",
				"description": "Identifier of the custom emoji that is used as the verification sign"
			},
			{
				"name": "custom_description",
				"type": "formattedText",
				"description": "Custom description of verification reason set by the bot. Can contain only Mention, Hashtag, Cashtag, PhoneNumber, BankCardNumber, Url, and EmailAddress entities"
			}
		],
		"description": "Describes verification status provided by a bot",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "verificationStatus",
		"methods": [
			{
				"name": "is_verified",
				"type": "Bool",
				"description": "True, if the chat or the user is verified by Telegram"
			},
			{
				"name": "is_scam",
				"type": "Bool",
				"description": "True, if the chat or the user is marked as scam by Telegram"
			},
			{
				"name": "is_fake",
				"type": "Bool",
				"description": "True, if the chat or the user is marked as fake by Telegram"
			},
			{
				"name": "bot_verification_icon_custom_emoji_id",
				"type": "int64",
				"description": "Identifier of the custom emoji to be shown as verification sign provided by a bot for the user; 0 if none"
			}
		],
		"description": "Contains information about verification status of a chat or a user",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatLocation",
		"methods": [
			{
				"name": "location",
				"type": "location",
				"description": "The location"
			},
			{
				"name": "address",
				"type": "string",
				"description": "Location address; 1-64 characters, as defined by the chat owner"
			}
		],
		"description": "Represents a location to which a chat is connected",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "birthdate",
		"methods": [
			{
				"name": "day",
				"type": "int32",
				"description": "Day of the month; 1-31"
			},
			{
				"name": "month",
				"type": "int32",
				"description": "Month of the year; 1-12"
			},
			{
				"name": "year",
				"type": "int32",
				"description": "Birth year; 0 if unknown"
			}
		],
		"description": "Represents a birthdate of a user",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "closeBirthdayUser",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			},
			{
				"name": "birthdate",
				"type": "birthdate",
				"description": "Birthdate of the user"
			}
		],
		"description": "Describes a user that had or will have a birthday soon",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "BusinessAwayMessageSchedule",
		"methods": null,
		"description": "Describes conditions for sending of away messages by a Telegram Business account",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessAwayMessageScheduleAlways",
		"methods": null,
		"description": "Send away messages always",
		"inheritance": "BusinessAwayMessageSchedule",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessAwayMessageScheduleOutsideOfOpeningHours",
		"methods": null,
		"description": "Send away messages outside of the business opening hours",
		"inheritance": "BusinessAwayMessageSchedule",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessAwayMessageScheduleCustom",
		"methods": [
			{
				"name": "start_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the away messages will start to be sent"
			},
			{
				"name": "end_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the away messages will stop to be sent"
			}
		],
		"description": "Send away messages only in the specified time span",
		"inheritance": "BusinessAwayMessageSchedule",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessLocation",
		"methods": [
			{
				"name": "location",
				"type": "location",
				"description": "The location; may be null if not specified"
			},
			{
				"name": "address",
				"type": "string",
				"description": "Location address; 1-96 characters"
			}
		],
		"description": "Represents a location of a business",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessRecipients",
		"methods": [
			{
				"name": "chat_ids",
				"type": "vector<int53>",
				"description": "Identifiers of selected private chats"
			},
			{
				"name": "excluded_chat_ids",
				"type": "vector<int53>",
				"description": "Identifiers of private chats that are always excluded; for businessConnectedBot only"
			},
			{
				"name": "select_existing_chats",
				"type": "Bool",
				"description": "True, if all existing private chats are selected"
			},
			{
				"name": "select_new_chats",
				"type": "Bool",
				"description": "True, if all new private chats are selected"
			},
			{
				"name": "select_contacts",
				"type": "Bool",
				"description": "True, if all private chats with contacts are selected"
			},
			{
				"name": "select_non_contacts",
				"type": "Bool",
				"description": "True, if all private chats with non-contacts are selected"
			},
			{
				"name": "exclude_selected",
				"type": "Bool",
				"description": "If true, then all private chats except the selected are chosen. Otherwise, only the selected chats are chosen"
			}
		],
		"description": "Describes private chats chosen for automatic interaction with a business",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessAwayMessageSettings",
		"methods": [
			{
				"name": "shortcut_id",
				"type": "int32",
				"description": "Unique quick reply shortcut identifier for the away messages"
			},
			{
				"name": "recipients",
				"type": "businessRecipients",
				"description": "Chosen recipients of the away messages"
			},
			{
				"name": "schedule",
				"type": "BusinessAwayMessageSchedule",
				"description": "Settings used to check whether the current user is away"
			},
			{
				"name": "offline_only",
				"type": "Bool",
				"description": "True, if the messages must not be sent if the account was online in the last 10 minutes"
			}
		],
		"description": "Describes settings for messages that are automatically sent by a Telegram Business account when it is away",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessGreetingMessageSettings",
		"methods": [
			{
				"name": "shortcut_id",
				"type": "int32",
				"description": "Unique quick reply shortcut identifier for the greeting messages"
			},
			{
				"name": "recipients",
				"type": "businessRecipients",
				"description": "Chosen recipients of the greeting messages"
			},
			{
				"name": "inactivity_days",
				"type": "int32",
				"description": "The number of days after which a chat will be considered as inactive; currently, must be on of 7, 14, 21, or 28"
			}
		],
		"description": "Describes settings for greeting messages that are automatically sent by a Telegram Business account as response to incoming messages in an inactive private chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessConnectedBot",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "User identifier of the bot"
			},
			{
				"name": "recipients",
				"type": "businessRecipients",
				"description": "Private chats that will be accessible to the bot"
			},
			{
				"name": "can_reply",
				"type": "Bool",
				"description": "True, if the bot can send messages to the private chats; false otherwise"
			}
		],
		"description": "Describes a bot connected to a business account",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessStartPage",
		"methods": [
			{
				"name": "title",
				"type": "string",
				"description": "Title text of the start page"
			},
			{
				"name": "message",
				"type": "string",
				"description": "Message text of the start page"
			},
			{
				"name": "sticker",
				"type": "sticker",
				"description": "Greeting sticker of the start page; may be null if none"
			}
		],
		"description": "Describes settings for a business account start page",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputBusinessStartPage",
		"methods": [
			{
				"name": "title",
				"type": "string",
				"description": "Title text of the start page; 0-getOption(\"business_start_page_title_length_max\") characters"
			},
			{
				"name": "message",
				"type": "string",
				"description": "Message text of the start page; 0-getOption(\"business_start_page_message_length_max\") characters"
			},
			{
				"name": "sticker",
				"type": "InputFile",
				"description": "Greeting sticker of the start page; pass null if none. The sticker must belong to a sticker set and must not be a custom emoji"
			}
		],
		"description": "Describes settings for a business account start page to set",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessOpeningHoursInterval",
		"methods": [
			{
				"name": "start_minute",
				"type": "int32",
				"description": "The minute's sequence number in a week, starting on Monday, marking the start of the time interval during which the business is open; 0-7*24*60"
			},
			{
				"name": "end_minute",
				"type": "int32",
				"description": "The minute's sequence number in a week, starting on Monday, marking the end of the time interval during which the business is open; 1-8*24*60"
			}
		],
		"description": "Describes an interval of time when the business is open",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessOpeningHours",
		"methods": [
			{
				"name": "time_zone_id",
				"type": "string",
				"description": "Unique time zone identifier"
			},
			{
				"name": "opening_hours",
				"type": "vector<businessOpeningHoursInterval>",
				"description": "Intervals of the time when the business is open"
			}
		],
		"description": "Describes opening hours of a business",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessInfo",
		"methods": [
			{
				"name": "location",
				"type": "businessLocation",
				"description": "Location of the business; may be null if none"
			},
			{
				"name": "opening_hours",
				"type": "businessOpeningHours",
				"description": "Opening hours of the business; may be null if none. The hours are guaranteed to be valid and has already been split by week days"
			},
			{
				"name": "local_opening_hours",
				"type": "businessOpeningHours",
				"description": "Opening hours of the business in the local time; may be null if none. The hours are guaranteed to be valid and has already been split by week days. Local time zone identifier will be empty. An updateUserFullInfo update is not triggered when value of this field changes"
			},
			{
				"name": "next_open_in",
				"type": "int32",
				"description": "Time left before the business will open the next time, in seconds; 0 if unknown. An updateUserFullInfo update is not triggered when value of this field changes"
			},
			{
				"name": "next_close_in",
				"type": "int32",
				"description": "Time left before the business will close the next time, in seconds; 0 if unknown. An updateUserFullInfo update is not triggered when value of this field changes"
			},
			{
				"name": "greeting_message_settings",
				"type": "businessGreetingMessageSettings",
				"description": "The greeting message; may be null if none or the Business account is not of the current user"
			},
			{
				"name": "away_message_settings",
				"type": "businessAwayMessageSettings",
				"description": "The away message; may be null if none or the Business account is not of the current user"
			},
			{
				"name": "start_page",
				"type": "businessStartPage",
				"description": "Information about start page of the account; may be null if none"
			}
		],
		"description": "Contains information about a Telegram Business account",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessChatLink",
		"methods": [
			{
				"name": "link",
				"type": "string",
				"description": "The HTTPS link"
			},
			{
				"name": "text",
				"type": "formattedText",
				"description": "Message draft text that will be added to the input field"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Link title"
			},
			{
				"name": "view_count",
				"type": "int32",
				"description": "Number of times the link was used"
			}
		],
		"description": "Contains information about a business chat link",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessChatLinks",
		"methods": [
			{
				"name": "links",
				"type": "vector<businessChatLink>",
				"description": "List of links"
			}
		],
		"description": "Contains a list of business chat links created by the user",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputBusinessChatLink",
		"methods": [
			{
				"name": "text",
				"type": "formattedText",
				"description": "Message draft text that will be added to the input field"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Link title"
			}
		],
		"description": "Describes a business chat link to create or edit",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessChatLinkInfo",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the private chat that created the link"
			},
			{
				"name": "text",
				"type": "formattedText",
				"description": "Message draft text that must be added to the input field"
			}
		],
		"description": "Contains information about a business chat link",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ChatPhotoStickerType",
		"methods": null,
		"description": "Describes type of sticker, which was used to create a chat photo",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatPhotoStickerTypeRegularOrMask",
		"methods": [
			{
				"name": "sticker_set_id",
				"type": "int64",
				"description": "Sticker set identifier"
			},
			{
				"name": "sticker_id",
				"type": "int64",
				"description": "Identifier of the sticker in the set"
			}
		],
		"description": "Information about the sticker, which was used to create the chat photo",
		"inheritance": "ChatPhotoStickerType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatPhotoStickerTypeCustomEmoji",
		"methods": [
			{
				"name": "custom_emoji_id",
				"type": "int64",
				"description": "Identifier of the custom emoji"
			}
		],
		"description": "Information about the custom emoji, which was used to create the chat photo",
		"inheritance": "ChatPhotoStickerType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatPhotoSticker",
		"methods": [
			{
				"name": "type",
				"type": "ChatPhotoStickerType",
				"description": "Type of the sticker"
			},
			{
				"name": "background_fill",
				"type": "BackgroundFill",
				"description": "The fill to be used as background for the sticker; rotation angle in backgroundFillGradient isn't supported"
			}
		],
		"description": "Information about the sticker, which was used to create the chat photo. The sticker is shown at the center of the photo and occupies at most 67% of it",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "animatedChatPhoto",
		"methods": [
			{
				"name": "length",
				"type": "int32",
				"description": "Animation width and height"
			},
			{
				"name": "file",
				"type": "file",
				"description": "Information about the animation file"
			},
			{
				"name": "main_frame_timestamp",
				"type": "double",
				"description": "Timestamp of the frame, used as a static chat photo"
			}
		],
		"description": "Animated variant of a chat photo in MPEG4 format",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatPhoto",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "Unique photo identifier"
			},
			{
				"name": "added_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the photo has been added"
			},
			{
				"name": "minithumbnail",
				"type": "minithumbnail",
				"description": "Photo minithumbnail; may be null"
			},
			{
				"name": "sizes",
				"type": "vector<photoSize>",
				"description": "Available variants of the photo in JPEG format, in different size"
			},
			{
				"name": "animation",
				"type": "animatedChatPhoto",
				"description": "A big (up to 1280x1280) animated variant of the photo in MPEG4 format; may be null"
			},
			{
				"name": "small_animation",
				"type": "animatedChatPhoto",
				"description": "A small (160x160) animated variant of the photo in MPEG4 format; may be null even the big animation is available"
			},
			{
				"name": "sticker",
				"type": "chatPhotoSticker",
				"description": "Sticker-based version of the chat photo; may be null"
			}
		],
		"description": "Describes a chat or user profile photo",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatPhotos",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "Total number of photos"
			},
			{
				"name": "photos",
				"type": "vector<chatPhoto>",
				"description": "List of photos"
			}
		],
		"description": "Contains a list of chat or user profile photos",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "InputChatPhoto",
		"methods": null,
		"description": "Describes a photo to be set as a user profile or chat photo",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputChatPhotoPrevious",
		"methods": [
			{
				"name": "chat_photo_id",
				"type": "int64",
				"description": "Identifier of the current user's profile photo to reuse"
			}
		],
		"description": "A previously used profile photo of the current user",
		"inheritance": "InputChatPhoto",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputChatPhotoStatic",
		"methods": [
			{
				"name": "photo",
				"type": "InputFile",
				"description": "Photo to be set as profile photo. Only inputFileLocal and inputFileGenerated are allowed"
			}
		],
		"description": "A static photo in JPEG format",
		"inheritance": "InputChatPhoto",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputChatPhotoAnimation",
		"methods": [
			{
				"name": "animation",
				"type": "InputFile",
				"description": "Animation to be set as profile photo. Only inputFileLocal and inputFileGenerated are allowed"
			},
			{
				"name": "main_frame_timestamp",
				"type": "double",
				"description": "Timestamp of the frame, which will be used as static chat photo"
			}
		],
		"description": "An animation in MPEG4 format; must be square, at most 10 seconds long, have width between 160 and 1280 and be at most 2MB in size",
		"inheritance": "InputChatPhoto",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputChatPhotoSticker",
		"methods": [
			{
				"name": "sticker",
				"type": "chatPhotoSticker",
				"description": "Information about the sticker"
			}
		],
		"description": "A sticker on a custom background",
		"inheritance": "InputChatPhoto",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatPermissions",
		"methods": [
			{
				"name": "can_send_basic_messages",
				"type": "Bool",
				"description": "True, if the user can send text messages, contacts, giveaways, giveaway winners, invoices, locations, and venues"
			},
			{
				"name": "can_send_audios",
				"type": "Bool",
				"description": "True, if the user can send music files"
			},
			{
				"name": "can_send_documents",
				"type": "Bool",
				"description": "True, if the user can send documents"
			},
			{
				"name": "can_send_photos",
				"type": "Bool",
				"description": "True, if the user can send photos"
			},
			{
				"name": "can_send_videos",
				"type": "Bool",
				"description": "True, if the user can send videos"
			},
			{
				"name": "can_send_video_notes",
				"type": "Bool",
				"description": "True, if the user can send video notes"
			},
			{
				"name": "can_send_voice_notes",
				"type": "Bool",
				"description": "True, if the user can send voice notes"
			},
			{
				"name": "can_send_polls",
				"type": "Bool",
				"description": "True, if the user can send polls"
			},
			{
				"name": "can_send_other_messages",
				"type": "Bool",
				"description": "True, if the user can send animations, games, stickers, and dice and use inline bots"
			},
			{
				"name": "can_add_link_previews",
				"type": "Bool",
				"description": "True, if the user may add a link preview to their messages"
			},
			{
				"name": "can_change_info",
				"type": "Bool",
				"description": "True, if the user can change the chat title, photo, and other settings"
			},
			{
				"name": "can_invite_users",
				"type": "Bool",
				"description": "True, if the user can invite new users to the chat"
			},
			{
				"name": "can_pin_messages",
				"type": "Bool",
				"description": "True, if the user can pin messages"
			},
			{
				"name": "can_create_topics",
				"type": "Bool",
				"description": "True, if the user can create topics"
			}
		],
		"description": "Describes actions that a user is allowed to take in a chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatAdministratorRights",
		"methods": [
			{
				"name": "can_manage_chat",
				"type": "Bool",
				"description": "True, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report supergroup spam messages and ignore slow mode. Implied by any other privilege; applicable to supergroups and channels only"
			},
			{
				"name": "can_change_info",
				"type": "Bool",
				"description": "True, if the administrator can change the chat title, photo, and other settings"
			},
			{
				"name": "can_post_messages",
				"type": "Bool",
				"description": "True, if the administrator can create channel posts or view channel statistics; applicable to channels only"
			},
			{
				"name": "can_edit_messages",
				"type": "Bool",
				"description": "True, if the administrator can edit messages of other users and pin messages; applicable to channels only"
			},
			{
				"name": "can_delete_messages",
				"type": "Bool",
				"description": "True, if the administrator can delete messages of other users"
			},
			{
				"name": "can_invite_users",
				"type": "Bool",
				"description": "True, if the administrator can invite new users to the chat"
			},
			{
				"name": "can_restrict_members",
				"type": "Bool",
				"description": "True, if the administrator can restrict, ban, or unban chat members or view supergroup statistics; always true for channels"
			},
			{
				"name": "can_pin_messages",
				"type": "Bool",
				"description": "True, if the administrator can pin messages; applicable to basic groups and supergroups only"
			},
			{
				"name": "can_manage_topics",
				"type": "Bool",
				"description": "True, if the administrator can create, rename, close, reopen, hide, and unhide forum topics; applicable to forum supergroups only"
			},
			{
				"name": "can_promote_members",
				"type": "Bool",
				"description": "True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that were directly or indirectly promoted by them"
			},
			{
				"name": "can_manage_video_chats",
				"type": "Bool",
				"description": "True, if the administrator can manage video chats"
			},
			{
				"name": "can_post_stories",
				"type": "Bool",
				"description": "True, if the administrator can create new chat stories, or edit and delete posted stories; applicable to supergroups and channels only"
			},
			{
				"name": "can_edit_stories",
				"type": "Bool",
				"description": "True, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access story archive; applicable to supergroups and channels only"
			},
			{
				"name": "can_delete_stories",
				"type": "Bool",
				"description": "True, if the administrator can delete stories posted by other users; applicable to supergroups and channels only"
			},
			{
				"name": "is_anonymous",
				"type": "Bool",
				"description": "True, if the administrator isn't shown in the chat member list and sends messages anonymously; applicable to supergroups only"
			}
		],
		"description": "Describes rights of the administrator",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starAmount",
		"methods": [
			{
				"name": "star_count",
				"type": "int53",
				"description": "The integer amount of Telegram Stars rounded to 0"
			},
			{
				"name": "nanostar_count",
				"type": "int32",
				"description": "The number of 1/1000000000 shares of Telegram Stars; from -999999999 to 999999999"
			}
		],
		"description": "Describes a possibly non-integer amount of Telegram Stars",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "StarSubscriptionType",
		"methods": null,
		"description": "Describes type of subscription paid in Telegram Stars",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starSubscriptionTypeChannel",
		"methods": [
			{
				"name": "can_reuse",
				"type": "Bool",
				"description": "True, if the subscription is active and the user can use the method reuseStarSubscription to join the subscribed chat again"
			},
			{
				"name": "invite_link",
				"type": "string",
				"description": "The invite link that can be used to renew the subscription if it has been expired; may be empty, if the link isn't available anymore"
			}
		],
		"description": "Describes a subscription to a channel chat",
		"inheritance": "StarSubscriptionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starSubscriptionTypeBot",
		"methods": [
			{
				"name": "is_canceled_by_bot",
				"type": "Bool",
				"description": "True, if the subscription was canceled by the bot and can't be extended"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Subscription invoice title"
			},
			{
				"name": "photo",
				"type": "photo",
				"description": "Subscription invoice photo"
			},
			{
				"name": "invoice_link",
				"type": "string",
				"description": "The link to the subscription invoice"
			}
		],
		"description": "Describes a subscription in a bot or a business account",
		"inheritance": "StarSubscriptionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starSubscriptionPricing",
		"methods": [
			{
				"name": "period",
				"type": "int32",
				"description": "The number of seconds between consecutive Telegram Star debiting"
			},
			{
				"name": "star_count",
				"type": "int53",
				"description": "The amount of Telegram Stars that must be paid for each period"
			}
		],
		"description": "Describes subscription plan paid in Telegram Stars",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starSubscription",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the subscription"
			},
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat that is subscribed"
			},
			{
				"name": "expiration_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the subscription will expire or expired"
			},
			{
				"name": "is_canceled",
				"type": "Bool",
				"description": "True, if the subscription was canceled"
			},
			{
				"name": "is_expiring",
				"type": "Bool",
				"description": "True, if the subscription expires soon and there are no enough Telegram Stars on the user's balance to extend it"
			},
			{
				"name": "pricing",
				"type": "starSubscriptionPricing",
				"description": "The subscription plan"
			},
			{
				"name": "type",
				"type": "StarSubscriptionType",
				"description": "Type of the subscription"
			}
		],
		"description": "Contains information about subscription to a channel chat, a bot, or a business account that was paid in Telegram Stars",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starSubscriptions",
		"methods": [
			{
				"name": "star_amount",
				"type": "starAmount",
				"description": "The amount of owned Telegram Stars"
			},
			{
				"name": "subscriptions",
				"type": "vector<starSubscription>",
				"description": "List of subscriptions for Telegram Stars"
			},
			{
				"name": "required_star_count",
				"type": "int53",
				"description": "The number of Telegram Stars required to buy to extend subscriptions expiring soon"
			},
			{
				"name": "next_offset",
				"type": "string",
				"description": "The offset for the next request. If empty, then there are no more results"
			}
		],
		"description": "Represents a list of Telegram Star subscriptions",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "AffiliateType",
		"methods": null,
		"description": "Describes type of affiliate for an affiliate program",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "affiliateTypeCurrentUser",
		"methods": null,
		"description": "The affiliate is the current user",
		"inheritance": "AffiliateType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "affiliateTypeBot",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier of the bot"
			}
		],
		"description": "The affiliate is a bot owned by the current user",
		"inheritance": "AffiliateType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "affiliateTypeChannel",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the channel chat"
			}
		],
		"description": "The affiliate is a channel chat where the current user has can_post_messages administrator right",
		"inheritance": "AffiliateType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "AffiliateProgramSortOrder",
		"methods": null,
		"description": "Describes the order of the found affiliate programs",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "affiliateProgramSortOrderProfitability",
		"methods": null,
		"description": "The affiliate programs must be sorted by the profitability",
		"inheritance": "AffiliateProgramSortOrder",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "affiliateProgramSortOrderCreationDate",
		"methods": null,
		"description": "The affiliate programs must be sorted by creation date",
		"inheritance": "AffiliateProgramSortOrder",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "affiliateProgramSortOrderRevenue",
		"methods": null,
		"description": "The affiliate programs must be sorted by the expected revenue",
		"inheritance": "AffiliateProgramSortOrder",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "affiliateProgramParameters",
		"methods": [
			{
				"name": "commission_per_mille",
				"type": "int32",
				"description": "The number of Telegram Stars received by the affiliate for each 1000 Telegram Stars received by the program owner; getOption(\"affiliate_program_commission_per_mille_min\")-getOption(\"affiliate_program_commission_per_mille_max\")"
			},
			{
				"name": "month_count",
				"type": "int32",
				"description": "Number of months the program will be active; 0-36. If 0, then the program is eternal"
			}
		],
		"description": "Describes parameters of an affiliate program",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "affiliateProgramInfo",
		"methods": [
			{
				"name": "parameters",
				"type": "affiliateProgramParameters",
				"description": "Parameters of the affiliate program"
			},
			{
				"name": "end_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the affiliate program will be closed; 0 if the affiliate program isn't scheduled to be closed. If positive, then the program can't be connected using connectAffiliateProgram, but active connections will work until the date"
			},
			{
				"name": "daily_revenue_per_user_amount",
				"type": "starAmount",
				"description": "The amount of daily revenue per user in Telegram Stars of the bot that created the affiliate program"
			}
		],
		"description": "Contains information about an active affiliate program",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "affiliateInfo",
		"methods": [
			{
				"name": "commission_per_mille",
				"type": "int32",
				"description": "The number of Telegram Stars received by the affiliate for each 1000 Telegram Stars received by the program owner"
			},
			{
				"name": "affiliate_chat_id",
				"type": "int53",
				"description": "Identifier of the chat which received the commission"
			},
			{
				"name": "star_amount",
				"type": "starAmount",
				"description": "The amount of Telegram Stars that were received by the affiliate; can be negative for refunds"
			}
		],
		"description": "Contains information about an affiliate that received commission from a Telegram Star transaction",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "foundAffiliateProgram",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "User identifier of the bot created the program"
			},
			{
				"name": "info",
				"type": "affiliateProgramInfo",
				"description": "Information about the affiliate program"
			}
		],
		"description": "Describes a found affiliate program",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "foundAffiliatePrograms",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "The total number of found affiliate programs"
			},
			{
				"name": "programs",
				"type": "vector<foundAffiliateProgram>",
				"description": "The list of affiliate programs"
			},
			{
				"name": "next_offset",
				"type": "string",
				"description": "The offset for the next request. If empty, then there are no more results"
			}
		],
		"description": "Represents a list of found affiliate programs",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "connectedAffiliateProgram",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "The link that can be used to refer users if the program is still active"
			},
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "User identifier of the bot created the program"
			},
			{
				"name": "parameters",
				"type": "affiliateProgramParameters",
				"description": "The parameters of the affiliate program"
			},
			{
				"name": "connection_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the affiliate program was connected"
			},
			{
				"name": "is_disconnected",
				"type": "Bool",
				"description": "True, if the program was canceled by the bot, or disconnected by the chat owner and isn't available anymore"
			},
			{
				"name": "user_count",
				"type": "int64",
				"description": "The number of users that used the affiliate program"
			},
			{
				"name": "revenue_star_count",
				"type": "int64",
				"description": "The number of Telegram Stars that were earned by the affiliate program"
			}
		],
		"description": "Describes an affiliate program that was connected to an affiliate",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "connectedAffiliatePrograms",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "The total number of affiliate programs that were connected to the affiliate"
			},
			{
				"name": "programs",
				"type": "vector<connectedAffiliateProgram>",
				"description": "The list of connected affiliate programs"
			},
			{
				"name": "next_offset",
				"type": "string",
				"description": "The offset for the next request. If empty, then there are no more results"
			}
		],
		"description": "Represents a list of affiliate programs that were connected to an affiliate",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "productInfo",
		"methods": [
			{
				"name": "title",
				"type": "string",
				"description": "Product title"
			},
			{
				"name": "description",
				"type": "formattedText",
				"description": "Product description"
			},
			{
				"name": "photo",
				"type": "photo",
				"description": "Product photo; may be null"
			}
		],
		"description": "Contains information about a product that can be paid with invoice",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumPaymentOption",
		"methods": [
			{
				"name": "currency",
				"type": "string",
				"description": "ISO 4217 currency code for Telegram Premium subscription payment"
			},
			{
				"name": "amount",
				"type": "int53",
				"description": "The amount to pay, in the smallest units of the currency"
			},
			{
				"name": "discount_percentage",
				"type": "int32",
				"description": "The discount associated with this option, as a percentage"
			},
			{
				"name": "month_count",
				"type": "int32",
				"description": "Number of months the Telegram Premium subscription will be active. Use getPremiumInfoSticker to get the sticker to be used as representation of the Telegram Premium subscription"
			},
			{
				"name": "store_product_id",
				"type": "string",
				"description": "Identifier of the store product associated with the option"
			},
			{
				"name": "payment_link",
				"type": "InternalLinkType",
				"description": "An internal link to be opened for buying Telegram Premium to the user if store payment isn't possible; may be null if direct payment isn't available"
			}
		],
		"description": "Describes an option for buying Telegram Premium to a user",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumStatePaymentOption",
		"methods": [
			{
				"name": "payment_option",
				"type": "premiumPaymentOption",
				"description": "Information about the payment option"
			},
			{
				"name": "is_current",
				"type": "Bool",
				"description": "True, if this is the currently used Telegram Premium subscription option"
			},
			{
				"name": "is_upgrade",
				"type": "Bool",
				"description": "True, if the payment option can be used to upgrade the existing Telegram Premium subscription"
			},
			{
				"name": "last_transaction_id",
				"type": "string",
				"description": "Identifier of the last in-store transaction for the currently used option"
			}
		],
		"description": "Describes an option for buying or upgrading Telegram Premium for self",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumGiftPaymentOption",
		"methods": [
			{
				"name": "currency",
				"type": "string",
				"description": "ISO 4217 currency code for the payment"
			},
			{
				"name": "amount",
				"type": "int53",
				"description": "The amount to pay, in the smallest units of the currency"
			},
			{
				"name": "star_count",
				"type": "int53",
				"description": "The alternative amount of Telegram Stars to pay; 0 if payment in Telegram Stars is not possible"
			},
			{
				"name": "discount_percentage",
				"type": "int32",
				"description": "The discount associated with this option, as a percentage"
			},
			{
				"name": "month_count",
				"type": "int32",
				"description": "Number of months the Telegram Premium subscription will be active"
			},
			{
				"name": "store_product_id",
				"type": "string",
				"description": "Identifier of the store product associated with the option"
			},
			{
				"name": "sticker",
				"type": "sticker",
				"description": "A sticker to be shown along with the option; may be null if unknown"
			}
		],
		"description": "Describes an option for gifting Telegram Premium to a user. Use telegramPaymentPurposePremiumGift for out-of-store payments or payments in Telegram Stars",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumGiftPaymentOptions",
		"methods": [
			{
				"name": "options",
				"type": "vector<premiumGiftPaymentOption>",
				"description": "The list of options sorted by Telegram Premium subscription duration"
			}
		],
		"description": "Contains a list of options for gifting Telegram Premium to a user",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumGiveawayPaymentOption",
		"methods": [
			{
				"name": "currency",
				"type": "string",
				"description": "ISO 4217 currency code for Telegram Premium gift code payment"
			},
			{
				"name": "amount",
				"type": "int53",
				"description": "The amount to pay, in the smallest units of the currency"
			},
			{
				"name": "winner_count",
				"type": "int32",
				"description": "Number of users which will be able to activate the gift codes"
			},
			{
				"name": "month_count",
				"type": "int32",
				"description": "Number of months the Telegram Premium subscription will be active"
			},
			{
				"name": "store_product_id",
				"type": "string",
				"description": "Identifier of the store product associated with the option; may be empty if none"
			},
			{
				"name": "store_product_quantity",
				"type": "int32",
				"description": "Number of times the store product must be paid"
			}
		],
		"description": "Describes an option for creating of Telegram Premium giveaway or manual distribution of Telegram Premium among chat members. Use telegramPaymentPurposePremiumGiftCodes or telegramPaymentPurposePremiumGiveaway for out-of-store payments",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumGiveawayPaymentOptions",
		"methods": [
			{
				"name": "options",
				"type": "vector<premiumGiveawayPaymentOption>",
				"description": "The list of options"
			}
		],
		"description": "Contains a list of options for creating of Telegram Premium giveaway or manual distribution of Telegram Premium among chat members",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumGiftCodeInfo",
		"methods": [
			{
				"name": "creator_id",
				"type": "MessageSender",
				"description": "Identifier of a chat or a user that created the gift code; may be null if unknown. If null and the code is from messagePremiumGiftCode message, then creator_id from the message can be used"
			},
			{
				"name": "creation_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the code was created"
			},
			{
				"name": "is_from_giveaway",
				"type": "Bool",
				"description": "True, if the gift code was created for a giveaway"
			},
			{
				"name": "giveaway_message_id",
				"type": "int53",
				"description": "Identifier of the corresponding giveaway message in the creator_id chat; can be 0 or an identifier of a deleted message"
			},
			{
				"name": "month_count",
				"type": "int32",
				"description": "Number of months the Telegram Premium subscription will be active after code activation"
			},
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of a user for which the code was created; 0 if none"
			},
			{
				"name": "use_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the code was activated; 0 if none"
			}
		],
		"description": "Contains information about a Telegram Premium gift code",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starPaymentOption",
		"methods": [
			{
				"name": "currency",
				"type": "string",
				"description": "ISO 4217 currency code for the payment"
			},
			{
				"name": "amount",
				"type": "int53",
				"description": "The amount to pay, in the smallest units of the currency"
			},
			{
				"name": "star_count",
				"type": "int53",
				"description": "Number of Telegram Stars that will be purchased"
			},
			{
				"name": "store_product_id",
				"type": "string",
				"description": "Identifier of the store product associated with the option; may be empty if none"
			},
			{
				"name": "is_additional",
				"type": "Bool",
				"description": "True, if the option must be shown only in the full list of payment options"
			}
		],
		"description": "Describes an option for buying Telegram Stars. Use telegramPaymentPurposeStars for out-of-store payments",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starPaymentOptions",
		"methods": [
			{
				"name": "options",
				"type": "vector<starPaymentOption>",
				"description": "The list of options"
			}
		],
		"description": "Contains a list of options for buying Telegram Stars",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starGiveawayWinnerOption",
		"methods": [
			{
				"name": "winner_count",
				"type": "int32",
				"description": "The number of users that will be chosen as winners"
			},
			{
				"name": "won_star_count",
				"type": "int53",
				"description": "The number of Telegram Stars that will be won by the winners of the giveaway"
			},
			{
				"name": "is_default",
				"type": "Bool",
				"description": "True, if the option must be chosen by default"
			}
		],
		"description": "Describes an option for the number of winners of a Telegram Star giveaway",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starGiveawayPaymentOption",
		"methods": [
			{
				"name": "currency",
				"type": "string",
				"description": "ISO 4217 currency code for the payment"
			},
			{
				"name": "amount",
				"type": "int53",
				"description": "The amount to pay, in the smallest units of the currency"
			},
			{
				"name": "star_count",
				"type": "int53",
				"description": "Number of Telegram Stars that will be distributed among winners"
			},
			{
				"name": "store_product_id",
				"type": "string",
				"description": "Identifier of the store product associated with the option; may be empty if none"
			},
			{
				"name": "yearly_boost_count",
				"type": "int32",
				"description": "Number of times the chat will be boosted for one year if the option is chosen"
			},
			{
				"name": "winner_options",
				"type": "vector<starGiveawayWinnerOption>",
				"description": "Allowed options for the number of giveaway winners"
			},
			{
				"name": "is_default",
				"type": "Bool",
				"description": "True, if the option must be chosen by default"
			},
			{
				"name": "is_additional",
				"type": "Bool",
				"description": "True, if the option must be shown only in the full list of payment options"
			}
		],
		"description": "Describes an option for creating of Telegram Star giveaway. Use telegramPaymentPurposeStarGiveaway for out-of-store payments",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starGiveawayPaymentOptions",
		"methods": [
			{
				"name": "options",
				"type": "vector<starGiveawayPaymentOption>",
				"description": "The list of options"
			}
		],
		"description": "Contains a list of options for creating of Telegram Star giveaway",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "upgradedGiftModel",
		"methods": [
			{
				"name": "name",
				"type": "string",
				"description": "Name of the model"
			},
			{
				"name": "sticker",
				"type": "sticker",
				"description": "The sticker representing the upgraded gift"
			},
			{
				"name": "rarity_per_mille",
				"type": "int32",
				"description": "The number of upgraded gift that receive this model for each 1000 gifts upgraded"
			}
		],
		"description": "Describes a model of an upgraded gift",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "upgradedGiftSymbol",
		"methods": [
			{
				"name": "name",
				"type": "string",
				"description": "Name of the symbol"
			},
			{
				"name": "sticker",
				"type": "sticker",
				"description": "The sticker representing the upgraded gift"
			},
			{
				"name": "rarity_per_mille",
				"type": "int32",
				"description": "The number of upgraded gift that receive this symbol for each 1000 gifts upgraded"
			}
		],
		"description": "Describes a symbol shown on the pattern of an upgraded gift",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "upgradedGiftBackdropColors",
		"methods": [
			{
				"name": "center_color",
				"type": "int32",
				"description": "A color in the center of the backdrop in the RGB format"
			},
			{
				"name": "edge_color",
				"type": "int32",
				"description": "A color on the edges of the backdrop in the RGB format"
			},
			{
				"name": "symbol_color",
				"type": "int32",
				"description": "A color to be applied for the symbol in the RGB format"
			},
			{
				"name": "text_color",
				"type": "int32",
				"description": "A color for the text on the backdrop in the RGB format"
			}
		],
		"description": "Describes colors of a backdrop of an upgraded gift",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "upgradedGiftBackdrop",
		"methods": [
			{
				"name": "name",
				"type": "string",
				"description": "Name of the backdrop"
			},
			{
				"name": "colors",
				"type": "upgradedGiftBackdropColors",
				"description": "Colors of the backdrop"
			},
			{
				"name": "rarity_per_mille",
				"type": "int32",
				"description": "The number of upgraded gift that receive this backdrop for each 1000 gifts upgraded"
			}
		],
		"description": "Describes a backdrop of an upgraded gift",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "upgradedGiftOriginalDetails",
		"methods": [
			{
				"name": "sender_id",
				"type": "MessageSender",
				"description": "Identifier of the user or the chat that sent the gift; may be null if the gift was private"
			},
			{
				"name": "receiver_id",
				"type": "MessageSender",
				"description": "Identifier of the user or the chat that received the gift"
			},
			{
				"name": "text",
				"type": "formattedText",
				"description": "Message added to the gift"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the gift was sent"
			}
		],
		"description": "Describes the original details about the gift",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "gift",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "Unique identifier of the gift"
			},
			{
				"name": "sticker",
				"type": "sticker",
				"description": "The sticker representing the gift"
			},
			{
				"name": "star_count",
				"type": "int53",
				"description": "Number of Telegram Stars that must be paid for the gift"
			},
			{
				"name": "default_sell_star_count",
				"type": "int53",
				"description": "Number of Telegram Stars that can be claimed by the receiver instead of the regular gift by default. If the gift was paid with just bought Telegram Stars, then full value can be claimed"
			},
			{
				"name": "upgrade_star_count",
				"type": "int53",
				"description": "Number of Telegram Stars that must be paid to upgrade the gift; 0 if upgrade isn't possible"
			},
			{
				"name": "is_for_birthday",
				"type": "Bool",
				"description": "True, if the gift is a birthday gift"
			},
			{
				"name": "remaining_count",
				"type": "int32",
				"description": "Number of remaining times the gift can be purchased; 0 if not limited or the gift was sold out"
			},
			{
				"name": "total_count",
				"type": "int32",
				"description": "Number of total times the gift can be purchased; 0 if not limited"
			},
			{
				"name": "first_send_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the gift was send for the first time; for sold out gifts only"
			},
			{
				"name": "last_send_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the gift was send for the last time; for sold out gifts only"
			}
		],
		"description": "Describes a gift that can be sent to another user or channel chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "gifts",
		"methods": [
			{
				"name": "gifts",
				"type": "vector<gift>",
				"description": "The list of gifts"
			}
		],
		"description": "Contains a list of gifts that can be sent to another user or channel chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "upgradedGift",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "Unique identifier of the gift"
			},
			{
				"name": "title",
				"type": "string",
				"description": "The title of the upgraded gift"
			},
			{
				"name": "name",
				"type": "string",
				"description": "Unique name of the upgraded gift that can be used with internalLinkTypeUpgradedGift"
			},
			{
				"name": "number",
				"type": "int32",
				"description": "Unique number of the upgraded gift among gifts upgraded from the same gift"
			},
			{
				"name": "total_upgraded_count",
				"type": "int32",
				"description": "Total number of gifts that were upgraded from the same gift"
			},
			{
				"name": "max_upgraded_count",
				"type": "int32",
				"description": "The maximum number of gifts that can be upgraded from the same gift"
			},
			{
				"name": "owner_id",
				"type": "MessageSender",
				"description": "Identifier of the user or the chat that owns the upgraded gift; may be null if none or unknown"
			},
			{
				"name": "owner_address",
				"type": "string",
				"description": "Address of the gift NFT owner in TON blockchain; may be empty if none"
			},
			{
				"name": "owner_name",
				"type": "string",
				"description": "Name of the owner for the case when owner identifier and address aren't known"
			},
			{
				"name": "gift_address",
				"type": "string",
				"description": "Address of the gift NFT in TON blockchain; may be empty if none"
			},
			{
				"name": "model",
				"type": "upgradedGiftModel",
				"description": "Model of the upgraded gift"
			},
			{
				"name": "symbol",
				"type": "upgradedGiftSymbol",
				"description": "Symbol of the upgraded gift"
			},
			{
				"name": "backdrop",
				"type": "upgradedGiftBackdrop",
				"description": "Backdrop of the upgraded gift"
			},
			{
				"name": "original_details",
				"type": "upgradedGiftOriginalDetails",
				"description": "Information about the originally sent gift; may be null if unknown"
			}
		],
		"description": "Describes an upgraded gift that can be transferred to another owner or transferred to the TON blockchain as an NFT",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "upgradeGiftResult",
		"methods": [
			{
				"name": "gift",
				"type": "upgradedGift",
				"description": "The upgraded gift"
			},
			{
				"name": "received_gift_id",
				"type": "string",
				"description": "Unique identifier of the received gift for the current user"
			},
			{
				"name": "is_saved",
				"type": "Bool",
				"description": "True, if the gift is displayed on the user's or the channel's profile page"
			},
			{
				"name": "can_be_transferred",
				"type": "Bool",
				"description": "True, if the gift can be transferred to another owner"
			},
			{
				"name": "transfer_star_count",
				"type": "int53",
				"description": "Number of Telegram Stars that must be paid to transfer the upgraded gift"
			},
			{
				"name": "export_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the gift can be transferred to the TON blockchain as an NFT"
			}
		],
		"description": "Contains result of gift upgrading",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "SentGift",
		"methods": null,
		"description": "Represents content of a gift received by a user or a channel chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "sentGiftRegular",
		"methods": [
			{
				"name": "gift",
				"type": "gift",
				"description": "The gift"
			}
		],
		"description": "Regular gift",
		"inheritance": "SentGift",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "sentGiftUpgraded",
		"methods": [
			{
				"name": "gift",
				"type": "upgradedGift",
				"description": "The gift"
			}
		],
		"description": "Upgraded gift",
		"inheritance": "SentGift",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "receivedGift",
		"methods": [
			{
				"name": "received_gift_id",
				"type": "string",
				"description": "Unique identifier of the received gift for the current user; only for the receiver of the gift"
			},
			{
				"name": "sender_id",
				"type": "MessageSender",
				"description": "Identifier of a user or a chat that sent the gift; may be null if unknown"
			},
			{
				"name": "text",
				"type": "formattedText",
				"description": "Message added to the gift"
			},
			{
				"name": "is_private",
				"type": "Bool",
				"description": "True, if the sender and gift text are shown only to the gift receiver; otherwise, everyone are able to see them"
			},
			{
				"name": "is_saved",
				"type": "Bool",
				"description": "True, if the gift is displayed on the chat's profile page; only for the receiver of the gift"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "True, if the gift is pinned to the top of the chat's profile page"
			},
			{
				"name": "can_be_upgraded",
				"type": "Bool",
				"description": "True, if the gift is a regular gift that can be upgraded to a unique gift; only for the receiver of the gift"
			},
			{
				"name": "can_be_transferred",
				"type": "Bool",
				"description": "True, if the gift is an upgraded gift that can be transferred to another owner; only for the receiver of the gift"
			},
			{
				"name": "was_refunded",
				"type": "Bool",
				"description": "True, if the gift was refunded and isn't available anymore"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the gift was sent"
			},
			{
				"name": "gift",
				"type": "SentGift",
				"description": "The gift"
			},
			{
				"name": "sell_star_count",
				"type": "int53",
				"description": "Number of Telegram Stars that can be claimed by the receiver instead of the regular gift; 0 if the gift can't be sold by the current user"
			},
			{
				"name": "prepaid_upgrade_star_count",
				"type": "int53",
				"description": "Number of Telegram Stars that were paid by the sender for the ability to upgrade the gift"
			},
			{
				"name": "transfer_star_count",
				"type": "int53",
				"description": "Number of Telegram Stars that must be paid to transfer the upgraded gift; only for the receiver of the gift"
			},
			{
				"name": "export_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the upgraded gift can be transferred to the TON blockchain as an NFT; 0 if NFT export isn't possible; only for the receiver of the gift"
			}
		],
		"description": "Represents a gift received by a user or a chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "receivedGifts",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "The total number of received gifts"
			},
			{
				"name": "gifts",
				"type": "vector<receivedGift>",
				"description": "The list of gifts"
			},
			{
				"name": "are_notifications_enabled",
				"type": "Bool",
				"description": "True, if notifications about new gifts of the owner are enabled"
			},
			{
				"name": "next_offset",
				"type": "string",
				"description": "The offset for the next request. If empty, then there are no more results"
			}
		],
		"description": "Represents a list of gifts received by a user or a chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "giftUpgradePreview",
		"methods": [
			{
				"name": "models",
				"type": "vector<upgradedGiftModel>",
				"description": "Examples of possible models that can be chosen for the gift after upgrade"
			},
			{
				"name": "symbols",
				"type": "vector<upgradedGiftSymbol>",
				"description": "Examples of possible symbols that can be chosen for the gift after upgrade"
			},
			{
				"name": "backdrops",
				"type": "vector<upgradedGiftBackdrop>",
				"description": "Examples of possible backdrops that can be chosen for the gift after upgrade"
			}
		],
		"description": "Contains examples of possible upgraded gifts for the given regular gift",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "StarTransactionDirection",
		"methods": null,
		"description": "Describes direction of a transaction with Telegram Stars",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionDirectionIncoming",
		"methods": null,
		"description": "The transaction is incoming and increases the number of owned Telegram Stars",
		"inheritance": "StarTransactionDirection",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionDirectionOutgoing",
		"methods": null,
		"description": "The transaction is outgoing and decreases the number of owned Telegram Stars",
		"inheritance": "StarTransactionDirection",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "StarTransactionType",
		"methods": null,
		"description": "Describes type of transaction with Telegram Stars",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypePremiumBotDeposit",
		"methods": null,
		"description": "The transaction is a deposit of Telegram Stars from the Premium bot; for regular users only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypeAppStoreDeposit",
		"methods": null,
		"description": "The transaction is a deposit of Telegram Stars from App Store; for regular users only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypeGooglePlayDeposit",
		"methods": null,
		"description": "The transaction is a deposit of Telegram Stars from Google Play; for regular users only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypeFragmentDeposit",
		"methods": null,
		"description": "The transaction is a deposit of Telegram Stars from Fragment; for regular users and bots only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypeUserDeposit",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user that gifted Telegram Stars; 0 if the user was anonymous"
			},
			{
				"name": "sticker",
				"type": "sticker",
				"description": "The sticker to be shown in the transaction information; may be null if unknown"
			}
		],
		"description": "The transaction is a deposit of Telegram Stars by another user; for regular users only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypeGiveawayDeposit",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of a supergroup or a channel chat that created the giveaway"
			},
			{
				"name": "giveaway_message_id",
				"type": "int53",
				"description": "Identifier of the message with the giveaway; can be 0 or an identifier of a deleted message"
			}
		],
		"description": "The transaction is a deposit of Telegram Stars from a giveaway; for regular users only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypeFragmentWithdrawal",
		"methods": [
			{
				"name": "withdrawal_state",
				"type": "RevenueWithdrawalState",
				"description": "State of the withdrawal; may be null for refunds from Fragment"
			}
		],
		"description": "The transaction is a withdrawal of earned Telegram Stars to Fragment; for regular users, bots, supergroup and channel chats only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypeTelegramAdsWithdrawal",
		"methods": null,
		"description": "The transaction is a withdrawal of earned Telegram Stars to Telegram Ad platform; for bots and channel chats only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypeTelegramApiUsage",
		"methods": [
			{
				"name": "request_count",
				"type": "int32",
				"description": "The number of billed requests"
			}
		],
		"description": "The transaction is a payment for Telegram API usage; for bots only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypeBotPaidMediaPurchase",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the bot or the business account user that sent the paid media"
			},
			{
				"name": "media",
				"type": "vector<PaidMedia>",
				"description": "The bought media if the transaction wasn't refunded"
			}
		],
		"description": "The transaction is a purchase of paid media from a bot or a business account by the current user; for regular users only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypeBotPaidMediaSale",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user that bought the media"
			},
			{
				"name": "media",
				"type": "vector<PaidMedia>",
				"description": "The bought media"
			},
			{
				"name": "payload",
				"type": "string",
				"description": "Bot-provided payload"
			},
			{
				"name": "affiliate",
				"type": "affiliateInfo",
				"description": "Information about the affiliate which received commission from the transaction; may be null if none"
			}
		],
		"description": "The transaction is a sale of paid media by the bot or a business account managed by the bot; for bots only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypeChannelPaidMediaPurchase",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the channel chat that sent the paid media"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the corresponding message with paid media; can be 0 or an identifier of a deleted message"
			},
			{
				"name": "media",
				"type": "vector<PaidMedia>",
				"description": "The bought media if the transaction wasn't refunded"
			}
		],
		"description": "The transaction is a purchase of paid media from a channel by the current user; for regular users only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypeChannelPaidMediaSale",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user that bought the media"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the corresponding message with paid media; can be 0 or an identifier of a deleted message"
			},
			{
				"name": "media",
				"type": "vector<PaidMedia>",
				"description": "The bought media"
			}
		],
		"description": "The transaction is a sale of paid media by the channel chat; for channel chats only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypeBotInvoicePurchase",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the bot or the business account user that created the invoice"
			},
			{
				"name": "product_info",
				"type": "productInfo",
				"description": "Information about the bought product"
			}
		],
		"description": "The transaction is a purchase of a product from a bot or a business account by the current user; for regular users only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypeBotInvoiceSale",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user that bought the product"
			},
			{
				"name": "product_info",
				"type": "productInfo",
				"description": "Information about the bought product"
			},
			{
				"name": "invoice_payload",
				"type": "bytes",
				"description": "Invoice payload"
			},
			{
				"name": "affiliate",
				"type": "affiliateInfo",
				"description": "Information about the affiliate which received commission from the transaction; may be null if none"
			}
		],
		"description": "The transaction is a sale of a product by the bot; for bots only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypeBotSubscriptionPurchase",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the bot or the business account user that created the subscription link"
			},
			{
				"name": "subscription_period",
				"type": "int32",
				"description": "The number of seconds between consecutive Telegram Star debitings"
			},
			{
				"name": "product_info",
				"type": "productInfo",
				"description": "Information about the bought subscription"
			}
		],
		"description": "The transaction is a purchase of a subscription from a bot or a business account by the current user; for regular users only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypeBotSubscriptionSale",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user that bought the subscription"
			},
			{
				"name": "subscription_period",
				"type": "int32",
				"description": "The number of seconds between consecutive Telegram Star debitings"
			},
			{
				"name": "product_info",
				"type": "productInfo",
				"description": "Information about the bought subscription"
			},
			{
				"name": "invoice_payload",
				"type": "bytes",
				"description": "Invoice payload"
			},
			{
				"name": "affiliate",
				"type": "affiliateInfo",
				"description": "Information about the affiliate which received commission from the transaction; may be null if none"
			}
		],
		"description": "The transaction is a sale of a subscription by the bot; for bots only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypeChannelSubscriptionPurchase",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the channel chat that created the subscription"
			},
			{
				"name": "subscription_period",
				"type": "int32",
				"description": "The number of seconds between consecutive Telegram Star debitings"
			}
		],
		"description": "The transaction is a purchase of a subscription to a channel chat by the current user; for regular users only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypeChannelSubscriptionSale",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user that bought the subscription"
			},
			{
				"name": "subscription_period",
				"type": "int32",
				"description": "The number of seconds between consecutive Telegram Star debitings"
			}
		],
		"description": "The transaction is a sale of a subscription by the channel chat; for channel chats only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypeGiftPurchase",
		"methods": [
			{
				"name": "owner_id",
				"type": "MessageSender",
				"description": "Identifier of the user or the channel that received the gift"
			},
			{
				"name": "gift",
				"type": "gift",
				"description": "The gift"
			}
		],
		"description": "The transaction is a purchase of a regular gift; for regular users and bots only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypeGiftTransfer",
		"methods": [
			{
				"name": "owner_id",
				"type": "MessageSender",
				"description": "Identifier of the user or the channel that received the gift"
			},
			{
				"name": "gift",
				"type": "upgradedGift",
				"description": "The gift"
			}
		],
		"description": "The transaction is a transfer of an upgraded gift; for regular users only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypeGiftSale",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user that sent the gift"
			},
			{
				"name": "gift",
				"type": "gift",
				"description": "The gift"
			}
		],
		"description": "The transaction is a sale of a received gift; for regular users and channel chats only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypeGiftUpgrade",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user that initially sent the gift"
			},
			{
				"name": "gift",
				"type": "upgradedGift",
				"description": "The upgraded gift"
			}
		],
		"description": "The transaction is an upgrade of a gift; for regular users only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypeChannelPaidReactionSend",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the channel chat"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the reacted message; can be 0 or an identifier of a deleted message"
			}
		],
		"description": "The transaction is a sending of a paid reaction to a message in a channel chat by the current user; for regular users only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypeChannelPaidReactionReceive",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user that added the paid reaction"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the reacted message; can be 0 or an identifier of a deleted message"
			}
		],
		"description": "The transaction is a receiving of a paid reaction to a message by the channel chat; for channel chats only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypeAffiliateProgramCommission",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat that created the affiliate program"
			},
			{
				"name": "commission_per_mille",
				"type": "int32",
				"description": "The number of Telegram Stars received by the affiliate for each 1000 Telegram Stars received by the program owner"
			}
		],
		"description": "The transaction is a receiving of a commission from an affiliate program; for regular users, bots and channel chats only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypePaidMessageSend",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat that received the payment"
			},
			{
				"name": "message_count",
				"type": "int32",
				"description": "Number of sent paid messages"
			}
		],
		"description": "The transaction is a sending of a paid message; for regular users only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypePaidMessageReceive",
		"methods": [
			{
				"name": "sender_id",
				"type": "MessageSender",
				"description": "Identifier of the sender of the message"
			},
			{
				"name": "message_count",
				"type": "int32",
				"description": "Number of received paid messages"
			},
			{
				"name": "commission_per_mille",
				"type": "int32",
				"description": "The number of Telegram Stars received by the Telegram for each 1000 Telegram Stars paid for message sending"
			},
			{
				"name": "commission_star_amount",
				"type": "starAmount",
				"description": "The amount of Telegram Stars that were received by Telegram; can be negative for refunds"
			}
		],
		"description": "The transaction is a receiving of a paid message; for regular users and supergroup chats only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypePremiumPurchase",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user that received the Telegram Premium subscription"
			},
			{
				"name": "month_count",
				"type": "int32",
				"description": "Number of months the Telegram Premium subscription will be active"
			},
			{
				"name": "sticker",
				"type": "sticker",
				"description": "A sticker to be shown in the transaction information; may be null if unknown"
			}
		],
		"description": "The transaction is a purchase of Telegram Premium subscription; for regular users only",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactionTypeUnsupported",
		"methods": null,
		"description": "The transaction is a transaction of an unsupported type",
		"inheritance": "StarTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransaction",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the transaction"
			},
			{
				"name": "star_amount",
				"type": "starAmount",
				"description": "The amount of added owned Telegram Stars; negative for outgoing transactions"
			},
			{
				"name": "is_refund",
				"type": "Bool",
				"description": "True, if the transaction is a refund of a previous transaction"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the transaction was completed"
			},
			{
				"name": "type",
				"type": "StarTransactionType",
				"description": "Type of the transaction"
			}
		],
		"description": "Represents a transaction changing the amount of owned Telegram Stars",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starTransactions",
		"methods": [
			{
				"name": "star_amount",
				"type": "starAmount",
				"description": "The amount of owned Telegram Stars"
			},
			{
				"name": "transactions",
				"type": "vector<starTransaction>",
				"description": "List of transactions with Telegram Stars"
			},
			{
				"name": "next_offset",
				"type": "string",
				"description": "The offset for the next request. If empty, then there are no more results"
			}
		],
		"description": "Represents a list of Telegram Star transactions",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "GiveawayParticipantStatus",
		"methods": null,
		"description": "Contains information about status of a user in a giveaway",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "giveawayParticipantStatusEligible",
		"methods": null,
		"description": "The user is eligible for the giveaway",
		"inheritance": "GiveawayParticipantStatus",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "giveawayParticipantStatusParticipating",
		"methods": null,
		"description": "The user participates in the giveaway",
		"inheritance": "GiveawayParticipantStatus",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "giveawayParticipantStatusAlreadyWasMember",
		"methods": [
			{
				"name": "joined_chat_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the user joined the chat"
			}
		],
		"description": "The user can't participate in the giveaway, because they have already been member of the chat",
		"inheritance": "GiveawayParticipantStatus",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "giveawayParticipantStatusAdministrator",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat administered by the user"
			}
		],
		"description": "The user can't participate in the giveaway, because they are an administrator in one of the chats that created the giveaway",
		"inheritance": "GiveawayParticipantStatus",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "giveawayParticipantStatusDisallowedCountry",
		"methods": [
			{
				"name": "user_country_code",
				"type": "string",
				"description": "A two-letter ISO 3166-1 alpha-2 country code of the user's country"
			}
		],
		"description": "The user can't participate in the giveaway, because they phone number is from a disallowed country",
		"inheritance": "GiveawayParticipantStatus",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "GiveawayInfo",
		"methods": null,
		"description": "Contains information about a giveaway",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "giveawayInfoOngoing",
		"methods": [
			{
				"name": "creation_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the giveaway was created"
			},
			{
				"name": "status",
				"type": "GiveawayParticipantStatus",
				"description": "Status of the current user in the giveaway"
			},
			{
				"name": "is_ended",
				"type": "Bool",
				"description": "True, if the giveaway has ended and results are being prepared"
			}
		],
		"description": "Describes an ongoing giveaway",
		"inheritance": "GiveawayInfo",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "giveawayInfoCompleted",
		"methods": [
			{
				"name": "creation_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the giveaway was created"
			},
			{
				"name": "actual_winners_selection_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the winners were selected. May be bigger than winners selection date specified in parameters of the giveaway"
			},
			{
				"name": "was_refunded",
				"type": "Bool",
				"description": "True, if the giveaway was canceled and was fully refunded"
			},
			{
				"name": "is_winner",
				"type": "Bool",
				"description": "True, if the current user is a winner of the giveaway"
			},
			{
				"name": "winner_count",
				"type": "int32",
				"description": "Number of winners in the giveaway"
			},
			{
				"name": "activation_count",
				"type": "int32",
				"description": "Number of winners, which activated their gift codes; for Telegram Premium giveaways only"
			},
			{
				"name": "gift_code",
				"type": "string",
				"description": "Telegram Premium gift code that was received by the current user; empty if the user isn't a winner in the giveaway or the giveaway isn't a Telegram Premium giveaway"
			},
			{
				"name": "won_star_count",
				"type": "int53",
				"description": "The amount of Telegram Stars won by the current user; 0 if the user isn't a winner in the giveaway or the giveaway isn't a Telegram Star giveaway"
			}
		],
		"description": "Describes a completed giveaway",
		"inheritance": "GiveawayInfo",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "GiveawayPrize",
		"methods": null,
		"description": "Contains information about a giveaway prize",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "giveawayPrizePremium",
		"methods": [
			{
				"name": "month_count",
				"type": "int32",
				"description": "Number of months the Telegram Premium subscription will be active after code activation"
			}
		],
		"description": "The giveaway sends Telegram Premium subscriptions to the winners",
		"inheritance": "GiveawayPrize",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "giveawayPrizeStars",
		"methods": [
			{
				"name": "star_count",
				"type": "int53",
				"description": "Number of Telegram Stars that will be shared by all winners"
			}
		],
		"description": "The giveaway sends Telegram Stars to the winners",
		"inheritance": "GiveawayPrize",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "accentColor",
		"methods": [
			{
				"name": "id",
				"type": "int32",
				"description": "Accent color identifier"
			},
			{
				"name": "built_in_accent_color_id",
				"type": "int32",
				"description": "Identifier of a built-in color to use in places, where only one color is needed; 0-6"
			},
			{
				"name": "light_theme_colors",
				"type": "vector<int32>",
				"description": "The list of 1-3 colors in RGB format, describing the accent color, as expected to be shown in light themes"
			},
			{
				"name": "dark_theme_colors",
				"type": "vector<int32>",
				"description": "The list of 1-3 colors in RGB format, describing the accent color, as expected to be shown in dark themes"
			},
			{
				"name": "min_channel_chat_boost_level",
				"type": "int32",
				"description": "The minimum chat boost level required to use the color in a channel chat"
			}
		],
		"description": "Contains information about supported accent color for user/chat name, background of empty chat photo, replies to messages and link previews",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "profileAccentColors",
		"methods": [
			{
				"name": "palette_colors",
				"type": "vector<int32>",
				"description": "The list of 1-2 colors in RGB format, describing the colors, as expected to be shown in the color palette settings"
			},
			{
				"name": "background_colors",
				"type": "vector<int32>",
				"description": "The list of 1-2 colors in RGB format, describing the colors, as expected to be used for the profile photo background"
			},
			{
				"name": "story_colors",
				"type": "vector<int32>",
				"description": "The list of 2 colors in RGB format, describing the colors of the gradient to be used for the unread active story indicator around profile photo"
			}
		],
		"description": "Contains information about supported accent colors for user profile photo background in RGB format",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "profileAccentColor",
		"methods": [
			{
				"name": "id",
				"type": "int32",
				"description": "Profile accent color identifier"
			},
			{
				"name": "light_theme_colors",
				"type": "profileAccentColors",
				"description": "Accent colors expected to be used in light themes"
			},
			{
				"name": "dark_theme_colors",
				"type": "profileAccentColors",
				"description": "Accent colors expected to be used in dark themes"
			},
			{
				"name": "min_supergroup_chat_boost_level",
				"type": "int32",
				"description": "The minimum chat boost level required to use the color in a supergroup chat"
			},
			{
				"name": "min_channel_chat_boost_level",
				"type": "int32",
				"description": "The minimum chat boost level required to use the color in a channel chat"
			}
		],
		"description": "Contains information about supported accent color for user profile photo background",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "EmojiStatusType",
		"methods": null,
		"description": "Describes type of emoji status",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "emojiStatusTypeCustomEmoji",
		"methods": [
			{
				"name": "custom_emoji_id",
				"type": "int64",
				"description": "Identifier of the custom emoji in stickerFormatTgs format"
			}
		],
		"description": "A custom emoji set as emoji status",
		"inheritance": "EmojiStatusType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "emojiStatusTypeUpgradedGift",
		"methods": [
			{
				"name": "upgraded_gift_id",
				"type": "int64",
				"description": "Identifier of the upgraded gift"
			},
			{
				"name": "gift_title",
				"type": "string",
				"description": "The title of the upgraded gift"
			},
			{
				"name": "gift_name",
				"type": "string",
				"description": "Unique name of the upgraded gift that can be used with internalLinkTypeUpgradedGift"
			},
			{
				"name": "model_custom_emoji_id",
				"type": "int64",
				"description": "Custom emoji identifier of the model of the upgraded gift"
			},
			{
				"name": "symbol_custom_emoji_id",
				"type": "int64",
				"description": "Custom emoji identifier of the symbol of the upgraded gift"
			},
			{
				"name": "backdrop_colors",
				"type": "upgradedGiftBackdropColors",
				"description": "Colors of the backdrop of the upgraded gift"
			}
		],
		"description": "An upgraded gift set as emoji status",
		"inheritance": "EmojiStatusType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "emojiStatus",
		"methods": [
			{
				"name": "type",
				"type": "EmojiStatusType",
				"description": "Type of the emoji status"
			},
			{
				"name": "expiration_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the status will expire; 0 if never"
			}
		],
		"description": "Describes an emoji to be shown instead of the Telegram Premium badge",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "emojiStatuses",
		"methods": [
			{
				"name": "emoji_statuses",
				"type": "vector<emojiStatus>",
				"description": "The list of emoji statuses identifiers"
			}
		],
		"description": "Contains a list of emoji statuses",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "emojiStatusCustomEmojis",
		"methods": [
			{
				"name": "custom_emoji_ids",
				"type": "vector<int64>",
				"description": "The list of custom emoji identifiers"
			}
		],
		"description": "Contains a list of custom emoji identifiers for emoji statuses",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "usernames",
		"methods": [
			{
				"name": "active_usernames",
				"type": "vector<string>",
				"description": "List of active usernames; the first one must be shown as the primary username. The order of active usernames can be changed with reorderActiveUsernames, reorderBotActiveUsernames or reorderSupergroupActiveUsernames"
			},
			{
				"name": "disabled_usernames",
				"type": "vector<string>",
				"description": "List of currently disabled usernames; the username can be activated with toggleUsernameIsActive, toggleBotUsernameIsActive, or toggleSupergroupUsernameIsActive"
			},
			{
				"name": "editable_username",
				"type": "string",
				"description": "The active username, which can be changed with setUsername or setSupergroupUsername. Information about other active usernames can be received using getCollectibleItemInfo"
			}
		],
		"description": "Describes usernames assigned to a user, a supergroup, or a channel",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "user",
		"methods": [
			{
				"name": "id",
				"type": "int53",
				"description": "User identifier"
			},
			{
				"name": "first_name",
				"type": "string",
				"description": "First name of the user"
			},
			{
				"name": "last_name",
				"type": "string",
				"description": "Last name of the user"
			},
			{
				"name": "usernames",
				"type": "usernames",
				"description": "Usernames of the user; may be null"
			},
			{
				"name": "phone_number",
				"type": "string",
				"description": "Phone number of the user"
			},
			{
				"name": "status",
				"type": "UserStatus",
				"description": "Current online status of the user"
			},
			{
				"name": "profile_photo",
				"type": "profilePhoto",
				"description": "Profile photo of the user; may be null"
			},
			{
				"name": "accent_color_id",
				"type": "int32",
				"description": "Identifier of the accent color for name, and backgrounds of profile photo, reply header, and link preview"
			},
			{
				"name": "background_custom_emoji_id",
				"type": "int64",
				"description": "Identifier of a custom emoji to be shown on the reply header and link preview background; 0 if none"
			},
			{
				"name": "profile_accent_color_id",
				"type": "int32",
				"description": "Identifier of the accent color for the user's profile; -1 if none"
			},
			{
				"name": "profile_background_custom_emoji_id",
				"type": "int64",
				"description": "Identifier of a custom emoji to be shown on the background of the user's profile; 0 if none"
			},
			{
				"name": "emoji_status",
				"type": "emojiStatus",
				"description": "Emoji status to be shown instead of the default Telegram Premium badge; may be null"
			},
			{
				"name": "is_contact",
				"type": "Bool",
				"description": "The user is a contact of the current user"
			},
			{
				"name": "is_mutual_contact",
				"type": "Bool",
				"description": "The user is a contact of the current user and the current user is a contact of the user"
			},
			{
				"name": "is_close_friend",
				"type": "Bool",
				"description": "The user is a close friend of the current user; implies that the user is a contact"
			},
			{
				"name": "verification_status",
				"type": "verificationStatus",
				"description": "Information about verification status of the user; may be null if none"
			},
			{
				"name": "is_premium",
				"type": "Bool",
				"description": "True, if the user is a Telegram Premium user"
			},
			{
				"name": "is_support",
				"type": "Bool",
				"description": "True, if the user is Telegram support account"
			},
			{
				"name": "restriction_reason",
				"type": "string",
				"description": "If non-empty, it contains a human-readable description of the reason why access to this user must be restricted"
			},
			{
				"name": "has_active_stories",
				"type": "Bool",
				"description": "True, if the user has non-expired stories available to the current user"
			},
			{
				"name": "has_unread_active_stories",
				"type": "Bool",
				"description": "True, if the user has unread non-expired stories available to the current user"
			},
			{
				"name": "restricts_new_chats",
				"type": "Bool",
				"description": "True, if the user may restrict new chats with non-contacts. Use canSendMessageToUser to check whether the current user can message the user or try to create a chat with them"
			},
			{
				"name": "paid_message_star_count",
				"type": "int53",
				"description": "Number of Telegram Stars that must be paid by general user for each sent message to the user. If positive and userFullInfo is unknown, use canSendMessageToUser to check whether the current user must pay"
			},
			{
				"name": "have_access",
				"type": "Bool",
				"description": "If false, the user is inaccessible, and the only information known about the user is inside this class. Identifier of the user can't be passed to any method"
			},
			{
				"name": "type",
				"type": "UserType",
				"description": "Type of the user"
			},
			{
				"name": "language_code",
				"type": "string",
				"description": "IETF language tag of the user's language; only available to bots"
			},
			{
				"name": "added_to_attachment_menu",
				"type": "Bool",
				"description": "True, if the user added the current bot to attachment menu; only available to bots"
			}
		],
		"description": "Represents a user",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "botInfo",
		"methods": [
			{
				"name": "short_description",
				"type": "string",
				"description": "The text that is shown on the bot's profile page and is sent together with the link when users share the bot"
			},
			{
				"name": "description",
				"type": "string",
				"description": "The text shown in the chat with the bot if the chat is empty"
			},
			{
				"name": "photo",
				"type": "photo",
				"description": "Photo shown in the chat with the bot if the chat is empty; may be null"
			},
			{
				"name": "animation",
				"type": "animation",
				"description": "Animation shown in the chat with the bot if the chat is empty; may be null"
			},
			{
				"name": "menu_button",
				"type": "botMenuButton",
				"description": "Information about a button to show instead of the bot commands menu button; may be null if ordinary bot commands menu must be shown"
			},
			{
				"name": "commands",
				"type": "vector<botCommand>",
				"description": "List of the bot commands"
			},
			{
				"name": "privacy_policy_url",
				"type": "string",
				"description": "The HTTP link to the privacy policy of the bot. If empty, then /privacy command must be used if supported by the bot. If the command isn't supported, then https://telegram.org/privacy-tpa must be opened"
			},
			{
				"name": "default_group_administrator_rights",
				"type": "chatAdministratorRights",
				"description": "Default administrator rights for adding the bot to basic group and supergroup chats; may be null"
			},
			{
				"name": "default_channel_administrator_rights",
				"type": "chatAdministratorRights",
				"description": "Default administrator rights for adding the bot to channels; may be null"
			},
			{
				"name": "affiliate_program",
				"type": "affiliateProgramInfo",
				"description": "Information about the affiliate program of the bot; may be null if none"
			},
			{
				"name": "web_app_background_light_color",
				"type": "int32",
				"description": "Default light background color for bot Web Apps; -1 if not specified"
			},
			{
				"name": "web_app_background_dark_color",
				"type": "int32",
				"description": "Default dark background color for bot Web Apps; -1 if not specified"
			},
			{
				"name": "web_app_header_light_color",
				"type": "int32",
				"description": "Default light header color for bot Web Apps; -1 if not specified"
			},
			{
				"name": "web_app_header_dark_color",
				"type": "int32",
				"description": "Default dark header color for bot Web Apps; -1 if not specified"
			},
			{
				"name": "verification_parameters",
				"type": "botVerificationParameters",
				"description": "Parameters of the verification that can be provided by the bot; may be null if none or the current user isn't the owner of the bot"
			},
			{
				"name": "can_get_revenue_statistics",
				"type": "Bool",
				"description": "True, if the bot's revenue statistics are available to the current user"
			},
			{
				"name": "can_manage_emoji_status",
				"type": "Bool",
				"description": "True, if the bot can manage emoji status of the current user"
			},
			{
				"name": "has_media_previews",
				"type": "Bool",
				"description": "True, if the bot has media previews"
			},
			{
				"name": "edit_commands_link",
				"type": "InternalLinkType",
				"description": "The internal link, which can be used to edit bot commands; may be null"
			},
			{
				"name": "edit_description_link",
				"type": "InternalLinkType",
				"description": "The internal link, which can be used to edit bot description; may be null"
			},
			{
				"name": "edit_description_media_link",
				"type": "InternalLinkType",
				"description": "The internal link, which can be used to edit the photo or animation shown in the chat with the bot if the chat is empty; may be null"
			},
			{
				"name": "edit_settings_link",
				"type": "InternalLinkType",
				"description": "The internal link, which can be used to edit bot settings; may be null"
			}
		],
		"description": "Contains information about a bot",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userFullInfo",
		"methods": [
			{
				"name": "personal_photo",
				"type": "chatPhoto",
				"description": "User profile photo set by the current user for the contact; may be null. If null and user.profile_photo is null, then the photo is empty; otherwise, it is unknown. If non-null, then it is the same photo as in user.profile_photo and chat.photo. This photo isn't returned in the list of user photos"
			},
			{
				"name": "photo",
				"type": "chatPhoto",
				"description": "User profile photo; may be null. If null and user.profile_photo is null, then the photo is empty; otherwise, it is unknown. If non-null and personal_photo is null, then it is the same photo as in user.profile_photo and chat.photo"
			},
			{
				"name": "public_photo",
				"type": "chatPhoto",
				"description": "User profile photo visible if the main photo is hidden by privacy settings; may be null. If null and user.profile_photo is null, then the photo is empty; otherwise, it is unknown. If non-null and both photo and personal_photo are null, then it is the same photo as in user.profile_photo and chat.photo. This photo isn't returned in the list of user photos"
			},
			{
				"name": "block_list",
				"type": "BlockList",
				"description": "Block list to which the user is added; may be null if none"
			},
			{
				"name": "can_be_called",
				"type": "Bool",
				"description": "True, if the user can be called"
			},
			{
				"name": "supports_video_calls",
				"type": "Bool",
				"description": "True, if a video call can be created with the user"
			},
			{
				"name": "has_private_calls",
				"type": "Bool",
				"description": "True, if the user can't be called due to their privacy settings"
			},
			{
				"name": "has_private_forwards",
				"type": "Bool",
				"description": "True, if the user can't be linked in forwarded messages due to their privacy settings"
			},
			{
				"name": "has_restricted_voice_and_video_note_messages",
				"type": "Bool",
				"description": "True, if voice and video notes can't be sent or forwarded to the user"
			},
			{
				"name": "has_posted_to_profile_stories",
				"type": "Bool",
				"description": "True, if the user has posted to profile stories"
			},
			{
				"name": "has_sponsored_messages_enabled",
				"type": "Bool",
				"description": "True, if the user always enabled sponsored messages; known only for the current user"
			},
			{
				"name": "need_phone_number_privacy_exception",
				"type": "Bool",
				"description": "True, if the current user needs to explicitly allow to share their phone number with the user when the method addContact is used"
			},
			{
				"name": "set_chat_background",
				"type": "Bool",
				"description": "True, if the user set chat background for both chat users and it wasn't reverted yet"
			},
			{
				"name": "bio",
				"type": "formattedText",
				"description": "A short user bio; may be null for bots"
			},
			{
				"name": "birthdate",
				"type": "birthdate",
				"description": "Birthdate of the user; may be null if unknown"
			},
			{
				"name": "personal_chat_id",
				"type": "int53",
				"description": "Identifier of the personal chat of the user; 0 if none"
			},
			{
				"name": "gift_count",
				"type": "int32",
				"description": "Number of saved to profile gifts for other users or the total number of received gifts for the current user"
			},
			{
				"name": "group_in_common_count",
				"type": "int32",
				"description": "Number of group chats where both the other user and the current user are a member; 0 for the current user"
			},
			{
				"name": "incoming_paid_message_star_count",
				"type": "int53",
				"description": "Number of Telegram Stars that must be paid by the user for each sent message to the current user"
			},
			{
				"name": "outgoing_paid_message_star_count",
				"type": "int53",
				"description": "Number of Telegram Stars that must be paid by the current user for each sent message to the user"
			},
			{
				"name": "bot_verification",
				"type": "botVerification",
				"description": "Information about verification status of the user provided by a bot; may be null if none or unknown"
			},
			{
				"name": "business_info",
				"type": "businessInfo",
				"description": "Information about business settings for Telegram Business accounts; may be null if none"
			},
			{
				"name": "bot_info",
				"type": "botInfo",
				"description": "For bots, information about the bot; may be null if the user isn't a bot"
			}
		],
		"description": "Contains full information about a user",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "users",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "Approximate total number of users found"
			},
			{
				"name": "user_ids",
				"type": "vector<int53>",
				"description": "A list of user identifiers"
			}
		],
		"description": "Represents a list of users",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "foundUsers",
		"methods": [
			{
				"name": "user_ids",
				"type": "vector<int53>",
				"description": "Identifiers of the found users"
			},
			{
				"name": "next_offset",
				"type": "string",
				"description": "The offset for the next request. If empty, then there are no more results"
			}
		],
		"description": "Represents a list of found users",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatAdministrator",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier of the administrator"
			},
			{
				"name": "custom_title",
				"type": "string",
				"description": "Custom title of the administrator"
			},
			{
				"name": "is_owner",
				"type": "Bool",
				"description": "True, if the user is the owner of the chat"
			}
		],
		"description": "Contains information about a chat administrator",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatAdministrators",
		"methods": [
			{
				"name": "administrators",
				"type": "vector<chatAdministrator>",
				"description": "A list of chat administrators"
			}
		],
		"description": "Represents a list of chat administrators",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ChatMemberStatus",
		"methods": null,
		"description": "Provides information about the status of a member in a chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatMemberStatusCreator",
		"methods": [
			{
				"name": "custom_title",
				"type": "string",
				"description": "A custom title of the owner; 0-16 characters without emoji; applicable to supergroups only"
			},
			{
				"name": "is_anonymous",
				"type": "Bool",
				"description": "True, if the creator isn't shown in the chat member list and sends messages anonymously; applicable to supergroups only"
			},
			{
				"name": "is_member",
				"type": "Bool",
				"description": "True, if the user is a member of the chat"
			}
		],
		"description": "The user is the owner of the chat and has all the administrator privileges",
		"inheritance": "ChatMemberStatus",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatMemberStatusAdministrator",
		"methods": [
			{
				"name": "custom_title",
				"type": "string",
				"description": "A custom title of the administrator; 0-16 characters without emoji; applicable to supergroups only"
			},
			{
				"name": "can_be_edited",
				"type": "Bool",
				"description": "True, if the current user can edit the administrator privileges for the called user"
			},
			{
				"name": "rights",
				"type": "chatAdministratorRights",
				"description": "Rights of the administrator"
			}
		],
		"description": "The user is a member of the chat and has some additional privileges. In basic groups, administrators can edit and delete messages sent by others, add new members, ban unprivileged members, and manage video chats. In supergroups and channels, there are more detailed options for administrator privileges",
		"inheritance": "ChatMemberStatus",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatMemberStatusMember",
		"methods": [
			{
				"name": "member_until_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the user will be removed from the chat because of the expired subscription; 0 if never. Ignored in setChatMemberStatus"
			}
		],
		"description": "The user is a member of the chat, without any additional privileges or restrictions",
		"inheritance": "ChatMemberStatus",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatMemberStatusRestricted",
		"methods": [
			{
				"name": "is_member",
				"type": "Bool",
				"description": "True, if the user is a member of the chat"
			},
			{
				"name": "restricted_until_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when restrictions will be lifted from the user; 0 if never. If the user is restricted for more than 366 days or for less than 30 seconds from the current time, the user is considered to be restricted forever"
			},
			{
				"name": "permissions",
				"type": "chatPermissions",
				"description": "User permissions in the chat"
			}
		],
		"description": "The user is under certain restrictions in the chat. Not supported in basic groups and channels",
		"inheritance": "ChatMemberStatus",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatMemberStatusLeft",
		"methods": null,
		"description": "The user or the chat is not a chat member",
		"inheritance": "ChatMemberStatus",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatMemberStatusBanned",
		"methods": [
			{
				"name": "banned_until_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the user will be unbanned; 0 if never. If the user is banned for more than 366 days or for less than 30 seconds from the current time, the user is considered to be banned forever. Always 0 in basic groups"
			}
		],
		"description": "The user or the chat was banned (and hence is not a member of the chat). Implies the user can't return to the chat, view messages, or be used as a participant identifier to join a video chat of the chat",
		"inheritance": "ChatMemberStatus",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatMember",
		"methods": [
			{
				"name": "member_id",
				"type": "MessageSender",
				"description": "Identifier of the chat member. Currently, other chats can be only Left or Banned. Only supergroups and channels can have other chats as Left or Banned members and these chats must be supergroups or channels"
			},
			{
				"name": "inviter_user_id",
				"type": "int53",
				"description": "Identifier of a user that invited/promoted/banned this member in the chat; 0 if unknown"
			},
			{
				"name": "joined_chat_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the user joined/was promoted/was banned in the chat"
			},
			{
				"name": "status",
				"type": "ChatMemberStatus",
				"description": "Status of the member in the chat"
			}
		],
		"description": "Describes a user or a chat as a member of another chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatMembers",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "Approximate total number of chat members found"
			},
			{
				"name": "members",
				"type": "vector<chatMember>",
				"description": "A list of chat members"
			}
		],
		"description": "Contains a list of chat members",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ChatMembersFilter",
		"methods": null,
		"description": "Specifies the kind of chat members to return in searchChatMembers",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatMembersFilterContacts",
		"methods": null,
		"description": "Returns contacts of the user",
		"inheritance": "ChatMembersFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatMembersFilterAdministrators",
		"methods": null,
		"description": "Returns the owner and administrators",
		"inheritance": "ChatMembersFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatMembersFilterMembers",
		"methods": null,
		"description": "Returns all chat members, including restricted chat members",
		"inheritance": "ChatMembersFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatMembersFilterMention",
		"methods": [
			{
				"name": "message_thread_id",
				"type": "int53",
				"description": "If non-zero, the identifier of the current message thread"
			}
		],
		"description": "Returns users which can be mentioned in the chat",
		"inheritance": "ChatMembersFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatMembersFilterRestricted",
		"methods": null,
		"description": "Returns users under certain restrictions in the chat; can be used only by administrators in a supergroup",
		"inheritance": "ChatMembersFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatMembersFilterBanned",
		"methods": null,
		"description": "Returns users banned from the chat; can be used only by administrators in a supergroup or in a channel",
		"inheritance": "ChatMembersFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatMembersFilterBots",
		"methods": null,
		"description": "Returns bot members of the chat",
		"inheritance": "ChatMembersFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "SupergroupMembersFilter",
		"methods": null,
		"description": "Specifies the kind of chat members to return in getSupergroupMembers",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "supergroupMembersFilterRecent",
		"methods": null,
		"description": "Returns recently active users in reverse chronological order",
		"inheritance": "SupergroupMembersFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "supergroupMembersFilterContacts",
		"methods": [
			{
				"name": "query",
				"type": "string",
				"description": "Query to search for"
			}
		],
		"description": "Returns contacts of the user, which are members of the supergroup or channel",
		"inheritance": "SupergroupMembersFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "supergroupMembersFilterAdministrators",
		"methods": null,
		"description": "Returns the owner and administrators",
		"inheritance": "SupergroupMembersFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "supergroupMembersFilterSearch",
		"methods": [
			{
				"name": "query",
				"type": "string",
				"description": "Query to search for"
			}
		],
		"description": "Used to search for supergroup or channel members via a (string) query",
		"inheritance": "SupergroupMembersFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "supergroupMembersFilterRestricted",
		"methods": [
			{
				"name": "query",
				"type": "string",
				"description": "Query to search for"
			}
		],
		"description": "Returns restricted supergroup members; can be used only by administrators",
		"inheritance": "SupergroupMembersFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "supergroupMembersFilterBanned",
		"methods": [
			{
				"name": "query",
				"type": "string",
				"description": "Query to search for"
			}
		],
		"description": "Returns users banned from the supergroup or channel; can be used only by administrators",
		"inheritance": "SupergroupMembersFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "supergroupMembersFilterMention",
		"methods": [
			{
				"name": "query",
				"type": "string",
				"description": "Query to search for"
			},
			{
				"name": "message_thread_id",
				"type": "int53",
				"description": "If non-zero, the identifier of the current message thread"
			}
		],
		"description": "Returns users which can be mentioned in the supergroup",
		"inheritance": "SupergroupMembersFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "supergroupMembersFilterBots",
		"methods": null,
		"description": "Returns bot members of the supergroup or channel",
		"inheritance": "SupergroupMembersFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatInviteLink",
		"methods": [
			{
				"name": "invite_link",
				"type": "string",
				"description": "Chat invite link"
			},
			{
				"name": "name",
				"type": "string",
				"description": "Name of the link"
			},
			{
				"name": "creator_user_id",
				"type": "int53",
				"description": "User identifier of an administrator created the link"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the link was created"
			},
			{
				"name": "edit_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the link was last edited; 0 if never or unknown"
			},
			{
				"name": "expiration_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the link will expire; 0 if never"
			},
			{
				"name": "subscription_pricing",
				"type": "starSubscriptionPricing",
				"description": "Information about subscription plan that is applied to the users joining the chat by the link; may be null if the link doesn't require subscription"
			},
			{
				"name": "member_limit",
				"type": "int32",
				"description": "The maximum number of members, which can join the chat using the link simultaneously; 0 if not limited. Always 0 if the link requires approval"
			},
			{
				"name": "member_count",
				"type": "int32",
				"description": "Number of chat members, which joined the chat using the link"
			},
			{
				"name": "expired_member_count",
				"type": "int32",
				"description": "Number of chat members, which joined the chat using the link, but have already left because of expired subscription; for subscription links only"
			},
			{
				"name": "pending_join_request_count",
				"type": "int32",
				"description": "Number of pending join requests created using this link"
			},
			{
				"name": "creates_join_request",
				"type": "Bool",
				"description": "True, if the link only creates join request. If true, total number of joining members will be unlimited"
			},
			{
				"name": "is_primary",
				"type": "Bool",
				"description": "True, if the link is primary. Primary invite link can't have name, expiration date, or usage limit. There is exactly one primary invite link for each administrator with can_invite_users right at a given time"
			},
			{
				"name": "is_revoked",
				"type": "Bool",
				"description": "True, if the link was revoked"
			}
		],
		"description": "Contains a chat invite link",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatInviteLinks",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "Approximate total number of chat invite links found"
			},
			{
				"name": "invite_links",
				"type": "vector<chatInviteLink>",
				"description": "List of invite links"
			}
		],
		"description": "Contains a list of chat invite links",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatInviteLinkCount",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Administrator's user identifier"
			},
			{
				"name": "invite_link_count",
				"type": "int32",
				"description": "Number of active invite links"
			},
			{
				"name": "revoked_invite_link_count",
				"type": "int32",
				"description": "Number of revoked invite links"
			}
		],
		"description": "Describes a chat administrator with a number of active and revoked chat invite links",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatInviteLinkCounts",
		"methods": [
			{
				"name": "invite_link_counts",
				"type": "vector<chatInviteLinkCount>",
				"description": "List of invite link counts"
			}
		],
		"description": "Contains a list of chat invite link counts",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatInviteLinkMember",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			},
			{
				"name": "joined_chat_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the user joined the chat"
			},
			{
				"name": "via_chat_folder_invite_link",
				"type": "Bool",
				"description": "True, if the user has joined the chat using an invite link for a chat folder"
			},
			{
				"name": "approver_user_id",
				"type": "int53",
				"description": "User identifier of the chat administrator, approved user join request"
			}
		],
		"description": "Describes a chat member joined a chat via an invite link",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatInviteLinkMembers",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "Approximate total number of chat members found"
			},
			{
				"name": "members",
				"type": "vector<chatInviteLinkMember>",
				"description": "List of chat members, joined a chat via an invite link"
			}
		],
		"description": "Contains a list of chat members joined a chat via an invite link",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "InviteLinkChatType",
		"methods": null,
		"description": "Describes the type of chat to which points an invite link",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inviteLinkChatTypeBasicGroup",
		"methods": null,
		"description": "The link is an invite link for a basic group",
		"inheritance": "InviteLinkChatType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inviteLinkChatTypeSupergroup",
		"methods": null,
		"description": "The link is an invite link for a supergroup",
		"inheritance": "InviteLinkChatType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inviteLinkChatTypeChannel",
		"methods": null,
		"description": "The link is an invite link for a channel",
		"inheritance": "InviteLinkChatType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatInviteLinkSubscriptionInfo",
		"methods": [
			{
				"name": "pricing",
				"type": "starSubscriptionPricing",
				"description": "Information about subscription plan that must be paid by the user to use the link"
			},
			{
				"name": "can_reuse",
				"type": "Bool",
				"description": "True, if the user has already paid for the subscription and can use joinChatByInviteLink to join the subscribed chat again"
			},
			{
				"name": "form_id",
				"type": "int64",
				"description": "Identifier of the payment form to use for subscription payment; 0 if the subscription can't be paid"
			}
		],
		"description": "Contains information about subscription plan that must be paid by the user to use a chat invite link",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatInviteLinkInfo",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier of the invite link; 0 if the user has no access to the chat before joining"
			},
			{
				"name": "accessible_for",
				"type": "int32",
				"description": "If non-zero, the amount of time for which read access to the chat will remain available, in seconds"
			},
			{
				"name": "type",
				"type": "InviteLinkChatType",
				"description": "Type of the chat"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Title of the chat"
			},
			{
				"name": "photo",
				"type": "chatPhotoInfo",
				"description": "Chat photo; may be null"
			},
			{
				"name": "accent_color_id",
				"type": "int32",
				"description": "Identifier of the accent color for chat title and background of chat photo"
			},
			{
				"name": "description",
				"type": "string",
				"description": "Chat description"
			},
			{
				"name": "member_count",
				"type": "int32",
				"description": "Number of members in the chat"
			},
			{
				"name": "member_user_ids",
				"type": "vector<int53>",
				"description": "User identifiers of some chat members that may be known to the current user"
			},
			{
				"name": "subscription_info",
				"type": "chatInviteLinkSubscriptionInfo",
				"description": "Information about subscription plan that must be paid by the user to use the link; may be null if the link doesn't require subscription"
			},
			{
				"name": "creates_join_request",
				"type": "Bool",
				"description": "True, if the link only creates join request"
			},
			{
				"name": "is_public",
				"type": "Bool",
				"description": "True, if the chat is a public supergroup or channel, i.e. it has a username or it is a location-based supergroup"
			},
			{
				"name": "verification_status",
				"type": "verificationStatus",
				"description": "Information about verification status of the chat; may be null if none"
			}
		],
		"description": "Contains information about a chat invite link",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatJoinRequest",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the user sent the join request"
			},
			{
				"name": "bio",
				"type": "string",
				"description": "A short bio of the user"
			}
		],
		"description": "Describes a user that sent a join request and waits for administrator approval",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatJoinRequests",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "Approximate total number of requests found"
			},
			{
				"name": "requests",
				"type": "vector<chatJoinRequest>",
				"description": "List of the requests"
			}
		],
		"description": "Contains a list of requests to join a chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatJoinRequestsInfo",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "Total number of pending join requests"
			},
			{
				"name": "user_ids",
				"type": "vector<int53>",
				"description": "Identifiers of at most 3 users sent the newest pending join requests"
			}
		],
		"description": "Contains information about pending join requests for a chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "basicGroup",
		"methods": [
			{
				"name": "id",
				"type": "int53",
				"description": "Group identifier"
			},
			{
				"name": "member_count",
				"type": "int32",
				"description": "Number of members in the group"
			},
			{
				"name": "status",
				"type": "ChatMemberStatus",
				"description": "Status of the current user in the group"
			},
			{
				"name": "is_active",
				"type": "Bool",
				"description": "True, if the group is active"
			},
			{
				"name": "upgraded_to_supergroup_id",
				"type": "int53",
				"description": "Identifier of the supergroup to which this group was upgraded; 0 if none"
			}
		],
		"description": "Represents a basic group of 0-200 users (must be upgraded to a supergroup to accommodate more than 200 users)",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "basicGroupFullInfo",
		"methods": [
			{
				"name": "photo",
				"type": "chatPhoto",
				"description": "Chat photo; may be null if empty or unknown. If non-null, then it is the same photo as in chat.photo"
			},
			{
				"name": "description",
				"type": "string",
				"description": "Group description. Updated only after the basic group is opened"
			},
			{
				"name": "creator_user_id",
				"type": "int53",
				"description": "User identifier of the creator of the group; 0 if unknown"
			},
			{
				"name": "members",
				"type": "vector<chatMember>",
				"description": "Group members"
			},
			{
				"name": "can_hide_members",
				"type": "Bool",
				"description": "True, if non-administrators and non-bots can be hidden in responses to getSupergroupMembers and searchChatMembers for non-administrators after upgrading the basic group to a supergroup"
			},
			{
				"name": "can_toggle_aggressive_anti_spam",
				"type": "Bool",
				"description": "True, if aggressive anti-spam checks can be enabled or disabled in the supergroup after upgrading the basic group to a supergroup"
			},
			{
				"name": "invite_link",
				"type": "chatInviteLink",
				"description": "Primary invite link for this group; may be null. For chat administrators with can_invite_users right only. Updated only after the basic group is opened"
			},
			{
				"name": "bot_commands",
				"type": "vector<botCommands>",
				"description": "List of commands of bots in the group"
			}
		],
		"description": "Contains full information about a basic group",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "supergroup",
		"methods": [
			{
				"name": "id",
				"type": "int53",
				"description": "Supergroup or channel identifier"
			},
			{
				"name": "usernames",
				"type": "usernames",
				"description": "Usernames of the supergroup or channel; may be null"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the current user joined, or the point in time when the supergroup or channel was created, in case the user is not a member"
			},
			{
				"name": "status",
				"type": "ChatMemberStatus",
				"description": "Status of the current user in the supergroup or channel; custom title will always be empty"
			},
			{
				"name": "member_count",
				"type": "int32",
				"description": "Number of members in the supergroup or channel; 0 if unknown. Currently, it is guaranteed to be known only if the supergroup or channel was received through getChatSimilarChats, getChatsToSendStories, getCreatedPublicChats, getGroupsInCommon, getInactiveSupergroupChats, getRecommendedChats, getSuitableDiscussionChats, getUserPrivacySettingRules, getVideoChatAvailableParticipants, searchPublicChats, or in chatFolderInviteLinkInfo.missing_chat_ids, or in userFullInfo.personal_chat_id, or for chats with messages or stories from publicForwards and foundStories"
			},
			{
				"name": "boost_level",
				"type": "int32",
				"description": "Approximate boost level for the chat"
			},
			{
				"name": "has_linked_chat",
				"type": "Bool",
				"description": "True, if the channel has a discussion group, or the supergroup is the designated discussion group for a channel"
			},
			{
				"name": "has_location",
				"type": "Bool",
				"description": "True, if the supergroup is connected to a location, i.e. the supergroup is a location-based supergroup"
			},
			{
				"name": "sign_messages",
				"type": "Bool",
				"description": "True, if messages sent to the channel contains name of the sender. This field is only applicable to channels"
			},
			{
				"name": "show_message_sender",
				"type": "Bool",
				"description": "True, if messages sent to the channel have information about the sender user. This field is only applicable to channels"
			},
			{
				"name": "join_to_send_messages",
				"type": "Bool",
				"description": "True, if users need to join the supergroup before they can send messages. Always true for channels and non-discussion supergroups"
			},
			{
				"name": "join_by_request",
				"type": "Bool",
				"description": "True, if all users directly joining the supergroup need to be approved by supergroup administrators. Always false for channels and supergroups without username, location, or a linked chat"
			},
			{
				"name": "is_slow_mode_enabled",
				"type": "Bool",
				"description": "True, if the slow mode is enabled in the supergroup"
			},
			{
				"name": "is_channel",
				"type": "Bool",
				"description": "True, if the supergroup is a channel"
			},
			{
				"name": "is_broadcast_group",
				"type": "Bool",
				"description": "True, if the supergroup is a broadcast group, i.e. only administrators can send messages and there is no limit on the number of members"
			},
			{
				"name": "is_forum",
				"type": "Bool",
				"description": "True, if the supergroup is a forum with topics"
			},
			{
				"name": "verification_status",
				"type": "verificationStatus",
				"description": "Information about verification status of the supergroup or channel; may be null if none"
			},
			{
				"name": "has_sensitive_content",
				"type": "Bool",
				"description": "True, if content of media messages in the supergroup or channel chat must be hidden with 18+ spoiler"
			},
			{
				"name": "restriction_reason",
				"type": "string",
				"description": "If non-empty, contains a human-readable description of the reason why access to this supergroup or channel must be restricted"
			},
			{
				"name": "paid_message_star_count",
				"type": "int53",
				"description": "Number of Telegram Stars that must be paid by non-administrator users of the supergroup chat for each sent message"
			},
			{
				"name": "has_active_stories",
				"type": "Bool",
				"description": "True, if the supergroup or channel has non-expired stories available to the current user"
			},
			{
				"name": "has_unread_active_stories",
				"type": "Bool",
				"description": "True, if the supergroup or channel has unread non-expired stories available to the current user"
			}
		],
		"description": "Represents a supergroup or channel with zero or more members (subscribers in the case of channels). From the point of view of the system, a channel is a special kind of a supergroup: only administrators can post and see the list of members, and posts from all administrators use the name and photo of the channel instead of individual names and profile photos. Unlike supergroups, channels can have an unlimited number of subscribers",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "supergroupFullInfo",
		"methods": [
			{
				"name": "photo",
				"type": "chatPhoto",
				"description": "Chat photo; may be null if empty or unknown. If non-null, then it is the same photo as in chat.photo"
			},
			{
				"name": "description",
				"type": "string",
				"description": "Supergroup or channel description"
			},
			{
				"name": "member_count",
				"type": "int32",
				"description": "Number of members in the supergroup or channel; 0 if unknown"
			},
			{
				"name": "administrator_count",
				"type": "int32",
				"description": "Number of privileged users in the supergroup or channel; 0 if unknown"
			},
			{
				"name": "restricted_count",
				"type": "int32",
				"description": "Number of restricted users in the supergroup; 0 if unknown"
			},
			{
				"name": "banned_count",
				"type": "int32",
				"description": "Number of users banned from chat; 0 if unknown"
			},
			{
				"name": "linked_chat_id",
				"type": "int53",
				"description": "Chat identifier of a discussion group for the channel, or a channel, for which the supergroup is the designated discussion group; 0 if none or unknown"
			},
			{
				"name": "slow_mode_delay",
				"type": "int32",
				"description": "Delay between consecutive sent messages for non-administrator supergroup members, in seconds"
			},
			{
				"name": "slow_mode_delay_expires_in",
				"type": "double",
				"description": "Time left before next message can be sent in the supergroup, in seconds. An updateSupergroupFullInfo update is not triggered when value of this field changes, but both new and old values are non-zero"
			},
			{
				"name": "can_enable_paid_messages",
				"type": "Bool",
				"description": "True, if paid messages can be enabled in the supergroup chat; for supergroup only"
			},
			{
				"name": "can_enable_paid_reaction",
				"type": "Bool",
				"description": "True, if paid reaction can be enabled in the channel chat; for channels only"
			},
			{
				"name": "can_get_members",
				"type": "Bool",
				"description": "True, if members of the chat can be retrieved via getSupergroupMembers or searchChatMembers"
			},
			{
				"name": "has_hidden_members",
				"type": "Bool",
				"description": "True, if non-administrators can receive only administrators and bots using getSupergroupMembers or searchChatMembers"
			},
			{
				"name": "can_hide_members",
				"type": "Bool",
				"description": "True, if non-administrators and non-bots can be hidden in responses to getSupergroupMembers and searchChatMembers for non-administrators"
			},
			{
				"name": "can_set_sticker_set",
				"type": "Bool",
				"description": "True, if the supergroup sticker set can be changed"
			},
			{
				"name": "can_set_location",
				"type": "Bool",
				"description": "True, if the supergroup location can be changed"
			},
			{
				"name": "can_get_statistics",
				"type": "Bool",
				"description": "True, if the supergroup or channel statistics are available"
			},
			{
				"name": "can_get_revenue_statistics",
				"type": "Bool",
				"description": "True, if the supergroup or channel revenue statistics are available"
			},
			{
				"name": "can_get_star_revenue_statistics",
				"type": "Bool",
				"description": "True, if the supergroup or channel Telegram Star revenue statistics are available"
			},
			{
				"name": "can_send_gift",
				"type": "Bool",
				"description": "True, if the user can send a gift to the supergroup or channel using sendGift or transferGift"
			},
			{
				"name": "can_toggle_aggressive_anti_spam",
				"type": "Bool",
				"description": "True, if aggressive anti-spam checks can be enabled or disabled in the supergroup"
			},
			{
				"name": "is_all_history_available",
				"type": "Bool",
				"description": "True, if new chat members will have access to old messages. In public, discussion, of forum groups and all channels, old messages are always available, so this option affects only private non-forum supergroups without a linked chat. The value of this field is only available to chat administrators"
			},
			{
				"name": "can_have_sponsored_messages",
				"type": "Bool",
				"description": "True, if the chat can have sponsored messages. The value of this field is only available to the owner of the chat"
			},
			{
				"name": "has_aggressive_anti_spam_enabled",
				"type": "Bool",
				"description": "True, if aggressive anti-spam checks are enabled in the supergroup. The value of this field is only available to chat administrators"
			},
			{
				"name": "has_paid_media_allowed",
				"type": "Bool",
				"description": "True, if paid media can be sent and forwarded to the channel chat; for channels only"
			},
			{
				"name": "has_pinned_stories",
				"type": "Bool",
				"description": "True, if the supergroup or channel has pinned stories"
			},
			{
				"name": "gift_count",
				"type": "int32",
				"description": "Number of saved to profile gifts for channels without can_post_messages administrator right, otherwise, the total number of received gifts"
			},
			{
				"name": "my_boost_count",
				"type": "int32",
				"description": "Number of times the current user boosted the supergroup or channel"
			},
			{
				"name": "unrestrict_boost_count",
				"type": "int32",
				"description": "Number of times the supergroup must be boosted by a user to ignore slow mode and chat permission restrictions; 0 if unspecified"
			},
			{
				"name": "sticker_set_id",
				"type": "int64",
				"description": "Identifier of the supergroup sticker set that must be shown before user sticker sets; 0 if none"
			},
			{
				"name": "custom_emoji_sticker_set_id",
				"type": "int64",
				"description": "Identifier of the custom emoji sticker set that can be used in the supergroup without Telegram Premium subscription; 0 if none"
			},
			{
				"name": "location",
				"type": "chatLocation",
				"description": "Location to which the supergroup is connected; may be null if none"
			},
			{
				"name": "invite_link",
				"type": "chatInviteLink",
				"description": "Primary invite link for the chat; may be null. For chat administrators with can_invite_users right only"
			},
			{
				"name": "bot_commands",
				"type": "vector<botCommands>",
				"description": "List of commands of bots in the group"
			},
			{
				"name": "bot_verification",
				"type": "botVerification",
				"description": "Information about verification status of the supergroup or the channel provided by a bot; may be null if none or unknown"
			},
			{
				"name": "upgraded_from_basic_group_id",
				"type": "int53",
				"description": "Identifier of the basic group from which supergroup was upgraded; 0 if none"
			},
			{
				"name": "upgraded_from_max_message_id",
				"type": "int53",
				"description": "Identifier of the last message in the basic group from which supergroup was upgraded; 0 if none"
			}
		],
		"description": "Contains full information about a supergroup or channel",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "SecretChatState",
		"methods": null,
		"description": "Describes the current secret chat state",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "secretChatStatePending",
		"methods": null,
		"description": "The secret chat is not yet created; waiting for the other user to get online",
		"inheritance": "SecretChatState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "secretChatStateReady",
		"methods": null,
		"description": "The secret chat is ready to use",
		"inheritance": "SecretChatState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "secretChatStateClosed",
		"methods": null,
		"description": "The secret chat is closed",
		"inheritance": "SecretChatState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "secretChat",
		"methods": [
			{
				"name": "id",
				"type": "int32",
				"description": "Secret chat identifier"
			},
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the chat partner"
			},
			{
				"name": "state",
				"type": "SecretChatState",
				"description": "State of the secret chat"
			},
			{
				"name": "is_outbound",
				"type": "Bool",
				"description": "True, if the chat was created by the current user; false otherwise"
			},
			{
				"name": "key_hash",
				"type": "bytes",
				"description": "Hash of the currently used key for comparison with the hash of the chat partner's key. This is a string of 36 little-endian bytes, which must be split into groups of 2 bits, each denoting a pixel of one of 4 colors FFFFFF, D5E6F3, 2D5775, and 2F99C9. The pixels must be used to make a 12x12 square image filled from left to right, top to bottom. Alternatively, the first 32 bytes of the hash can be converted to the hexadecimal format and printed as 32 2-digit hex numbers"
			},
			{
				"name": "layer",
				"type": "int32",
				"description": "Secret chat layer; determines features supported by the chat partner's application. Nested text entities and underline and strikethrough entities are supported if the layer >= 101, files bigger than 2000MB are supported if the layer >= 143, spoiler and custom emoji text entities are supported if the layer >= 144"
			}
		],
		"description": "Represents a secret chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "MessageSender",
		"methods": null,
		"description": "Contains information about the sender of a message",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageSenderUser",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user that sent the message"
			}
		],
		"description": "The message was sent by a known user",
		"inheritance": "MessageSender",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageSenderChat",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat that sent the message"
			}
		],
		"description": "The message was sent on behalf of a chat",
		"inheritance": "MessageSender",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageSenders",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "Approximate total number of messages senders found"
			},
			{
				"name": "senders",
				"type": "vector<MessageSender>",
				"description": "List of message senders"
			}
		],
		"description": "Represents a list of message senders",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatMessageSender",
		"methods": [
			{
				"name": "sender",
				"type": "MessageSender",
				"description": "The message sender"
			},
			{
				"name": "needs_premium",
				"type": "Bool",
				"description": "True, if Telegram Premium is needed to use the message sender"
			}
		],
		"description": "Represents a message sender, which can be used to send messages in a chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatMessageSenders",
		"methods": [
			{
				"name": "senders",
				"type": "vector<chatMessageSender>",
				"description": "List of available message senders"
			}
		],
		"description": "Represents a list of message senders, which can be used to send messages in a chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "MessageReadDate",
		"methods": null,
		"description": "Describes read date of a recent outgoing message in a private chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageReadDateRead",
		"methods": [
			{
				"name": "read_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the message was read by the other user"
			}
		],
		"description": "Contains read date of the message",
		"inheritance": "MessageReadDate",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageReadDateUnread",
		"methods": null,
		"description": "The message is unread yet",
		"inheritance": "MessageReadDate",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageReadDateTooOld",
		"methods": null,
		"description": "The message is too old to get read date",
		"inheritance": "MessageReadDate",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageReadDateUserPrivacyRestricted",
		"methods": null,
		"description": "The read date is unknown due to privacy settings of the other user",
		"inheritance": "MessageReadDate",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageReadDateMyPrivacyRestricted",
		"methods": null,
		"description": "The read date is unknown due to privacy settings of the current user, but will be known if the user subscribes to Telegram Premium",
		"inheritance": "MessageReadDate",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageViewer",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier of the viewer"
			},
			{
				"name": "view_date",
				"type": "int32",
				"description": "Approximate point in time (Unix timestamp) when the message was viewed"
			}
		],
		"description": "Represents a viewer of a message",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageViewers",
		"methods": [
			{
				"name": "viewers",
				"type": "vector<messageViewer>",
				"description": "List of message viewers"
			}
		],
		"description": "Represents a list of message viewers",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "MessageOrigin",
		"methods": null,
		"description": "Contains information about the origin of a message",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageOriginUser",
		"methods": [
			{
				"name": "sender_user_id",
				"type": "int53",
				"description": "Identifier of the user that originally sent the message"
			}
		],
		"description": "The message was originally sent by a known user",
		"inheritance": "MessageOrigin",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageOriginHiddenUser",
		"methods": [
			{
				"name": "sender_name",
				"type": "string",
				"description": "Name of the sender"
			}
		],
		"description": "The message was originally sent by a user, which is hidden by their privacy settings",
		"inheritance": "MessageOrigin",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageOriginChat",
		"methods": [
			{
				"name": "sender_chat_id",
				"type": "int53",
				"description": "Identifier of the chat that originally sent the message"
			},
			{
				"name": "author_signature",
				"type": "string",
				"description": "For messages originally sent by an anonymous chat administrator, original message author signature"
			}
		],
		"description": "The message was originally sent on behalf of a chat",
		"inheritance": "MessageOrigin",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageOriginChannel",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the channel chat to which the message was originally sent"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Message identifier of the original message"
			},
			{
				"name": "author_signature",
				"type": "string",
				"description": "Original post author signature"
			}
		],
		"description": "The message was originally a post in a channel",
		"inheritance": "MessageOrigin",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "forwardSource",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat to which the message that was forwarded belonged; may be 0 if unknown"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message; may be 0 if unknown"
			},
			{
				"name": "sender_id",
				"type": "MessageSender",
				"description": "Identifier of the sender of the message; may be null if unknown or the new message was forwarded not to Saved Messages"
			},
			{
				"name": "sender_name",
				"type": "string",
				"description": "Name of the sender of the message if the sender is hidden by their privacy settings"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the message is sent; 0 if unknown"
			},
			{
				"name": "is_outgoing",
				"type": "Bool",
				"description": "True, if the message that was forwarded is outgoing; always false if sender is unknown"
			}
		],
		"description": "Contains information about the last message from which a new message was forwarded last time",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ReactionType",
		"methods": null,
		"description": "Describes type of message reaction",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reactionTypeEmoji",
		"methods": [
			{
				"name": "emoji",
				"type": "string",
				"description": "Text representation of the reaction"
			}
		],
		"description": "A reaction with an emoji",
		"inheritance": "ReactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reactionTypeCustomEmoji",
		"methods": [
			{
				"name": "custom_emoji_id",
				"type": "int64",
				"description": "Unique identifier of the custom emoji"
			}
		],
		"description": "A reaction with a custom emoji",
		"inheritance": "ReactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reactionTypePaid",
		"methods": null,
		"description": "The paid reaction in a channel chat",
		"inheritance": "ReactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "PaidReactionType",
		"methods": null,
		"description": "Describes type of paid message reaction",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "paidReactionTypeRegular",
		"methods": null,
		"description": "A paid reaction on behalf of the current user",
		"inheritance": "PaidReactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "paidReactionTypeAnonymous",
		"methods": null,
		"description": "An anonymous paid reaction",
		"inheritance": "PaidReactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "paidReactionTypeChat",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat"
			}
		],
		"description": "A paid reaction on behalf of an owned chat",
		"inheritance": "PaidReactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "paidReactor",
		"methods": [
			{
				"name": "sender_id",
				"type": "MessageSender",
				"description": "Identifier of the user or chat that added the reactions; may be null for anonymous reactors that aren't the current user"
			},
			{
				"name": "star_count",
				"type": "int32",
				"description": "Number of Telegram Stars added"
			},
			{
				"name": "is_top",
				"type": "Bool",
				"description": "True, if the reactor is one of the most active reactors; may be false if the reactor is the current user"
			},
			{
				"name": "is_me",
				"type": "Bool",
				"description": "True, if the paid reaction was added by the current user"
			},
			{
				"name": "is_anonymous",
				"type": "Bool",
				"description": "True, if the reactor is anonymous"
			}
		],
		"description": "Contains information about a user that added paid reactions",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageForwardInfo",
		"methods": [
			{
				"name": "origin",
				"type": "MessageOrigin",
				"description": "Origin of the forwarded message"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the message was originally sent"
			},
			{
				"name": "source",
				"type": "forwardSource",
				"description": "For messages forwarded to the chat with the current user (Saved Messages), to the Replies bot chat, or to the channel's discussion group, information about the source message from which the message was forwarded last time; may be null for other forwards or if unknown"
			},
			{
				"name": "public_service_announcement_type",
				"type": "string",
				"description": "The type of public service announcement for the forwarded message"
			}
		],
		"description": "Contains information about a forwarded message",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageImportInfo",
		"methods": [
			{
				"name": "sender_name",
				"type": "string",
				"description": "Name of the original sender"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the message was originally sent"
			}
		],
		"description": "Contains information about a message created with importMessages",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageReplyInfo",
		"methods": [
			{
				"name": "reply_count",
				"type": "int32",
				"description": "Number of times the message was directly or indirectly replied"
			},
			{
				"name": "recent_replier_ids",
				"type": "vector<MessageSender>",
				"description": "Identifiers of at most 3 recent repliers to the message; available in channels with a discussion supergroup. The users and chats are expected to be inaccessible: only their photo and name will be available"
			},
			{
				"name": "last_read_inbox_message_id",
				"type": "int53",
				"description": "Identifier of the last read incoming reply to the message"
			},
			{
				"name": "last_read_outbox_message_id",
				"type": "int53",
				"description": "Identifier of the last read outgoing reply to the message"
			},
			{
				"name": "last_message_id",
				"type": "int53",
				"description": "Identifier of the last reply to the message"
			}
		],
		"description": "Contains information about replies to a message",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageReaction",
		"methods": [
			{
				"name": "type",
				"type": "ReactionType",
				"description": "Type of the reaction"
			},
			{
				"name": "total_count",
				"type": "int32",
				"description": "Number of times the reaction was added"
			},
			{
				"name": "is_chosen",
				"type": "Bool",
				"description": "True, if the reaction is chosen by the current user"
			},
			{
				"name": "used_sender_id",
				"type": "MessageSender",
				"description": "Identifier of the message sender used by the current user to add the reaction; may be null if unknown or the reaction isn't chosen"
			},
			{
				"name": "recent_sender_ids",
				"type": "vector<MessageSender>",
				"description": "Identifiers of at most 3 recent message senders, added the reaction; available in private, basic group and supergroup chats"
			}
		],
		"description": "Contains information about a reaction to a message",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageReactions",
		"methods": [
			{
				"name": "reactions",
				"type": "vector<messageReaction>",
				"description": "List of added reactions"
			},
			{
				"name": "are_tags",
				"type": "Bool",
				"description": "True, if the reactions are tags and Telegram Premium users can filter messages by them"
			},
			{
				"name": "paid_reactors",
				"type": "vector<paidReactor>",
				"description": "Information about top users that added the paid reaction"
			},
			{
				"name": "can_get_added_reactions",
				"type": "Bool",
				"description": "True, if the list of added reactions is available using getMessageAddedReactions"
			}
		],
		"description": "Contains a list of reactions added to a message",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageInteractionInfo",
		"methods": [
			{
				"name": "view_count",
				"type": "int32",
				"description": "Number of times the message was viewed"
			},
			{
				"name": "forward_count",
				"type": "int32",
				"description": "Number of times the message was forwarded"
			},
			{
				"name": "reply_info",
				"type": "messageReplyInfo",
				"description": "Information about direct or indirect replies to the message; may be null. Currently, available only in channels with a discussion supergroup and discussion supergroups for messages, which are not replies itself"
			},
			{
				"name": "reactions",
				"type": "messageReactions",
				"description": "The list of reactions or tags added to the message; may be null"
			}
		],
		"description": "Contains information about interactions with a message",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "unreadReaction",
		"methods": [
			{
				"name": "type",
				"type": "ReactionType",
				"description": "Type of the reaction"
			},
			{
				"name": "sender_id",
				"type": "MessageSender",
				"description": "Identifier of the sender, added the reaction"
			},
			{
				"name": "is_big",
				"type": "Bool",
				"description": "True, if the reaction was added with a big animation"
			}
		],
		"description": "Contains information about an unread reaction to a message",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "MessageEffectType",
		"methods": null,
		"description": "Describes type of emoji effect",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageEffectTypeEmojiReaction",
		"methods": [
			{
				"name": "select_animation",
				"type": "sticker",
				"description": "Select animation for the effect in TGS format"
			},
			{
				"name": "effect_animation",
				"type": "sticker",
				"description": "Effect animation for the effect in TGS format"
			}
		],
		"description": "An effect from an emoji reaction",
		"inheritance": "MessageEffectType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageEffectTypePremiumSticker",
		"methods": [
			{
				"name": "sticker",
				"type": "sticker",
				"description": "The premium sticker. The effect can be found at sticker.full_type.premium_animation"
			}
		],
		"description": "An effect from a premium sticker",
		"inheritance": "MessageEffectType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageEffect",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "Unique identifier of the effect"
			},
			{
				"name": "static_icon",
				"type": "sticker",
				"description": "Static icon for the effect in WEBP format; may be null if none"
			},
			{
				"name": "emoji",
				"type": "string",
				"description": "Emoji corresponding to the effect that can be used if static icon isn't available"
			},
			{
				"name": "is_premium",
				"type": "Bool",
				"description": "True, if Telegram Premium subscription is required to use the effect"
			},
			{
				"name": "type",
				"type": "MessageEffectType",
				"description": "Type of the effect"
			}
		],
		"description": "Contains information about an effect added to a message",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "MessageSendingState",
		"methods": null,
		"description": "Contains information about the sending state of the message",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageSendingStatePending",
		"methods": [
			{
				"name": "sending_id",
				"type": "int32",
				"description": "Non-persistent message sending identifier, specified by the application"
			}
		],
		"description": "The message is being sent now, but has not yet been delivered to the server",
		"inheritance": "MessageSendingState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageSendingStateFailed",
		"methods": [
			{
				"name": "error",
				"type": "error",
				"description": "The cause of the message sending failure"
			},
			{
				"name": "can_retry",
				"type": "Bool",
				"description": "True, if the message can be re-sent using resendMessages or readdQuickReplyShortcutMessages"
			},
			{
				"name": "need_another_sender",
				"type": "Bool",
				"description": "True, if the message can be re-sent only on behalf of a different sender"
			},
			{
				"name": "need_another_reply_quote",
				"type": "Bool",
				"description": "True, if the message can be re-sent only if another quote is chosen in the message that is replied by the given message"
			},
			{
				"name": "need_drop_reply",
				"type": "Bool",
				"description": "True, if the message can be re-sent only if the message to be replied is removed. This will be done automatically by resendMessages"
			},
			{
				"name": "required_paid_message_star_count",
				"type": "int53",
				"description": "The number of Telegram Stars that must be paid to send the message; 0 if the current amount is correct"
			},
			{
				"name": "retry_after",
				"type": "double",
				"description": "Time left before the message can be re-sent, in seconds. No update is sent when this field changes"
			}
		],
		"description": "The message failed to be sent",
		"inheritance": "MessageSendingState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "textQuote",
		"methods": [
			{
				"name": "text",
				"type": "formattedText",
				"description": "Text of the quote. Only Bold, Italic, Underline, Strikethrough, Spoiler, and CustomEmoji entities can be present in the text"
			},
			{
				"name": "position",
				"type": "int32",
				"description": "Approximate quote position in the original message in UTF-16 code units as specified by the message sender"
			},
			{
				"name": "is_manual",
				"type": "Bool",
				"description": "True, if the quote was manually chosen by the message sender"
			}
		],
		"description": "Describes manually or automatically chosen quote from another message",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputTextQuote",
		"methods": [
			{
				"name": "text",
				"type": "formattedText",
				"description": "Text of the quote; 0-getOption(\"message_reply_quote_length_max\") characters. Only Bold, Italic, Underline, Strikethrough, Spoiler, and CustomEmoji entities are allowed to be kept and must be kept in the quote"
			},
			{
				"name": "position",
				"type": "int32",
				"description": "Quote position in the original message in UTF-16 code units"
			}
		],
		"description": "Describes manually chosen quote from another message",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "MessageReplyTo",
		"methods": null,
		"description": "Contains information about the message or the story a message is replying to",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageReplyToMessage",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "The identifier of the chat to which the message belongs; may be 0 if the replied message is in unknown chat"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "The identifier of the message; may be 0 if the replied message is in unknown chat"
			},
			{
				"name": "quote",
				"type": "textQuote",
				"description": "Chosen quote from the replied message; may be null if none"
			},
			{
				"name": "origin",
				"type": "MessageOrigin",
				"description": "Information about origin of the message if the message was from another chat or topic; may be null for messages from the same chat"
			},
			{
				"name": "origin_send_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the message was sent if the message was from another chat or topic; 0 for messages from the same chat"
			},
			{
				"name": "content",
				"type": "MessageContent",
				"description": "Media content of the message if the message was from another chat or topic; may be null for messages from the same chat and messages without media. Can be only one of the following types: messageAnimation, messageAudio, messageContact, messageDice, messageDocument, messageGame, messageGiveaway, messageGiveawayWinners, messageInvoice, messageLocation, messagePaidMedia, messagePhoto, messagePoll, messageSticker, messageStory, messageText (for link preview), messageVenue, messageVideo, messageVideoNote, or messageVoiceNote"
			}
		],
		"description": "Describes a message replied by a given message",
		"inheritance": "MessageReplyTo",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageReplyToStory",
		"methods": [
			{
				"name": "story_sender_chat_id",
				"type": "int53",
				"description": "The identifier of the sender of the story"
			},
			{
				"name": "story_id",
				"type": "int32",
				"description": "The identifier of the story"
			}
		],
		"description": "Describes a story replied by a given message",
		"inheritance": "MessageReplyTo",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "InputMessageReplyTo",
		"methods": null,
		"description": "Contains information about the message or the story to be replied",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputMessageReplyToMessage",
		"methods": [
			{
				"name": "message_id",
				"type": "int53",
				"description": "The identifier of the message to be replied in the same chat and forum topic. A message can be replied in the same chat and forum topic only if messageProperties.can_be_replied"
			},
			{
				"name": "quote",
				"type": "inputTextQuote",
				"description": "Quote from the message to be replied; pass null if none. Must always be null for replies in secret chats"
			}
		],
		"description": "Describes a message to be replied in the same chat and forum topic",
		"inheritance": "InputMessageReplyTo",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputMessageReplyToExternalMessage",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "The identifier of the chat to which the message to be replied belongs"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "The identifier of the message to be replied in the specified chat. A message can be replied in another chat or forum topic only if messageProperties.can_be_replied_in_another_chat"
			},
			{
				"name": "quote",
				"type": "inputTextQuote",
				"description": "Quote from the message to be replied; pass null if none"
			}
		],
		"description": "Describes a message to be replied that is from a different chat or a forum topic; not supported in secret chats",
		"inheritance": "InputMessageReplyTo",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputMessageReplyToStory",
		"methods": [
			{
				"name": "story_sender_chat_id",
				"type": "int53",
				"description": "The identifier of the sender of the story. Currently, stories can be replied only in the sender's chat and channel stories can't be replied"
			},
			{
				"name": "story_id",
				"type": "int32",
				"description": "The identifier of the story"
			}
		],
		"description": "Describes a story to be replied",
		"inheritance": "InputMessageReplyTo",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "factCheck",
		"methods": [
			{
				"name": "text",
				"type": "formattedText",
				"description": "Text of the fact-check"
			},
			{
				"name": "country_code",
				"type": "string",
				"description": "A two-letter ISO 3166-1 alpha-2 country code of the country for which the fact-check is shown"
			}
		],
		"description": "Describes a fact-check added to the message by an independent checker",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "message",
		"methods": [
			{
				"name": "id",
				"type": "int53",
				"description": "Message identifier; unique for the chat to which the message belongs"
			},
			{
				"name": "sender_id",
				"type": "MessageSender",
				"description": "Identifier of the sender of the message"
			},
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "sending_state",
				"type": "MessageSendingState",
				"description": "The sending state of the message; may be null if the message isn't being sent and didn't fail to be sent"
			},
			{
				"name": "scheduling_state",
				"type": "MessageSchedulingState",
				"description": "The scheduling state of the message; may be null if the message isn't scheduled"
			},
			{
				"name": "is_outgoing",
				"type": "Bool",
				"description": "True, if the message is outgoing"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "True, if the message is pinned"
			},
			{
				"name": "is_from_offline",
				"type": "Bool",
				"description": "True, if the message was sent because of a scheduled action by the message sender, for example, as away, or greeting service message"
			},
			{
				"name": "can_be_saved",
				"type": "Bool",
				"description": "True, if content of the message can be saved locally or copied using inputMessageForwarded or forwardMessages with copy options"
			},
			{
				"name": "has_timestamped_media",
				"type": "Bool",
				"description": "True, if media timestamp entities refers to a media in this message as opposed to a media in the replied message"
			},
			{
				"name": "is_channel_post",
				"type": "Bool",
				"description": "True, if the message is a channel post. All messages to channels are channel posts, all other messages are not channel posts"
			},
			{
				"name": "is_topic_message",
				"type": "Bool",
				"description": "True, if the message is a forum topic message"
			},
			{
				"name": "contains_unread_mention",
				"type": "Bool",
				"description": "True, if the message contains an unread mention for the current user"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the message was sent; 0 for scheduled messages"
			},
			{
				"name": "edit_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the message was last edited; 0 for scheduled messages"
			},
			{
				"name": "forward_info",
				"type": "messageForwardInfo",
				"description": "Information about the initial message sender; may be null if none or unknown"
			},
			{
				"name": "import_info",
				"type": "messageImportInfo",
				"description": "Information about the initial message for messages created with importMessages; may be null if the message isn't imported"
			},
			{
				"name": "interaction_info",
				"type": "messageInteractionInfo",
				"description": "Information about interactions with the message; may be null if none"
			},
			{
				"name": "unread_reactions",
				"type": "vector<unreadReaction>",
				"description": "Information about unread reactions added to the message"
			},
			{
				"name": "fact_check",
				"type": "factCheck",
				"description": "Information about fact-check added to the message; may be null if none"
			},
			{
				"name": "reply_to",
				"type": "MessageReplyTo",
				"description": "Information about the message or the story this message is replying to; may be null if none"
			},
			{
				"name": "message_thread_id",
				"type": "int53",
				"description": "If non-zero, the identifier of the message thread the message belongs to; unique within the chat to which the message belongs"
			},
			{
				"name": "saved_messages_topic_id",
				"type": "int53",
				"description": "Identifier of the Saved Messages topic for the message; 0 for messages not from Saved Messages"
			},
			{
				"name": "self_destruct_type",
				"type": "MessageSelfDestructType",
				"description": "The message's self-destruct type; may be null if none"
			},
			{
				"name": "self_destruct_in",
				"type": "double",
				"description": "Time left before the message self-destruct timer expires, in seconds; 0 if self-destruction isn't scheduled yet"
			},
			{
				"name": "auto_delete_in",
				"type": "double",
				"description": "Time left before the message will be automatically deleted by message_auto_delete_time setting of the chat, in seconds; 0 if never"
			},
			{
				"name": "via_bot_user_id",
				"type": "int53",
				"description": "If non-zero, the user identifier of the inline bot through which this message was sent"
			},
			{
				"name": "sender_business_bot_user_id",
				"type": "int53",
				"description": "If non-zero, the user identifier of the business bot that sent this message"
			},
			{
				"name": "sender_boost_count",
				"type": "int32",
				"description": "Number of times the sender of the message boosted the supergroup at the time the message was sent; 0 if none or unknown. For messages sent by the current user, supergroupFullInfo.my_boost_count must be used instead"
			},
			{
				"name": "paid_message_star_count",
				"type": "int53",
				"description": "The number of Telegram Stars the sender paid to send the message"
			},
			{
				"name": "author_signature",
				"type": "string",
				"description": "For channel posts and anonymous group messages, optional author signature"
			},
			{
				"name": "media_album_id",
				"type": "int64",
				"description": "Unique identifier of an album this message belongs to; 0 if none. Only audios, documents, photos and videos can be grouped together in albums"
			},
			{
				"name": "effect_id",
				"type": "int64",
				"description": "Unique identifier of the effect added to the message; 0 if none"
			},
			{
				"name": "has_sensitive_content",
				"type": "Bool",
				"description": "True, if media content of the message must be hidden with 18+ spoiler"
			},
			{
				"name": "restriction_reason",
				"type": "string",
				"description": "If non-empty, contains a human-readable description of the reason why access to this message must be restricted"
			},
			{
				"name": "content",
				"type": "MessageContent",
				"description": "Content of the message"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "Reply markup for the message; may be null if none"
			}
		],
		"description": "Describes a message",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messages",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "Approximate total number of messages found"
			},
			{
				"name": "messages",
				"type": "vector<message>",
				"description": "List of messages; messages may be null"
			}
		],
		"description": "Contains a list of messages",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "foundMessages",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "Approximate total number of messages found; -1 if unknown"
			},
			{
				"name": "messages",
				"type": "vector<message>",
				"description": "List of messages"
			},
			{
				"name": "next_offset",
				"type": "string",
				"description": "The offset for the next request. If empty, then there are no more results"
			}
		],
		"description": "Contains a list of messages found by a search",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "foundChatMessages",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "Approximate total number of messages found; -1 if unknown"
			},
			{
				"name": "messages",
				"type": "vector<message>",
				"description": "List of messages"
			},
			{
				"name": "next_from_message_id",
				"type": "int53",
				"description": "The offset for the next request. If 0, there are no more results"
			}
		],
		"description": "Contains a list of messages found by a search in a given chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messagePosition",
		"methods": [
			{
				"name": "position",
				"type": "int32",
				"description": "0-based message position in the full list of suitable messages"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Message identifier"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the message was sent"
			}
		],
		"description": "Contains information about a message in a specific position",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messagePositions",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "Total number of messages found"
			},
			{
				"name": "positions",
				"type": "vector<messagePosition>",
				"description": "List of message positions"
			}
		],
		"description": "Contains a list of message positions",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageCalendarDay",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "Total number of found messages sent on the day"
			},
			{
				"name": "message",
				"type": "message",
				"description": "First message sent on the day"
			}
		],
		"description": "Contains information about found messages sent on a specific day",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageCalendar",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "Total number of found messages"
			},
			{
				"name": "days",
				"type": "vector<messageCalendarDay>",
				"description": "Information about messages sent"
			}
		],
		"description": "Contains information about found messages, split by days according to the option \"utc_time_offset\"",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessMessage",
		"methods": [
			{
				"name": "message",
				"type": "message",
				"description": "The message"
			},
			{
				"name": "reply_to_message",
				"type": "message",
				"description": "Message that is replied by the message in the same chat; may be null if none"
			}
		],
		"description": "Describes a message from a business account as received by a bot",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessMessages",
		"methods": [
			{
				"name": "messages",
				"type": "vector<businessMessage>",
				"description": "List of business messages"
			}
		],
		"description": "Contains a list of messages from a business account as received by a bot",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "MessageSource",
		"methods": null,
		"description": "Describes source of a message",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageSourceChatHistory",
		"methods": null,
		"description": "The message is from a chat history",
		"inheritance": "MessageSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageSourceMessageThreadHistory",
		"methods": null,
		"description": "The message is from a message thread history",
		"inheritance": "MessageSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageSourceForumTopicHistory",
		"methods": null,
		"description": "The message is from a forum topic history",
		"inheritance": "MessageSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageSourceHistoryPreview",
		"methods": null,
		"description": "The message is from chat, message thread or forum topic history preview",
		"inheritance": "MessageSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageSourceChatList",
		"methods": null,
		"description": "The message is from a chat list or a forum topic list",
		"inheritance": "MessageSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageSourceSearch",
		"methods": null,
		"description": "The message is from search results, including file downloads, local file list, outgoing document messages, calendar",
		"inheritance": "MessageSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageSourceChatEventLog",
		"methods": null,
		"description": "The message is from a chat event log",
		"inheritance": "MessageSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageSourceNotification",
		"methods": null,
		"description": "The message is from a notification",
		"inheritance": "MessageSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageSourceScreenshot",
		"methods": null,
		"description": "The message was screenshotted; the source must be used only if the message content was visible during the screenshot",
		"inheritance": "MessageSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageSourceOther",
		"methods": null,
		"description": "The message is from some other source",
		"inheritance": "MessageSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageSponsor",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "URL of the sponsor to be opened when the message is clicked"
			},
			{
				"name": "photo",
				"type": "photo",
				"description": "Photo of the sponsor; may be null if must not be shown"
			},
			{
				"name": "info",
				"type": "string",
				"description": "Additional optional information about the sponsor to be shown along with the message"
			}
		],
		"description": "Information about the sponsor of a message",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "sponsoredMessage",
		"methods": [
			{
				"name": "message_id",
				"type": "int53",
				"description": "Message identifier; unique for the chat to which the sponsored message belongs among both ordinary and sponsored messages"
			},
			{
				"name": "is_recommended",
				"type": "Bool",
				"description": "True, if the message needs to be labeled as \"recommended\" instead of \"sponsored\""
			},
			{
				"name": "can_be_reported",
				"type": "Bool",
				"description": "True, if the message can be reported to Telegram moderators through reportChatSponsoredMessage"
			},
			{
				"name": "content",
				"type": "MessageContent",
				"description": "Content of the message. Currently, can be only of the types messageText, messageAnimation, messagePhoto, or messageVideo. Video messages can be viewed fullscreen"
			},
			{
				"name": "sponsor",
				"type": "messageSponsor",
				"description": "Information about the sponsor of the message"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Title of the sponsored message"
			},
			{
				"name": "button_text",
				"type": "string",
				"description": "Text for the message action button"
			},
			{
				"name": "accent_color_id",
				"type": "int32",
				"description": "Identifier of the accent color for title, button text and message background"
			},
			{
				"name": "background_custom_emoji_id",
				"type": "int64",
				"description": "Identifier of a custom emoji to be shown on the message background; 0 if none"
			},
			{
				"name": "additional_info",
				"type": "string",
				"description": "If non-empty, additional information about the sponsored message to be shown along with the message"
			}
		],
		"description": "Describes a sponsored message",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "sponsoredMessages",
		"methods": [
			{
				"name": "messages",
				"type": "vector<sponsoredMessage>",
				"description": "List of sponsored messages"
			},
			{
				"name": "messages_between",
				"type": "int32",
				"description": "The minimum number of messages between shown sponsored messages, or 0 if only one sponsored message must be shown after all ordinary messages"
			}
		],
		"description": "Contains a list of sponsored messages",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reportOption",
		"methods": [
			{
				"name": "id",
				"type": "bytes",
				"description": "Unique identifier of the option"
			},
			{
				"name": "text",
				"type": "string",
				"description": "Text of the option"
			}
		],
		"description": "Describes an option to report an entity to Telegram",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ReportChatSponsoredMessageResult",
		"methods": null,
		"description": "Describes result of sponsored message report",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reportChatSponsoredMessageResultOk",
		"methods": null,
		"description": "The message was reported successfully",
		"inheritance": "ReportChatSponsoredMessageResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reportChatSponsoredMessageResultFailed",
		"methods": null,
		"description": "The sponsored message is too old or not found",
		"inheritance": "ReportChatSponsoredMessageResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reportChatSponsoredMessageResultOptionRequired",
		"methods": [
			{
				"name": "title",
				"type": "string",
				"description": "Title for the option choice"
			},
			{
				"name": "options",
				"type": "vector<reportOption>",
				"description": "List of available options"
			}
		],
		"description": "The user must choose an option to report the message and repeat request with the chosen option",
		"inheritance": "ReportChatSponsoredMessageResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reportChatSponsoredMessageResultAdsHidden",
		"methods": null,
		"description": "Sponsored messages were hidden for the user in all chats",
		"inheritance": "ReportChatSponsoredMessageResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reportChatSponsoredMessageResultPremiumRequired",
		"methods": null,
		"description": "The user asked to hide sponsored messages, but Telegram Premium is required for this",
		"inheritance": "ReportChatSponsoredMessageResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "fileDownload",
		"methods": [
			{
				"name": "file_id",
				"type": "int32",
				"description": "File identifier"
			},
			{
				"name": "message",
				"type": "message",
				"description": "The message with the file"
			},
			{
				"name": "add_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the file was added to the download list"
			},
			{
				"name": "complete_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the file downloading was completed; 0 if the file downloading isn't completed"
			},
			{
				"name": "is_paused",
				"type": "Bool",
				"description": "True, if downloading of the file is paused"
			}
		],
		"description": "Describes a file added to file download list",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "downloadedFileCounts",
		"methods": [
			{
				"name": "active_count",
				"type": "int32",
				"description": "Number of active file downloads found, including paused"
			},
			{
				"name": "paused_count",
				"type": "int32",
				"description": "Number of paused file downloads found"
			},
			{
				"name": "completed_count",
				"type": "int32",
				"description": "Number of completed file downloads found"
			}
		],
		"description": "Contains number of being downloaded and recently downloaded files found",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "foundFileDownloads",
		"methods": [
			{
				"name": "total_counts",
				"type": "downloadedFileCounts",
				"description": "Total number of suitable files, ignoring offset"
			},
			{
				"name": "files",
				"type": "vector<fileDownload>",
				"description": "The list of files"
			},
			{
				"name": "next_offset",
				"type": "string",
				"description": "The offset for the next request. If empty, then there are no more results"
			}
		],
		"description": "Contains a list of downloaded files, found by a search",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "NotificationSettingsScope",
		"methods": null,
		"description": "Describes the types of chats to which notification settings are relevant",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "notificationSettingsScopePrivateChats",
		"methods": null,
		"description": "Notification settings applied to all private and secret chats when the corresponding chat setting has a default value",
		"inheritance": "NotificationSettingsScope",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "notificationSettingsScopeGroupChats",
		"methods": null,
		"description": "Notification settings applied to all basic group and supergroup chats when the corresponding chat setting has a default value",
		"inheritance": "NotificationSettingsScope",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "notificationSettingsScopeChannelChats",
		"methods": null,
		"description": "Notification settings applied to all channel chats when the corresponding chat setting has a default value",
		"inheritance": "NotificationSettingsScope",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatNotificationSettings",
		"methods": [
			{
				"name": "use_default_mute_for",
				"type": "Bool",
				"description": "If true, the value for the relevant type of chat or the forum chat is used instead of mute_for"
			},
			{
				"name": "mute_for",
				"type": "int32",
				"description": "Time left before notifications will be unmuted, in seconds"
			},
			{
				"name": "use_default_sound",
				"type": "Bool",
				"description": "If true, the value for the relevant type of chat or the forum chat is used instead of sound_id"
			},
			{
				"name": "sound_id",
				"type": "int64",
				"description": "Identifier of the notification sound to be played for messages; 0 if sound is disabled"
			},
			{
				"name": "use_default_show_preview",
				"type": "Bool",
				"description": "If true, the value for the relevant type of chat or the forum chat is used instead of show_preview"
			},
			{
				"name": "show_preview",
				"type": "Bool",
				"description": "True, if message content must be displayed in notifications"
			},
			{
				"name": "use_default_mute_stories",
				"type": "Bool",
				"description": "If true, the value for the relevant type of chat is used instead of mute_stories"
			},
			{
				"name": "mute_stories",
				"type": "Bool",
				"description": "True, if story notifications are disabled for the chat"
			},
			{
				"name": "use_default_story_sound",
				"type": "Bool",
				"description": "If true, the value for the relevant type of chat is used instead of story_sound_id"
			},
			{
				"name": "story_sound_id",
				"type": "int64",
				"description": "Identifier of the notification sound to be played for stories; 0 if sound is disabled"
			},
			{
				"name": "use_default_show_story_sender",
				"type": "Bool",
				"description": "If true, the value for the relevant type of chat is used instead of show_story_sender"
			},
			{
				"name": "show_story_sender",
				"type": "Bool",
				"description": "True, if the sender of stories must be displayed in notifications"
			},
			{
				"name": "use_default_disable_pinned_message_notifications",
				"type": "Bool",
				"description": "If true, the value for the relevant type of chat or the forum chat is used instead of disable_pinned_message_notifications"
			},
			{
				"name": "disable_pinned_message_notifications",
				"type": "Bool",
				"description": "If true, notifications for incoming pinned messages will be created as for an ordinary unread message"
			},
			{
				"name": "use_default_disable_mention_notifications",
				"type": "Bool",
				"description": "If true, the value for the relevant type of chat or the forum chat is used instead of disable_mention_notifications"
			},
			{
				"name": "disable_mention_notifications",
				"type": "Bool",
				"description": "If true, notifications for messages with mentions will be created as for an ordinary unread message"
			}
		],
		"description": "Contains information about notification settings for a chat or a forum topic",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "scopeNotificationSettings",
		"methods": [
			{
				"name": "mute_for",
				"type": "int32",
				"description": "Time left before notifications will be unmuted, in seconds"
			},
			{
				"name": "sound_id",
				"type": "int64",
				"description": "Identifier of the notification sound to be played; 0 if sound is disabled"
			},
			{
				"name": "show_preview",
				"type": "Bool",
				"description": "True, if message content must be displayed in notifications"
			},
			{
				"name": "use_default_mute_stories",
				"type": "Bool",
				"description": "If true, story notifications are received only for the first 5 chats from topChatCategoryUsers regardless of the value of mute_stories"
			},
			{
				"name": "mute_stories",
				"type": "Bool",
				"description": "True, if story notifications are disabled"
			},
			{
				"name": "story_sound_id",
				"type": "int64",
				"description": "Identifier of the notification sound to be played for stories; 0 if sound is disabled"
			},
			{
				"name": "show_story_sender",
				"type": "Bool",
				"description": "True, if the sender of stories must be displayed in notifications"
			},
			{
				"name": "disable_pinned_message_notifications",
				"type": "Bool",
				"description": "True, if notifications for incoming pinned messages will be created as for an ordinary unread message"
			},
			{
				"name": "disable_mention_notifications",
				"type": "Bool",
				"description": "True, if notifications for messages with mentions will be created as for an ordinary unread message"
			}
		],
		"description": "Contains information about notification settings for several chats",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ReactionNotificationSource",
		"methods": null,
		"description": "Describes sources of reactions for which notifications will be shown",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reactionNotificationSourceNone",
		"methods": null,
		"description": "Notifications for reactions are disabled",
		"inheritance": "ReactionNotificationSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reactionNotificationSourceContacts",
		"methods": null,
		"description": "Notifications for reactions are shown only for reactions from contacts",
		"inheritance": "ReactionNotificationSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reactionNotificationSourceAll",
		"methods": null,
		"description": "Notifications for reactions are shown for all reactions",
		"inheritance": "ReactionNotificationSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reactionNotificationSettings",
		"methods": [
			{
				"name": "message_reaction_source",
				"type": "ReactionNotificationSource",
				"description": "Source of message reactions for which notifications are shown"
			},
			{
				"name": "story_reaction_source",
				"type": "ReactionNotificationSource",
				"description": "Source of story reactions for which notifications are shown"
			},
			{
				"name": "sound_id",
				"type": "int64",
				"description": "Identifier of the notification sound to be played; 0 if sound is disabled"
			},
			{
				"name": "show_preview",
				"type": "Bool",
				"description": "True, if reaction sender and emoji must be displayed in notifications"
			}
		],
		"description": "Contains information about notification settings for reactions",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "draftMessage",
		"methods": [
			{
				"name": "reply_to",
				"type": "InputMessageReplyTo",
				"description": "Information about the message to be replied; must be of the type inputMessageReplyToMessage; may be null if none"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the draft was created"
			},
			{
				"name": "input_message_text",
				"type": "InputMessageContent",
				"description": "Content of the message draft; must be of the type inputMessageText, inputMessageVideoNote, or inputMessageVoiceNote"
			},
			{
				"name": "effect_id",
				"type": "int64",
				"description": "Identifier of the effect to apply to the message when it is sent; 0 if none"
			}
		],
		"description": "Contains information about a message draft",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ChatType",
		"methods": null,
		"description": "Describes the type of chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatTypePrivate",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			}
		],
		"description": "An ordinary chat with a user",
		"inheritance": "ChatType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatTypeBasicGroup",
		"methods": [
			{
				"name": "basic_group_id",
				"type": "int53",
				"description": "Basic group identifier"
			}
		],
		"description": "A basic group (a chat with 0-200 other users)",
		"inheritance": "ChatType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatTypeSupergroup",
		"methods": [
			{
				"name": "supergroup_id",
				"type": "int53",
				"description": "Supergroup or channel identifier"
			},
			{
				"name": "is_channel",
				"type": "Bool",
				"description": "True, if the supergroup is a channel"
			}
		],
		"description": "A supergroup or channel (with unlimited members)",
		"inheritance": "ChatType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatTypeSecret",
		"methods": [
			{
				"name": "secret_chat_id",
				"type": "int32",
				"description": "Secret chat identifier"
			},
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier of the other user in the secret chat"
			}
		],
		"description": "A secret chat with a user",
		"inheritance": "ChatType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatFolderIcon",
		"methods": [
			{
				"name": "name",
				"type": "string",
				"description": "The chosen icon name for short folder representation; one of \"All\", \"Unread\", \"Unmuted\", \"Bots\", \"Channels\", \"Groups\", \"Private\", \"Custom\", \"Setup\", \"Cat\", \"Crown\", \"Favorite\", \"Flower\", \"Game\", \"Home\", \"Love\", \"Mask\", \"Party\", \"Sport\", \"Study\", \"Trade\", \"Travel\", \"Work\", \"Airplane\", \"Book\", \"Light\", \"Like\", \"Money\", \"Note\", \"Palette\""
			}
		],
		"description": "Represents an icon for a chat folder",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatFolderName",
		"methods": [
			{
				"name": "text",
				"type": "formattedText",
				"description": "The text of the chat folder name; 1-12 characters without line feeds. May contain only CustomEmoji entities"
			},
			{
				"name": "animate_custom_emoji",
				"type": "Bool",
				"description": "True, if custom emoji in the name must be animated"
			}
		],
		"description": "Describes name of a chat folder",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatFolder",
		"methods": [
			{
				"name": "name",
				"type": "chatFolderName",
				"description": "The name of the folder"
			},
			{
				"name": "icon",
				"type": "chatFolderIcon",
				"description": "The chosen icon for the chat folder; may be null. If null, use getChatFolderDefaultIconName to get default icon name for the folder"
			},
			{
				"name": "color_id",
				"type": "int32",
				"description": "The identifier of the chosen color for the chat folder icon; from -1 to 6. If -1, then color is disabled. Can't be changed if folder tags are disabled or the current user doesn't have Telegram Premium subscription"
			},
			{
				"name": "is_shareable",
				"type": "Bool",
				"description": "True, if at least one link has been created for the folder"
			},
			{
				"name": "pinned_chat_ids",
				"type": "vector<int53>",
				"description": "The chat identifiers of pinned chats in the folder. There can be up to getOption(\"chat_folder_chosen_chat_count_max\") pinned and always included non-secret chats and the same number of secret chats, but the limit can be increased with Telegram Premium"
			},
			{
				"name": "included_chat_ids",
				"type": "vector<int53>",
				"description": "The chat identifiers of always included chats in the folder. There can be up to getOption(\"chat_folder_chosen_chat_count_max\") pinned and always included non-secret chats and the same number of secret chats, but the limit can be increased with Telegram Premium"
			},
			{
				"name": "excluded_chat_ids",
				"type": "vector<int53>",
				"description": "The chat identifiers of always excluded chats in the folder. There can be up to getOption(\"chat_folder_chosen_chat_count_max\") always excluded non-secret chats and the same number of secret chats, but the limit can be increased with Telegram Premium"
			},
			{
				"name": "exclude_muted",
				"type": "Bool",
				"description": "True, if muted chats need to be excluded"
			},
			{
				"name": "exclude_read",
				"type": "Bool",
				"description": "True, if read chats need to be excluded"
			},
			{
				"name": "exclude_archived",
				"type": "Bool",
				"description": "True, if archived chats need to be excluded"
			},
			{
				"name": "include_contacts",
				"type": "Bool",
				"description": "True, if contacts need to be included"
			},
			{
				"name": "include_non_contacts",
				"type": "Bool",
				"description": "True, if non-contact users need to be included"
			},
			{
				"name": "include_bots",
				"type": "Bool",
				"description": "True, if bots need to be included"
			},
			{
				"name": "include_groups",
				"type": "Bool",
				"description": "True, if basic groups and supergroups need to be included"
			},
			{
				"name": "include_channels",
				"type": "Bool",
				"description": "True, if channels need to be included"
			}
		],
		"description": "Represents a folder for user chats",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatFolderInfo",
		"methods": [
			{
				"name": "id",
				"type": "int32",
				"description": "Unique chat folder identifier"
			},
			{
				"name": "name",
				"type": "chatFolderName",
				"description": "The name of the folder"
			},
			{
				"name": "icon",
				"type": "chatFolderIcon",
				"description": "The chosen or default icon for the chat folder"
			},
			{
				"name": "color_id",
				"type": "int32",
				"description": "The identifier of the chosen color for the chat folder icon; from -1 to 6. If -1, then color is disabled"
			},
			{
				"name": "is_shareable",
				"type": "Bool",
				"description": "True, if at least one link has been created for the folder"
			},
			{
				"name": "has_my_invite_links",
				"type": "Bool",
				"description": "True, if the chat folder has invite links created by the current user"
			}
		],
		"description": "Contains basic information about a chat folder",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatFolderInviteLink",
		"methods": [
			{
				"name": "invite_link",
				"type": "string",
				"description": "The chat folder invite link"
			},
			{
				"name": "name",
				"type": "string",
				"description": "Name of the link"
			},
			{
				"name": "chat_ids",
				"type": "vector<int53>",
				"description": "Identifiers of chats, included in the link"
			}
		],
		"description": "Contains a chat folder invite link",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatFolderInviteLinks",
		"methods": [
			{
				"name": "invite_links",
				"type": "vector<chatFolderInviteLink>",
				"description": "List of the invite links"
			}
		],
		"description": "Represents a list of chat folder invite links",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatFolderInviteLinkInfo",
		"methods": [
			{
				"name": "chat_folder_info",
				"type": "chatFolderInfo",
				"description": "Basic information about the chat folder; chat folder identifier will be 0 if the user didn't have the chat folder yet"
			},
			{
				"name": "missing_chat_ids",
				"type": "vector<int53>",
				"description": "Identifiers of the chats from the link, which aren't added to the folder yet"
			},
			{
				"name": "added_chat_ids",
				"type": "vector<int53>",
				"description": "Identifiers of the chats from the link, which are added to the folder already"
			}
		],
		"description": "Contains information about an invite link to a chat folder",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "recommendedChatFolder",
		"methods": [
			{
				"name": "folder",
				"type": "chatFolder",
				"description": "The chat folder"
			},
			{
				"name": "description",
				"type": "string",
				"description": "Chat folder description"
			}
		],
		"description": "Describes a recommended chat folder",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "recommendedChatFolders",
		"methods": [
			{
				"name": "chat_folders",
				"type": "vector<recommendedChatFolder>",
				"description": "List of recommended chat folders"
			}
		],
		"description": "Contains a list of recommended chat folders",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "archiveChatListSettings",
		"methods": [
			{
				"name": "archive_and_mute_new_chats_from_unknown_users",
				"type": "Bool",
				"description": "True, if new chats from non-contacts will be automatically archived and muted. Can be set to true only if the option \"can_archive_and_mute_new_chats_from_unknown_users\" is true"
			},
			{
				"name": "keep_unmuted_chats_archived",
				"type": "Bool",
				"description": "True, if unmuted chats will be kept in the Archive chat list when they get a new message"
			},
			{
				"name": "keep_chats_from_folders_archived",
				"type": "Bool",
				"description": "True, if unmuted chats, that are always included or pinned in a folder, will be kept in the Archive chat list when they get a new message. Ignored if keep_unmuted_chats_archived == true"
			}
		],
		"description": "Contains settings for automatic moving of chats to and from the Archive chat lists",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ChatList",
		"methods": null,
		"description": "Describes a list of chats",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatListMain",
		"methods": null,
		"description": "A main list of chats",
		"inheritance": "ChatList",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatListArchive",
		"methods": null,
		"description": "A list of chats usually located at the top of the main chat list. Unmuted chats are automatically moved from the Archive to the Main chat list when a new message arrives",
		"inheritance": "ChatList",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatListFolder",
		"methods": [
			{
				"name": "chat_folder_id",
				"type": "int32",
				"description": "Chat folder identifier"
			}
		],
		"description": "A list of chats added to a chat folder",
		"inheritance": "ChatList",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatLists",
		"methods": [
			{
				"name": "chat_lists",
				"type": "vector<ChatList>",
				"description": "List of chat lists"
			}
		],
		"description": "Contains a list of chat lists",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ChatSource",
		"methods": null,
		"description": "Describes a reason why an external chat is shown in a chat list",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatSourceMtprotoProxy",
		"methods": null,
		"description": "The chat is sponsored by the user's MTProxy server",
		"inheritance": "ChatSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatSourcePublicServiceAnnouncement",
		"methods": [
			{
				"name": "type",
				"type": "string",
				"description": "The type of the announcement"
			},
			{
				"name": "text",
				"type": "string",
				"description": "The text of the announcement"
			}
		],
		"description": "The chat contains a public service announcement",
		"inheritance": "ChatSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatPosition",
		"methods": [
			{
				"name": "list",
				"type": "ChatList",
				"description": "The chat list"
			},
			{
				"name": "order",
				"type": "int64",
				"description": "A parameter used to determine order of the chat in the chat list. Chats must be sorted by the pair (order, chat.id) in descending order"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "True, if the chat is pinned in the chat list"
			},
			{
				"name": "source",
				"type": "ChatSource",
				"description": "Source of the chat in the chat list; may be null"
			}
		],
		"description": "Describes a position of a chat in a chat list",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ChatAvailableReactions",
		"methods": null,
		"description": "Describes reactions available in the chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatAvailableReactionsAll",
		"methods": [
			{
				"name": "max_reaction_count",
				"type": "int32",
				"description": "The maximum allowed number of reactions per message; 1-11"
			}
		],
		"description": "All reactions are available in the chat, excluding the paid reaction and custom reactions in channel chats",
		"inheritance": "ChatAvailableReactions",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatAvailableReactionsSome",
		"methods": [
			{
				"name": "reactions",
				"type": "vector<ReactionType>",
				"description": "The list of reactions"
			},
			{
				"name": "max_reaction_count",
				"type": "int32",
				"description": "The maximum allowed number of reactions per message; 1-11"
			}
		],
		"description": "Only specific reactions are available in the chat",
		"inheritance": "ChatAvailableReactions",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "savedMessagesTag",
		"methods": [
			{
				"name": "tag",
				"type": "ReactionType",
				"description": "The tag"
			},
			{
				"name": "label",
				"type": "string",
				"description": "Label of the tag; 0-12 characters. Always empty if the tag is returned for a Saved Messages topic"
			},
			{
				"name": "count",
				"type": "int32",
				"description": "Number of times the tag was used; may be 0 if the tag has non-empty label"
			}
		],
		"description": "Represents a tag used in Saved Messages or a Saved Messages topic",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "savedMessagesTags",
		"methods": [
			{
				"name": "tags",
				"type": "vector<savedMessagesTag>",
				"description": "List of tags"
			}
		],
		"description": "Contains a list of tags used in Saved Messages",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessBotManageBar",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "User identifier of the bot"
			},
			{
				"name": "manage_url",
				"type": "string",
				"description": "URL to be opened to manage the bot"
			},
			{
				"name": "is_bot_paused",
				"type": "Bool",
				"description": "True, if the bot is paused. Use toggleBusinessConnectedBotChatIsPaused to change the value of the field"
			},
			{
				"name": "can_bot_reply",
				"type": "Bool",
				"description": "True, if the bot can reply"
			}
		],
		"description": "Contains information about a business bot that manages the chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "videoChat",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Group call identifier of an active video chat; 0 if none. Full information about the video chat can be received through the method getGroupCall"
			},
			{
				"name": "has_participants",
				"type": "Bool",
				"description": "True, if the video chat has participants"
			},
			{
				"name": "default_participant_id",
				"type": "MessageSender",
				"description": "Default group call participant identifier to join the video chat; may be null"
			}
		],
		"description": "Describes a video chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chat",
		"methods": [
			{
				"name": "id",
				"type": "int53",
				"description": "Chat unique identifier"
			},
			{
				"name": "type",
				"type": "ChatType",
				"description": "Type of the chat"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Chat title"
			},
			{
				"name": "photo",
				"type": "chatPhotoInfo",
				"description": "Chat photo; may be null"
			},
			{
				"name": "accent_color_id",
				"type": "int32",
				"description": "Identifier of the accent color for message sender name, and backgrounds of chat photo, reply header, and link preview"
			},
			{
				"name": "background_custom_emoji_id",
				"type": "int64",
				"description": "Identifier of a custom emoji to be shown on the reply header and link preview background for messages sent by the chat; 0 if none"
			},
			{
				"name": "profile_accent_color_id",
				"type": "int32",
				"description": "Identifier of the profile accent color for the chat's profile; -1 if none"
			},
			{
				"name": "profile_background_custom_emoji_id",
				"type": "int64",
				"description": "Identifier of a custom emoji to be shown on the background of the chat's profile; 0 if none"
			},
			{
				"name": "permissions",
				"type": "chatPermissions",
				"description": "Actions that non-administrator chat members are allowed to take in the chat"
			},
			{
				"name": "last_message",
				"type": "message",
				"description": "Last message in the chat; may be null if none or unknown"
			},
			{
				"name": "positions",
				"type": "vector<chatPosition>",
				"description": "Positions of the chat in chat lists"
			},
			{
				"name": "chat_lists",
				"type": "vector<ChatList>",
				"description": "Chat lists to which the chat belongs. A chat can have a non-zero position in a chat list even it doesn't belong to the chat list and have no position in a chat list even it belongs to the chat list"
			},
			{
				"name": "message_sender_id",
				"type": "MessageSender",
				"description": "Identifier of a user or chat that is selected to send messages in the chat; may be null if the user can't change message sender"
			},
			{
				"name": "block_list",
				"type": "BlockList",
				"description": "Block list to which the chat is added; may be null if none"
			},
			{
				"name": "has_protected_content",
				"type": "Bool",
				"description": "True, if chat content can't be saved locally, forwarded, or copied"
			},
			{
				"name": "is_translatable",
				"type": "Bool",
				"description": "True, if translation of all messages in the chat must be suggested to the user"
			},
			{
				"name": "is_marked_as_unread",
				"type": "Bool",
				"description": "True, if the chat is marked as unread"
			},
			{
				"name": "view_as_topics",
				"type": "Bool",
				"description": "True, if the chat is a forum supergroup that must be shown in the \"View as topics\" mode, or Saved Messages chat that must be shown in the \"View as chats\""
			},
			{
				"name": "has_scheduled_messages",
				"type": "Bool",
				"description": "True, if the chat has scheduled messages"
			},
			{
				"name": "can_be_deleted_only_for_self",
				"type": "Bool",
				"description": "True, if the chat messages can be deleted only for the current user while other users will continue to see the messages"
			},
			{
				"name": "can_be_deleted_for_all_users",
				"type": "Bool",
				"description": "True, if the chat messages can be deleted for all users"
			},
			{
				"name": "can_be_reported",
				"type": "Bool",
				"description": "True, if the chat can be reported to Telegram moderators through reportChat or reportChatPhoto"
			},
			{
				"name": "default_disable_notification",
				"type": "Bool",
				"description": "Default value of the disable_notification parameter, used when a message is sent to the chat"
			},
			{
				"name": "unread_count",
				"type": "int32",
				"description": "Number of unread messages in the chat"
			},
			{
				"name": "last_read_inbox_message_id",
				"type": "int53",
				"description": "Identifier of the last read incoming message"
			},
			{
				"name": "last_read_outbox_message_id",
				"type": "int53",
				"description": "Identifier of the last read outgoing message"
			},
			{
				"name": "unread_mention_count",
				"type": "int32",
				"description": "Number of unread messages with a mention/reply in the chat"
			},
			{
				"name": "unread_reaction_count",
				"type": "int32",
				"description": "Number of messages with unread reactions in the chat"
			},
			{
				"name": "notification_settings",
				"type": "chatNotificationSettings",
				"description": "Notification settings for the chat"
			},
			{
				"name": "available_reactions",
				"type": "ChatAvailableReactions",
				"description": "Types of reaction, available in the chat"
			},
			{
				"name": "message_auto_delete_time",
				"type": "int32",
				"description": "Current message auto-delete or self-destruct timer setting for the chat, in seconds; 0 if disabled. Self-destruct timer in secret chats starts after the message or its content is viewed. Auto-delete timer in other chats starts from the send date"
			},
			{
				"name": "emoji_status",
				"type": "emojiStatus",
				"description": "Emoji status to be shown along with chat title; may be null"
			},
			{
				"name": "background",
				"type": "chatBackground",
				"description": "Background set for the chat; may be null if none"
			},
			{
				"name": "theme_name",
				"type": "string",
				"description": "If non-empty, name of a theme, set for the chat"
			},
			{
				"name": "action_bar",
				"type": "ChatActionBar",
				"description": "Information about actions which must be possible to do through the chat action bar; may be null if none"
			},
			{
				"name": "business_bot_manage_bar",
				"type": "businessBotManageBar",
				"description": "Information about bar for managing a business bot in the chat; may be null if none"
			},
			{
				"name": "video_chat",
				"type": "videoChat",
				"description": "Information about video chat of the chat"
			},
			{
				"name": "pending_join_requests",
				"type": "chatJoinRequestsInfo",
				"description": "Information about pending join requests; may be null if none"
			},
			{
				"name": "reply_markup_message_id",
				"type": "int53",
				"description": "Identifier of the message from which reply markup needs to be used; 0 if there is no default custom reply markup in the chat"
			},
			{
				"name": "draft_message",
				"type": "draftMessage",
				"description": "A draft of a message in the chat; may be null if none"
			},
			{
				"name": "client_data",
				"type": "string",
				"description": "Application-specific data associated with the chat. (For example, the chat scroll position or local chat notification settings can be stored here.) Persistent if the message database is used"
			}
		],
		"description": "A chat. (Can be a private chat, basic group, supergroup, or secret chat)",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chats",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "Approximate total number of chats found"
			},
			{
				"name": "chat_ids",
				"type": "vector<int53>",
				"description": "List of chat identifiers"
			}
		],
		"description": "Represents a list of chats",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "failedToAddMember",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			},
			{
				"name": "premium_would_allow_invite",
				"type": "Bool",
				"description": "True, if subscription to Telegram Premium would have allowed to add the user to the chat"
			},
			{
				"name": "premium_required_to_send_messages",
				"type": "Bool",
				"description": "True, if subscription to Telegram Premium is required to send the user chat invite link"
			}
		],
		"description": "Contains information about a user that has failed to be added to a chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "failedToAddMembers",
		"methods": [
			{
				"name": "failed_to_add_members",
				"type": "vector<failedToAddMember>",
				"description": "Information about users that weren't added to the chat"
			}
		],
		"description": "Represents a list of users that has failed to be added to a chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "createdBasicGroupChat",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "failed_to_add_members",
				"type": "failedToAddMembers",
				"description": "Information about failed to add members"
			}
		],
		"description": "Contains information about a newly created basic group chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "PublicChatType",
		"methods": null,
		"description": "Describes type of public chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "publicChatTypeHasUsername",
		"methods": null,
		"description": "The chat is public, because it has an active username",
		"inheritance": "PublicChatType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "publicChatTypeIsLocationBased",
		"methods": null,
		"description": "The chat is public, because it is a location-based supergroup",
		"inheritance": "PublicChatType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "accountInfo",
		"methods": [
			{
				"name": "registration_month",
				"type": "int32",
				"description": "Month when the user was registered in Telegram; 0-12; may be 0 if unknown"
			},
			{
				"name": "registration_year",
				"type": "int32",
				"description": "Year when the user was registered in Telegram; 0-9999; may be 0 if unknown"
			},
			{
				"name": "phone_number_country_code",
				"type": "string",
				"description": "A two-letter ISO 3166-1 alpha-2 country code based on the phone number of the user; may be empty if unknown"
			},
			{
				"name": "last_name_change_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the user changed name last time; 0 if unknown"
			},
			{
				"name": "last_photo_change_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the user changed photo last time; 0 if unknown"
			}
		],
		"description": "Contains basic information about another user that started a chat with the current user",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ChatActionBar",
		"methods": null,
		"description": "Describes actions which must be possible to do through a chat action bar",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatActionBarReportSpam",
		"methods": [
			{
				"name": "can_unarchive",
				"type": "Bool",
				"description": "If true, the chat was automatically archived and can be moved back to the main chat list using addChatToList simultaneously with setting chat notification settings to default using setChatNotificationSettings"
			}
		],
		"description": "The chat can be reported as spam using the method reportChat with an empty option_id and message_ids. If the chat is a private chat with a user with an emoji status, then a notice about emoji status usage must be shown",
		"inheritance": "ChatActionBar",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatActionBarInviteMembers",
		"methods": null,
		"description": "The chat is a recently created group chat to which new members can be invited",
		"inheritance": "ChatActionBar",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatActionBarReportAddBlock",
		"methods": [
			{
				"name": "can_unarchive",
				"type": "Bool",
				"description": "If true, the chat was automatically archived and can be moved back to the main chat list using addChatToList simultaneously with setting chat notification settings to default using setChatNotificationSettings"
			},
			{
				"name": "account_info",
				"type": "accountInfo",
				"description": "Basic information about the other user in the chat; may be null if unknown"
			}
		],
		"description": "The chat is a private or secret chat, which can be reported using the method reportChat, or the other user can be blocked using the method setMessageSenderBlockList, or the other user can be added to the contact list using the method addContact. If the chat is a private chat with a user with an emoji status, then a notice about emoji status usage must be shown",
		"inheritance": "ChatActionBar",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatActionBarAddContact",
		"methods": null,
		"description": "The chat is a private or secret chat and the other user can be added to the contact list using the method addContact",
		"inheritance": "ChatActionBar",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatActionBarSharePhoneNumber",
		"methods": null,
		"description": "The chat is a private or secret chat with a mutual contact and the user's phone number can be shared with the other user using the method sharePhoneNumber",
		"inheritance": "ChatActionBar",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatActionBarJoinRequest",
		"methods": [
			{
				"name": "title",
				"type": "string",
				"description": "Title of the chat to which the join request was sent"
			},
			{
				"name": "is_channel",
				"type": "Bool",
				"description": "True, if the join request was sent to a channel chat"
			},
			{
				"name": "request_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the join request was sent"
			}
		],
		"description": "The chat is a private chat with an administrator of a chat to which the user sent join request",
		"inheritance": "ChatActionBar",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "KeyboardButtonType",
		"methods": null,
		"description": "Describes a keyboard button type",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "keyboardButtonTypeText",
		"methods": null,
		"description": "A simple button, with text that must be sent when the button is pressed",
		"inheritance": "KeyboardButtonType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "keyboardButtonTypeRequestPhoneNumber",
		"methods": null,
		"description": "A button that sends the user's phone number when pressed; available only in private chats",
		"inheritance": "KeyboardButtonType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "keyboardButtonTypeRequestLocation",
		"methods": null,
		"description": "A button that sends the user's location when pressed; available only in private chats",
		"inheritance": "KeyboardButtonType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "keyboardButtonTypeRequestPoll",
		"methods": [
			{
				"name": "force_regular",
				"type": "Bool",
				"description": "If true, only regular polls must be allowed to create"
			},
			{
				"name": "force_quiz",
				"type": "Bool",
				"description": "If true, only polls in quiz mode must be allowed to create"
			}
		],
		"description": "A button that allows the user to create and send a poll when pressed; available only in private chats",
		"inheritance": "KeyboardButtonType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "keyboardButtonTypeRequestUsers",
		"methods": [
			{
				"name": "id",
				"type": "int32",
				"description": "Unique button identifier"
			},
			{
				"name": "restrict_user_is_bot",
				"type": "Bool",
				"description": "True, if the shared users must or must not be bots"
			},
			{
				"name": "user_is_bot",
				"type": "Bool",
				"description": "True, if the shared users must be bots; otherwise, the shared users must not be bots. Ignored if restrict_user_is_bot is false"
			},
			{
				"name": "restrict_user_is_premium",
				"type": "Bool",
				"description": "True, if the shared users must or must not be Telegram Premium users"
			},
			{
				"name": "user_is_premium",
				"type": "Bool",
				"description": "True, if the shared users must be Telegram Premium users; otherwise, the shared users must not be Telegram Premium users. Ignored if restrict_user_is_premium is false"
			},
			{
				"name": "max_quantity",
				"type": "int32",
				"description": "The maximum number of users to share"
			},
			{
				"name": "request_name",
				"type": "Bool",
				"description": "Pass true to request name of the users; bots only"
			},
			{
				"name": "request_username",
				"type": "Bool",
				"description": "Pass true to request username of the users; bots only"
			},
			{
				"name": "request_photo",
				"type": "Bool",
				"description": "Pass true to request photo of the users; bots only"
			}
		],
		"description": "A button that requests users to be shared by the current user; available only in private chats. Use the method shareUsersWithBot to complete the request",
		"inheritance": "KeyboardButtonType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "keyboardButtonTypeRequestChat",
		"methods": [
			{
				"name": "id",
				"type": "int32",
				"description": "Unique button identifier"
			},
			{
				"name": "chat_is_channel",
				"type": "Bool",
				"description": "True, if the chat must be a channel; otherwise, a basic group or a supergroup chat is shared"
			},
			{
				"name": "restrict_chat_is_forum",
				"type": "Bool",
				"description": "True, if the chat must or must not be a forum supergroup"
			},
			{
				"name": "chat_is_forum",
				"type": "Bool",
				"description": "True, if the chat must be a forum supergroup; otherwise, the chat must not be a forum supergroup. Ignored if restrict_chat_is_forum is false"
			},
			{
				"name": "restrict_chat_has_username",
				"type": "Bool",
				"description": "True, if the chat must or must not have a username"
			},
			{
				"name": "chat_has_username",
				"type": "Bool",
				"description": "True, if the chat must have a username; otherwise, the chat must not have a username. Ignored if restrict_chat_has_username is false"
			},
			{
				"name": "chat_is_created",
				"type": "Bool",
				"description": "True, if the chat must be created by the current user"
			},
			{
				"name": "user_administrator_rights",
				"type": "chatAdministratorRights",
				"description": "Expected user administrator rights in the chat; may be null if they aren't restricted"
			},
			{
				"name": "bot_administrator_rights",
				"type": "chatAdministratorRights",
				"description": "Expected bot administrator rights in the chat; may be null if they aren't restricted"
			},
			{
				"name": "bot_is_member",
				"type": "Bool",
				"description": "True, if the bot must be a member of the chat; for basic group and supergroup chats only"
			},
			{
				"name": "request_title",
				"type": "Bool",
				"description": "Pass true to request title of the chat; bots only"
			},
			{
				"name": "request_username",
				"type": "Bool",
				"description": "Pass true to request username of the chat; bots only"
			},
			{
				"name": "request_photo",
				"type": "Bool",
				"description": "Pass true to request photo of the chat; bots only"
			}
		],
		"description": "A button that requests a chat to be shared by the current user; available only in private chats. Use the method shareChatWithBot to complete the request",
		"inheritance": "KeyboardButtonType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "keyboardButtonTypeWebApp",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "An HTTP URL to pass to getWebAppUrl"
			}
		],
		"description": "A button that opens a Web App by calling getWebAppUrl",
		"inheritance": "KeyboardButtonType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "keyboardButton",
		"methods": [
			{
				"name": "text",
				"type": "string",
				"description": "Text of the button"
			},
			{
				"name": "type",
				"type": "KeyboardButtonType",
				"description": "Type of the button"
			}
		],
		"description": "Represents a single button in a bot keyboard",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "InlineKeyboardButtonType",
		"methods": null,
		"description": "Describes the type of inline keyboard button",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inlineKeyboardButtonTypeUrl",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "HTTP or tg:// URL to open. If the link is of the type internalLinkTypeWebApp, then the button must be marked as a Web App button"
			}
		],
		"description": "A button that opens a specified URL",
		"inheritance": "InlineKeyboardButtonType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inlineKeyboardButtonTypeLoginUrl",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "An HTTP URL to pass to getLoginUrlInfo"
			},
			{
				"name": "id",
				"type": "int53",
				"description": "Unique button identifier"
			},
			{
				"name": "forward_text",
				"type": "string",
				"description": "If non-empty, new text of the button in forwarded messages"
			}
		],
		"description": "A button that opens a specified URL and automatically authorize the current user by calling getLoginUrlInfo",
		"inheritance": "InlineKeyboardButtonType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inlineKeyboardButtonTypeWebApp",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "An HTTP URL to pass to openWebApp"
			}
		],
		"description": "A button that opens a Web App by calling openWebApp",
		"inheritance": "InlineKeyboardButtonType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inlineKeyboardButtonTypeCallback",
		"methods": [
			{
				"name": "data",
				"type": "bytes",
				"description": "Data to be sent to the bot via a callback query"
			}
		],
		"description": "A button that sends a callback query to a bot",
		"inheritance": "InlineKeyboardButtonType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inlineKeyboardButtonTypeCallbackWithPassword",
		"methods": [
			{
				"name": "data",
				"type": "bytes",
				"description": "Data to be sent to the bot via a callback query"
			}
		],
		"description": "A button that asks for the 2-step verification password of the current user and then sends a callback query to a bot",
		"inheritance": "InlineKeyboardButtonType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inlineKeyboardButtonTypeCallbackGame",
		"methods": null,
		"description": "A button with a game that sends a callback query to a bot. This button must be in the first column and row of the keyboard and can be attached only to a message with content of the type messageGame",
		"inheritance": "InlineKeyboardButtonType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inlineKeyboardButtonTypeSwitchInline",
		"methods": [
			{
				"name": "query",
				"type": "string",
				"description": "Inline query to be sent to the bot"
			},
			{
				"name": "target_chat",
				"type": "TargetChat",
				"description": "Target chat from which to send the inline query"
			}
		],
		"description": "A button that forces an inline query to the bot to be inserted in the input field",
		"inheritance": "InlineKeyboardButtonType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inlineKeyboardButtonTypeBuy",
		"methods": null,
		"description": "A button to buy something. This button must be in the first column and row of the keyboard and can be attached only to a message with content of the type messageInvoice",
		"inheritance": "InlineKeyboardButtonType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inlineKeyboardButtonTypeUser",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			}
		],
		"description": "A button with a user reference to be handled in the same way as textEntityTypeMentionName entities",
		"inheritance": "InlineKeyboardButtonType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inlineKeyboardButtonTypeCopyText",
		"methods": [
			{
				"name": "text",
				"type": "string",
				"description": "The text to copy to clipboard"
			}
		],
		"description": "A button that copies specified text to clipboard",
		"inheritance": "InlineKeyboardButtonType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inlineKeyboardButton",
		"methods": [
			{
				"name": "text",
				"type": "string",
				"description": "Text of the button"
			},
			{
				"name": "type",
				"type": "InlineKeyboardButtonType",
				"description": "Type of the button"
			}
		],
		"description": "Represents a single button in an inline keyboard",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ReplyMarkup",
		"methods": null,
		"description": "Contains a  of a custom keyboard and actions that can be done with it to quickly reply to bots",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "replyMarkupRemoveKeyboard",
		"methods": [
			{
				"name": "is_personal",
				"type": "Bool",
				"description": "True, if the keyboard is removed only for the mentioned users or the target user of a reply"
			}
		],
		"description": "Instructs application to remove the keyboard once this message has been received. This kind of keyboard can't be received in an incoming message; instead, updateChatReplyMarkup with message_id == 0 will be sent",
		"inheritance": "ReplyMarkup",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "replyMarkupForceReply",
		"methods": [
			{
				"name": "is_personal",
				"type": "Bool",
				"description": "True, if a forced reply must automatically be shown to the current user. For outgoing messages, specify true to show the forced reply only for the mentioned users and for the target user of a reply"
			},
			{
				"name": "input_field_placeholder",
				"type": "string",
				"description": "If non-empty, the placeholder to be shown in the input field when the reply is active; 0-64 characters"
			}
		],
		"description": "Instructs application to force a reply to this message",
		"inheritance": "ReplyMarkup",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "replyMarkupShowKeyboard",
		"methods": [
			{
				"name": "rows",
				"type": "vector<vector<keyboardButton>>",
				"description": "A list of rows of bot keyboard buttons"
			},
			{
				"name": "is_persistent",
				"type": "Bool",
				"description": "True, if the keyboard is expected to always be shown when the ordinary keyboard is hidden"
			},
			{
				"name": "resize_keyboard",
				"type": "Bool",
				"description": "True, if the application needs to resize the keyboard vertically"
			},
			{
				"name": "one_time",
				"type": "Bool",
				"description": "True, if the application needs to hide the keyboard after use"
			},
			{
				"name": "is_personal",
				"type": "Bool",
				"description": "True, if the keyboard must automatically be shown to the current user. For outgoing messages, specify true to show the keyboard only for the mentioned users and for the target user of a reply"
			},
			{
				"name": "input_field_placeholder",
				"type": "string",
				"description": "If non-empty, the placeholder to be shown in the input field when the keyboard is active; 0-64 characters"
			}
		],
		"description": "Contains a custom keyboard layout to quickly reply to bots",
		"inheritance": "ReplyMarkup",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "replyMarkupInlineKeyboard",
		"methods": [
			{
				"name": "rows",
				"type": "vector<vector<inlineKeyboardButton>>",
				"description": "A list of rows of inline keyboard buttons"
			}
		],
		"description": "Contains an inline keyboard layout",
		"inheritance": "ReplyMarkup",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "LoginUrlInfo",
		"methods": null,
		"description": "Contains information about an inline button of type inlineKeyboardButtonTypeLoginUrl",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "loginUrlInfoOpen",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "The URL to open"
			},
			{
				"name": "skip_confirmation",
				"type": "Bool",
				"description": "True, if there is no need to show an ordinary open URL confirmation"
			}
		],
		"description": "An HTTP URL needs to be open",
		"inheritance": "LoginUrlInfo",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "loginUrlInfoRequestConfirmation",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "An HTTP URL to be opened"
			},
			{
				"name": "domain",
				"type": "string",
				"description": "A domain of the URL"
			},
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "User identifier of a bot linked with the website"
			},
			{
				"name": "request_write_access",
				"type": "Bool",
				"description": "True, if the user must be asked for the permission to the bot to send them messages"
			}
		],
		"description": "An authorization confirmation dialog needs to be shown to the user",
		"inheritance": "LoginUrlInfo",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "themeParameters",
		"methods": [
			{
				"name": "background_color",
				"type": "int32",
				"description": "A color of the background in the RGB format"
			},
			{
				"name": "secondary_background_color",
				"type": "int32",
				"description": "A secondary color for the background in the RGB format"
			},
			{
				"name": "header_background_color",
				"type": "int32",
				"description": "A color of the header background in the RGB format"
			},
			{
				"name": "bottom_bar_background_color",
				"type": "int32",
				"description": "A color of the bottom bar background in the RGB format"
			},
			{
				"name": "section_background_color",
				"type": "int32",
				"description": "A color of the section background in the RGB format"
			},
			{
				"name": "section_separator_color",
				"type": "int32",
				"description": "A color of the section separator in the RGB format"
			},
			{
				"name": "text_color",
				"type": "int32",
				"description": "A color of text in the RGB format"
			},
			{
				"name": "accent_text_color",
				"type": "int32",
				"description": "An accent color of the text in the RGB format"
			},
			{
				"name": "section_header_text_color",
				"type": "int32",
				"description": "A color of text on the section headers in the RGB format"
			},
			{
				"name": "subtitle_text_color",
				"type": "int32",
				"description": "A color of the subtitle text in the RGB format"
			},
			{
				"name": "destructive_text_color",
				"type": "int32",
				"description": "A color of the text for destructive actions in the RGB format"
			},
			{
				"name": "hint_color",
				"type": "int32",
				"description": "A color of hints in the RGB format"
			},
			{
				"name": "link_color",
				"type": "int32",
				"description": "A color of links in the RGB format"
			},
			{
				"name": "button_color",
				"type": "int32",
				"description": "A color of the buttons in the RGB format"
			},
			{
				"name": "button_text_color",
				"type": "int32",
				"description": "A color of text on the buttons in the RGB format"
			}
		],
		"description": "Contains parameters of the application theme",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "WebAppOpenMode",
		"methods": null,
		"description": "Describes mode in which a Web App is opened",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "webAppOpenModeCompact",
		"methods": null,
		"description": "The Web App is opened in the compact mode",
		"inheritance": "WebAppOpenMode",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "webAppOpenModeFullSize",
		"methods": null,
		"description": "The Web App is opened in the full-size mode",
		"inheritance": "WebAppOpenMode",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "webAppOpenModeFullScreen",
		"methods": null,
		"description": "The Web App is opened in the full-screen mode",
		"inheritance": "WebAppOpenMode",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "foundWebApp",
		"methods": [
			{
				"name": "web_app",
				"type": "webApp",
				"description": "The Web App"
			},
			{
				"name": "request_write_access",
				"type": "Bool",
				"description": "True, if the user must be asked for the permission to the bot to send them messages"
			},
			{
				"name": "skip_confirmation",
				"type": "Bool",
				"description": "True, if there is no need to show an ordinary open URL confirmation before opening the Web App. The field must be ignored and confirmation must be shown anyway if the Web App link was hidden"
			}
		],
		"description": "Contains information about a Web App found by its short name",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "webAppInfo",
		"methods": [
			{
				"name": "launch_id",
				"type": "int64",
				"description": "Unique identifier for the Web App launch"
			},
			{
				"name": "url",
				"type": "string",
				"description": "A Web App URL to open in a web view"
			}
		],
		"description": "Contains information about a Web App",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "mainWebApp",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "URL of the Web App to open"
			},
			{
				"name": "mode",
				"type": "WebAppOpenMode",
				"description": "The mode in which the Web App must be opened"
			}
		],
		"description": "Contains information about the main Web App of a bot",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "webAppOpenParameters",
		"methods": [
			{
				"name": "theme",
				"type": "themeParameters",
				"description": "Preferred Web App theme; pass null to use the default theme"
			},
			{
				"name": "application_name",
				"type": "string",
				"description": "Short name of the current application; 0-64 English letters, digits, and underscores"
			},
			{
				"name": "mode",
				"type": "WebAppOpenMode",
				"description": "The mode in which the Web App is opened; pass null to open in webAppOpenModeFullSize"
			}
		],
		"description": "Options to be used when a Web App is opened",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageThreadInfo",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat to which the message thread belongs"
			},
			{
				"name": "message_thread_id",
				"type": "int53",
				"description": "Message thread identifier, unique within the chat"
			},
			{
				"name": "reply_info",
				"type": "messageReplyInfo",
				"description": "Information about the message thread; may be null for forum topic threads"
			},
			{
				"name": "unread_message_count",
				"type": "int32",
				"description": "Approximate number of unread messages in the message thread"
			},
			{
				"name": "messages",
				"type": "vector<message>",
				"description": "The messages from which the thread starts. The messages are returned in reverse chronological order (i.e., in order of decreasing message_id)"
			},
			{
				"name": "draft_message",
				"type": "draftMessage",
				"description": "A draft of a message in the message thread; may be null if none"
			}
		],
		"description": "Contains information about a message thread",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "SavedMessagesTopicType",
		"methods": null,
		"description": "Describes type of Saved Messages topic",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "savedMessagesTopicTypeMyNotes",
		"methods": null,
		"description": "Topic containing messages sent by the current user of forwarded from an unknown chat",
		"inheritance": "SavedMessagesTopicType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "savedMessagesTopicTypeAuthorHidden",
		"methods": null,
		"description": "Topic containing messages forwarded from a user with hidden privacy",
		"inheritance": "SavedMessagesTopicType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "savedMessagesTopicTypeSavedFromChat",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat"
			}
		],
		"description": "Topic containing messages forwarded from a specific chat",
		"inheritance": "SavedMessagesTopicType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "savedMessagesTopic",
		"methods": [
			{
				"name": "id",
				"type": "int53",
				"description": "Unique topic identifier"
			},
			{
				"name": "type",
				"type": "SavedMessagesTopicType",
				"description": "Type of the topic"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "True, if the topic is pinned"
			},
			{
				"name": "order",
				"type": "int64",
				"description": "A parameter used to determine order of the topic in the topic list. Topics must be sorted by the order in descending order"
			},
			{
				"name": "last_message",
				"type": "message",
				"description": "Last message in the topic; may be null if none or unknown"
			},
			{
				"name": "draft_message",
				"type": "draftMessage",
				"description": "A draft of a message in the topic; may be null if none"
			}
		],
		"description": "Contains information about a Saved Messages topic",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "forumTopicIcon",
		"methods": [
			{
				"name": "color",
				"type": "int32",
				"description": "Color of the topic icon in RGB format"
			},
			{
				"name": "custom_emoji_id",
				"type": "int64",
				"description": "Unique identifier of the custom emoji shown on the topic icon; 0 if none"
			}
		],
		"description": "Describes a forum topic icon",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "forumTopicInfo",
		"methods": [
			{
				"name": "message_thread_id",
				"type": "int53",
				"description": "Message thread identifier of the topic"
			},
			{
				"name": "name",
				"type": "string",
				"description": "Name of the topic"
			},
			{
				"name": "icon",
				"type": "forumTopicIcon",
				"description": "Icon of the topic"
			},
			{
				"name": "creation_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the topic was created"
			},
			{
				"name": "creator_id",
				"type": "MessageSender",
				"description": "Identifier of the creator of the topic"
			},
			{
				"name": "is_general",
				"type": "Bool",
				"description": "True, if the topic is the General topic list"
			},
			{
				"name": "is_outgoing",
				"type": "Bool",
				"description": "True, if the topic was created by the current user"
			},
			{
				"name": "is_closed",
				"type": "Bool",
				"description": "True, if the topic is closed"
			},
			{
				"name": "is_hidden",
				"type": "Bool",
				"description": "True, if the topic is hidden above the topic list and closed; for General topic only"
			}
		],
		"description": "Contains basic information about a forum topic",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "forumTopic",
		"methods": [
			{
				"name": "info",
				"type": "forumTopicInfo",
				"description": "Basic information about the topic"
			},
			{
				"name": "last_message",
				"type": "message",
				"description": "Last message in the topic; may be null if unknown"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "True, if the topic is pinned in the topic list"
			},
			{
				"name": "unread_count",
				"type": "int32",
				"description": "Number of unread messages in the topic"
			},
			{
				"name": "last_read_inbox_message_id",
				"type": "int53",
				"description": "Identifier of the last read incoming message"
			},
			{
				"name": "last_read_outbox_message_id",
				"type": "int53",
				"description": "Identifier of the last read outgoing message"
			},
			{
				"name": "unread_mention_count",
				"type": "int32",
				"description": "Number of unread messages with a mention/reply in the topic"
			},
			{
				"name": "unread_reaction_count",
				"type": "int32",
				"description": "Number of messages with unread reactions in the topic"
			},
			{
				"name": "notification_settings",
				"type": "chatNotificationSettings",
				"description": "Notification settings for the topic"
			},
			{
				"name": "draft_message",
				"type": "draftMessage",
				"description": "A draft of a message in the topic; may be null if none"
			}
		],
		"description": "Describes a forum topic",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "forumTopics",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "Approximate total number of forum topics found"
			},
			{
				"name": "topics",
				"type": "vector<forumTopic>",
				"description": "List of forum topics"
			},
			{
				"name": "next_offset_date",
				"type": "int32",
				"description": "Offset date for the next getForumTopics request"
			},
			{
				"name": "next_offset_message_id",
				"type": "int53",
				"description": "Offset message identifier for the next getForumTopics request"
			},
			{
				"name": "next_offset_message_thread_id",
				"type": "int53",
				"description": "Offset message thread identifier for the next getForumTopics request"
			}
		],
		"description": "Describes a list of forum topics",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewOptions",
		"methods": [
			{
				"name": "is_disabled",
				"type": "Bool",
				"description": "True, if link preview must be disabled"
			},
			{
				"name": "url",
				"type": "string",
				"description": "URL to use for link preview. If empty, then the first URL found in the message text will be used"
			},
			{
				"name": "force_small_media",
				"type": "Bool",
				"description": "True, if shown media preview must be small; ignored in secret chats or if the URL isn't explicitly specified"
			},
			{
				"name": "force_large_media",
				"type": "Bool",
				"description": "True, if shown media preview must be large; ignored in secret chats or if the URL isn't explicitly specified"
			},
			{
				"name": "show_above_text",
				"type": "Bool",
				"description": "True, if link preview must be shown above message text; otherwise, the link preview will be shown below the message text; ignored in secret chats"
			}
		],
		"description": "Options to be used for generation of a link preview",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "sharedUser",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			},
			{
				"name": "first_name",
				"type": "string",
				"description": "First name of the user; for bots only"
			},
			{
				"name": "last_name",
				"type": "string",
				"description": "Last name of the user; for bots only"
			},
			{
				"name": "username",
				"type": "string",
				"description": "Username of the user; for bots only"
			},
			{
				"name": "photo",
				"type": "photo",
				"description": "Profile photo of the user; for bots only; may be null"
			}
		],
		"description": "Contains information about a user shared with a bot",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "sharedChat",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Title of the chat; for bots only"
			},
			{
				"name": "username",
				"type": "string",
				"description": "Username of the chat; for bots only"
			},
			{
				"name": "photo",
				"type": "photo",
				"description": "Photo of the chat; for bots only; may be null"
			}
		],
		"description": "Contains information about a chat shared with a bot",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "themeSettings",
		"methods": [
			{
				"name": "accent_color",
				"type": "int32",
				"description": "Theme accent color in ARGB format"
			},
			{
				"name": "background",
				"type": "background",
				"description": "The background to be used in chats; may be null"
			},
			{
				"name": "outgoing_message_fill",
				"type": "BackgroundFill",
				"description": "The fill to be used as a background for outgoing messages"
			},
			{
				"name": "animate_outgoing_message_fill",
				"type": "Bool",
				"description": "If true, the freeform gradient fill needs to be animated on every sent message"
			},
			{
				"name": "outgoing_message_accent_color",
				"type": "int32",
				"description": "Accent color of outgoing messages in ARGB format"
			}
		],
		"description": "Describes theme settings",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "RichText",
		"methods": null,
		"description": "Describes a formatted text object",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "richTextPlain",
		"methods": [
			{
				"name": "text",
				"type": "string",
				"description": "Text"
			}
		],
		"description": "A plain text",
		"inheritance": "RichText",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "richTextBold",
		"methods": [
			{
				"name": "text",
				"type": "RichText",
				"description": "Text"
			}
		],
		"description": "A bold rich text",
		"inheritance": "RichText",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "richTextItalic",
		"methods": [
			{
				"name": "text",
				"type": "RichText",
				"description": "Text"
			}
		],
		"description": "An italicized rich text",
		"inheritance": "RichText",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "richTextUnderline",
		"methods": [
			{
				"name": "text",
				"type": "RichText",
				"description": "Text"
			}
		],
		"description": "An underlined rich text",
		"inheritance": "RichText",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "richTextStrikethrough",
		"methods": [
			{
				"name": "text",
				"type": "RichText",
				"description": "Text"
			}
		],
		"description": "A strikethrough rich text",
		"inheritance": "RichText",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "richTextFixed",
		"methods": [
			{
				"name": "text",
				"type": "RichText",
				"description": "Text"
			}
		],
		"description": "A fixed-width rich text",
		"inheritance": "RichText",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "richTextUrl",
		"methods": [
			{
				"name": "text",
				"type": "RichText",
				"description": "Text"
			},
			{
				"name": "url",
				"type": "string",
				"description": "URL"
			},
			{
				"name": "is_cached",
				"type": "Bool",
				"description": "True, if the URL has cached instant view server-side"
			}
		],
		"description": "A rich text URL link",
		"inheritance": "RichText",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "richTextEmailAddress",
		"methods": [
			{
				"name": "text",
				"type": "RichText",
				"description": "Text"
			},
			{
				"name": "email_address",
				"type": "string",
				"description": "Email address"
			}
		],
		"description": "A rich text email link",
		"inheritance": "RichText",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "richTextSubscript",
		"methods": [
			{
				"name": "text",
				"type": "RichText",
				"description": "Text"
			}
		],
		"description": "A subscript rich text",
		"inheritance": "RichText",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "richTextSuperscript",
		"methods": [
			{
				"name": "text",
				"type": "RichText",
				"description": "Text"
			}
		],
		"description": "A superscript rich text",
		"inheritance": "RichText",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "richTextMarked",
		"methods": [
			{
				"name": "text",
				"type": "RichText",
				"description": "Text"
			}
		],
		"description": "A marked rich text",
		"inheritance": "RichText",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "richTextPhoneNumber",
		"methods": [
			{
				"name": "text",
				"type": "RichText",
				"description": "Text"
			},
			{
				"name": "phone_number",
				"type": "string",
				"description": "Phone number"
			}
		],
		"description": "A rich text phone number",
		"inheritance": "RichText",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "richTextIcon",
		"methods": [
			{
				"name": "document",
				"type": "document",
				"description": "The image represented as a document. The image can be in GIF, JPEG or PNG format"
			},
			{
				"name": "width",
				"type": "int32",
				"description": "Width of a bounding box in which the image must be shown; 0 if unknown"
			},
			{
				"name": "height",
				"type": "int32",
				"description": "Height of a bounding box in which the image must be shown; 0 if unknown"
			}
		],
		"description": "A small image inside the text",
		"inheritance": "RichText",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "richTextReference",
		"methods": [
			{
				"name": "text",
				"type": "RichText",
				"description": "The text"
			},
			{
				"name": "anchor_name",
				"type": "string",
				"description": "The name of a richTextAnchor object, which is the first element of the target richTexts object"
			},
			{
				"name": "url",
				"type": "string",
				"description": "An HTTP URL, opening the reference"
			}
		],
		"description": "A reference to a richTexts object on the same page",
		"inheritance": "RichText",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "richTextAnchor",
		"methods": [
			{
				"name": "name",
				"type": "string",
				"description": "Anchor name"
			}
		],
		"description": "An anchor",
		"inheritance": "RichText",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "richTextAnchorLink",
		"methods": [
			{
				"name": "text",
				"type": "RichText",
				"description": "The link text"
			},
			{
				"name": "anchor_name",
				"type": "string",
				"description": "The anchor name. If the name is empty, the link must bring back to top"
			},
			{
				"name": "url",
				"type": "string",
				"description": "An HTTP URL, opening the anchor"
			}
		],
		"description": "A link to an anchor on the same page",
		"inheritance": "RichText",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "richTexts",
		"methods": [
			{
				"name": "texts",
				"type": "vector<RichText>",
				"description": "Texts"
			}
		],
		"description": "A concatenation of rich texts",
		"inheritance": "RichText",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockCaption",
		"methods": [
			{
				"name": "text",
				"type": "RichText",
				"description": "Content of the caption"
			},
			{
				"name": "credit",
				"type": "RichText",
				"description": "Block credit (like HTML tag <cite>)"
			}
		],
		"description": "Contains a caption of another block",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockListItem",
		"methods": [
			{
				"name": "label",
				"type": "string",
				"description": "Item label"
			},
			{
				"name": "page_blocks",
				"type": "vector<PageBlock>",
				"description": "Item blocks"
			}
		],
		"description": "Describes an item of a list page block",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "PageBlockHorizontalAlignment",
		"methods": null,
		"description": "Describes a horizontal alignment of a table cell content",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockHorizontalAlignmentLeft",
		"methods": null,
		"description": "The content must be left-aligned",
		"inheritance": "PageBlockHorizontalAlignment",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockHorizontalAlignmentCenter",
		"methods": null,
		"description": "The content must be center-aligned",
		"inheritance": "PageBlockHorizontalAlignment",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockHorizontalAlignmentRight",
		"methods": null,
		"description": "The content must be right-aligned",
		"inheritance": "PageBlockHorizontalAlignment",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "PageBlockVerticalAlignment",
		"methods": null,
		"description": "Describes a Vertical alignment of a table cell content",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockVerticalAlignmentTop",
		"methods": null,
		"description": "The content must be top-aligned",
		"inheritance": "PageBlockVerticalAlignment",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockVerticalAlignmentMiddle",
		"methods": null,
		"description": "The content must be middle-aligned",
		"inheritance": "PageBlockVerticalAlignment",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockVerticalAlignmentBottom",
		"methods": null,
		"description": "The content must be bottom-aligned",
		"inheritance": "PageBlockVerticalAlignment",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockTableCell",
		"methods": [
			{
				"name": "text",
				"type": "RichText",
				"description": "Cell text; may be null. If the text is null, then the cell must be invisible"
			},
			{
				"name": "is_header",
				"type": "Bool",
				"description": "True, if it is a header cell"
			},
			{
				"name": "colspan",
				"type": "int32",
				"description": "The number of columns the cell spans"
			},
			{
				"name": "rowspan",
				"type": "int32",
				"description": "The number of rows the cell spans"
			},
			{
				"name": "align",
				"type": "PageBlockHorizontalAlignment",
				"description": "Horizontal cell content alignment"
			},
			{
				"name": "valign",
				"type": "PageBlockVerticalAlignment",
				"description": "Vertical cell content alignment"
			}
		],
		"description": "Represents a cell of a table",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockRelatedArticle",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "Related article URL"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Article title; may be empty"
			},
			{
				"name": "description",
				"type": "string",
				"description": "Article description; may be empty"
			},
			{
				"name": "photo",
				"type": "photo",
				"description": "Article photo; may be null"
			},
			{
				"name": "author",
				"type": "string",
				"description": "Article author; may be empty"
			},
			{
				"name": "publish_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the article was published; 0 if unknown"
			}
		],
		"description": "Contains information about a related article",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "PageBlock",
		"methods": null,
		"description": "Describes a block of an instant view for a web page",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockTitle",
		"methods": [
			{
				"name": "title",
				"type": "RichText",
				"description": "Title"
			}
		],
		"description": "The title of a page",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockSubtitle",
		"methods": [
			{
				"name": "subtitle",
				"type": "RichText",
				"description": "Subtitle"
			}
		],
		"description": "The subtitle of a page",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockAuthorDate",
		"methods": [
			{
				"name": "author",
				"type": "RichText",
				"description": "Author"
			},
			{
				"name": "publish_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the article was published; 0 if unknown"
			}
		],
		"description": "The author and publishing date of a page",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockHeader",
		"methods": [
			{
				"name": "header",
				"type": "RichText",
				"description": "Header"
			}
		],
		"description": "A header",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockSubheader",
		"methods": [
			{
				"name": "subheader",
				"type": "RichText",
				"description": "Subheader"
			}
		],
		"description": "A subheader",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockKicker",
		"methods": [
			{
				"name": "kicker",
				"type": "RichText",
				"description": "Kicker"
			}
		],
		"description": "A kicker",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockParagraph",
		"methods": [
			{
				"name": "text",
				"type": "RichText",
				"description": "Paragraph text"
			}
		],
		"description": "A text paragraph",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockPreformatted",
		"methods": [
			{
				"name": "text",
				"type": "RichText",
				"description": "Paragraph text"
			},
			{
				"name": "language",
				"type": "string",
				"description": "Programming language for which the text needs to be formatted"
			}
		],
		"description": "A preformatted text paragraph",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockFooter",
		"methods": [
			{
				"name": "footer",
				"type": "RichText",
				"description": "Footer"
			}
		],
		"description": "The footer of a page",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockDivider",
		"methods": null,
		"description": "An empty block separating a page",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockAnchor",
		"methods": [
			{
				"name": "name",
				"type": "string",
				"description": "Name of the anchor"
			}
		],
		"description": "An invisible anchor on a page, which can be used in a URL to open the page from the specified anchor",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockList",
		"methods": [
			{
				"name": "items",
				"type": "vector<pageBlockListItem>",
				"description": "The items of the list"
			}
		],
		"description": "A list of data blocks",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockBlockQuote",
		"methods": [
			{
				"name": "text",
				"type": "RichText",
				"description": "Quote text"
			},
			{
				"name": "credit",
				"type": "RichText",
				"description": "Quote credit"
			}
		],
		"description": "A block quote",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockPullQuote",
		"methods": [
			{
				"name": "text",
				"type": "RichText",
				"description": "Quote text"
			},
			{
				"name": "credit",
				"type": "RichText",
				"description": "Quote credit"
			}
		],
		"description": "A pull quote",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockAnimation",
		"methods": [
			{
				"name": "animation",
				"type": "animation",
				"description": "Animation file; may be null"
			},
			{
				"name": "caption",
				"type": "pageBlockCaption",
				"description": "Animation caption"
			},
			{
				"name": "need_autoplay",
				"type": "Bool",
				"description": "True, if the animation must be played automatically"
			}
		],
		"description": "An animation",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockAudio",
		"methods": [
			{
				"name": "audio",
				"type": "audio",
				"description": "Audio file; may be null"
			},
			{
				"name": "caption",
				"type": "pageBlockCaption",
				"description": "Audio file caption"
			}
		],
		"description": "An audio file",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockPhoto",
		"methods": [
			{
				"name": "photo",
				"type": "photo",
				"description": "Photo file; may be null"
			},
			{
				"name": "caption",
				"type": "pageBlockCaption",
				"description": "Photo caption"
			},
			{
				"name": "url",
				"type": "string",
				"description": "URL that needs to be opened when the photo is clicked"
			}
		],
		"description": "A photo",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockVideo",
		"methods": [
			{
				"name": "video",
				"type": "video",
				"description": "Video file; may be null"
			},
			{
				"name": "caption",
				"type": "pageBlockCaption",
				"description": "Video caption"
			},
			{
				"name": "need_autoplay",
				"type": "Bool",
				"description": "True, if the video must be played automatically"
			},
			{
				"name": "is_looped",
				"type": "Bool",
				"description": "True, if the video must be looped"
			}
		],
		"description": "A video",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockVoiceNote",
		"methods": [
			{
				"name": "voice_note",
				"type": "voiceNote",
				"description": "Voice note; may be null"
			},
			{
				"name": "caption",
				"type": "pageBlockCaption",
				"description": "Voice note caption"
			}
		],
		"description": "A voice note",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockCover",
		"methods": [
			{
				"name": "cover",
				"type": "PageBlock",
				"description": "Cover"
			}
		],
		"description": "A page cover",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockEmbedded",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "URL of the embedded page, if available"
			},
			{
				"name": "html",
				"type": "string",
				"description": "HTML-markup of the embedded page"
			},
			{
				"name": "poster_photo",
				"type": "photo",
				"description": "Poster photo, if available; may be null"
			},
			{
				"name": "width",
				"type": "int32",
				"description": "Block width; 0 if unknown"
			},
			{
				"name": "height",
				"type": "int32",
				"description": "Block height; 0 if unknown"
			},
			{
				"name": "caption",
				"type": "pageBlockCaption",
				"description": "Block caption"
			},
			{
				"name": "is_full_width",
				"type": "Bool",
				"description": "True, if the block must be full width"
			},
			{
				"name": "allow_scrolling",
				"type": "Bool",
				"description": "True, if scrolling needs to be allowed"
			}
		],
		"description": "An embedded web page",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockEmbeddedPost",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "URL of the embedded post"
			},
			{
				"name": "author",
				"type": "string",
				"description": "Post author"
			},
			{
				"name": "author_photo",
				"type": "photo",
				"description": "Post author photo; may be null"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the post was created; 0 if unknown"
			},
			{
				"name": "page_blocks",
				"type": "vector<PageBlock>",
				"description": "Post content"
			},
			{
				"name": "caption",
				"type": "pageBlockCaption",
				"description": "Post caption"
			}
		],
		"description": "An embedded post",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockCollage",
		"methods": [
			{
				"name": "page_blocks",
				"type": "vector<PageBlock>",
				"description": "Collage item contents"
			},
			{
				"name": "caption",
				"type": "pageBlockCaption",
				"description": "Block caption"
			}
		],
		"description": "A collage",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockSlideshow",
		"methods": [
			{
				"name": "page_blocks",
				"type": "vector<PageBlock>",
				"description": "Slideshow item contents"
			},
			{
				"name": "caption",
				"type": "pageBlockCaption",
				"description": "Block caption"
			}
		],
		"description": "A slideshow",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockChatLink",
		"methods": [
			{
				"name": "title",
				"type": "string",
				"description": "Chat title"
			},
			{
				"name": "photo",
				"type": "chatPhotoInfo",
				"description": "Chat photo; may be null"
			},
			{
				"name": "accent_color_id",
				"type": "int32",
				"description": "Identifier of the accent color for chat title and background of chat photo"
			},
			{
				"name": "username",
				"type": "string",
				"description": "Chat username by which all other information about the chat can be resolved"
			}
		],
		"description": "A link to a chat",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockTable",
		"methods": [
			{
				"name": "caption",
				"type": "RichText",
				"description": "Table caption"
			},
			{
				"name": "cells",
				"type": "vector<vector<pageBlockTableCell>>",
				"description": "Table cells"
			},
			{
				"name": "is_bordered",
				"type": "Bool",
				"description": "True, if the table is bordered"
			},
			{
				"name": "is_striped",
				"type": "Bool",
				"description": "True, if the table is striped"
			}
		],
		"description": "A table",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockDetails",
		"methods": [
			{
				"name": "header",
				"type": "RichText",
				"description": "Always visible heading for the block"
			},
			{
				"name": "page_blocks",
				"type": "vector<PageBlock>",
				"description": "Block contents"
			},
			{
				"name": "is_open",
				"type": "Bool",
				"description": "True, if the block is open by default"
			}
		],
		"description": "A collapsible block",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockRelatedArticles",
		"methods": [
			{
				"name": "header",
				"type": "RichText",
				"description": "Block header"
			},
			{
				"name": "articles",
				"type": "vector<pageBlockRelatedArticle>",
				"description": "List of related articles"
			}
		],
		"description": "Related articles",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pageBlockMap",
		"methods": [
			{
				"name": "location",
				"type": "location",
				"description": "Location of the map center"
			},
			{
				"name": "zoom",
				"type": "int32",
				"description": "Map zoom level"
			},
			{
				"name": "width",
				"type": "int32",
				"description": "Map width"
			},
			{
				"name": "height",
				"type": "int32",
				"description": "Map height"
			},
			{
				"name": "caption",
				"type": "pageBlockCaption",
				"description": "Block caption"
			}
		],
		"description": "A map",
		"inheritance": "PageBlock",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "webPageInstantView",
		"methods": [
			{
				"name": "page_blocks",
				"type": "vector<PageBlock>",
				"description": "Content of the instant view page"
			},
			{
				"name": "view_count",
				"type": "int32",
				"description": "Number of the instant view views; 0 if unknown"
			},
			{
				"name": "version",
				"type": "int32",
				"description": "Version of the instant view; currently, can be 1 or 2"
			},
			{
				"name": "is_rtl",
				"type": "Bool",
				"description": "True, if the instant view must be shown from right to left"
			},
			{
				"name": "is_full",
				"type": "Bool",
				"description": "True, if the instant view contains the full page. A network request might be needed to get the full instant view"
			},
			{
				"name": "feedback_link",
				"type": "InternalLinkType",
				"description": "An internal link to be opened to leave feedback about the instant view"
			}
		],
		"description": "Describes an instant view page for a web page",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "LinkPreviewAlbumMedia",
		"methods": null,
		"description": "Describes a media from a link preview album",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewAlbumMediaPhoto",
		"methods": [
			{
				"name": "photo",
				"type": "photo",
				"description": "Photo description"
			}
		],
		"description": "The media is a photo",
		"inheritance": "LinkPreviewAlbumMedia",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewAlbumMediaVideo",
		"methods": [
			{
				"name": "video",
				"type": "video",
				"description": "Video description"
			}
		],
		"description": "The media is a video",
		"inheritance": "LinkPreviewAlbumMedia",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "LinkPreviewType",
		"methods": null,
		"description": "Describes type of link preview",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeAlbum",
		"methods": [
			{
				"name": "media",
				"type": "vector<LinkPreviewAlbumMedia>",
				"description": "The list of album media"
			},
			{
				"name": "caption",
				"type": "string",
				"description": "Album caption"
			}
		],
		"description": "The link is a link to a media album consisting of photos and videos",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeAnimation",
		"methods": [
			{
				"name": "animation",
				"type": "animation",
				"description": "The animation"
			}
		],
		"description": "The link is a link to an animation",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeApp",
		"methods": [
			{
				"name": "photo",
				"type": "photo",
				"description": "Photo for the app"
			}
		],
		"description": "The link is a link to an app at App Store or Google Play",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeArticle",
		"methods": [
			{
				"name": "photo",
				"type": "photo",
				"description": "Article's main photo; may be null"
			}
		],
		"description": "The link is a link to a web site",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeAudio",
		"methods": [
			{
				"name": "audio",
				"type": "audio",
				"description": "The audio description"
			}
		],
		"description": "The link is a link to an audio",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeBackground",
		"methods": [
			{
				"name": "document",
				"type": "document",
				"description": "Document with the background; may be null for filled backgrounds"
			},
			{
				"name": "background_type",
				"type": "BackgroundType",
				"description": "Type of the background; may be null if unknown"
			}
		],
		"description": "The link is a link to a background. Link preview title and description are available only for filled backgrounds",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeChannelBoost",
		"methods": [
			{
				"name": "photo",
				"type": "chatPhoto",
				"description": "Photo of the chat; may be null"
			}
		],
		"description": "The link is a link to boost a channel chat",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeChat",
		"methods": [
			{
				"name": "type",
				"type": "InviteLinkChatType",
				"description": "Type of the chat"
			},
			{
				"name": "photo",
				"type": "chatPhoto",
				"description": "Photo of the chat; may be null"
			},
			{
				"name": "creates_join_request",
				"type": "Bool",
				"description": "True, if the link only creates join request"
			}
		],
		"description": "The link is a link to a chat",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeDocument",
		"methods": [
			{
				"name": "document",
				"type": "document",
				"description": "The document description"
			}
		],
		"description": "The link is a link to a general file",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeEmbeddedAnimationPlayer",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "URL of the external animation player"
			},
			{
				"name": "thumbnail",
				"type": "photo",
				"description": "Thumbnail of the animation; may be null if unknown"
			},
			{
				"name": "duration",
				"type": "int32",
				"description": "Duration of the animation, in seconds"
			},
			{
				"name": "width",
				"type": "int32",
				"description": "Expected width of the embedded player"
			},
			{
				"name": "height",
				"type": "int32",
				"description": "Expected height of the embedded player"
			}
		],
		"description": "The link is a link to an animation player",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeEmbeddedAudioPlayer",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "URL of the external audio player"
			},
			{
				"name": "thumbnail",
				"type": "photo",
				"description": "Thumbnail of the audio; may be null if unknown"
			},
			{
				"name": "duration",
				"type": "int32",
				"description": "Duration of the audio, in seconds"
			},
			{
				"name": "width",
				"type": "int32",
				"description": "Expected width of the embedded player"
			},
			{
				"name": "height",
				"type": "int32",
				"description": "Expected height of the embedded player"
			}
		],
		"description": "The link is a link to an audio player",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeEmbeddedVideoPlayer",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "URL of the external video player"
			},
			{
				"name": "thumbnail",
				"type": "photo",
				"description": "Thumbnail of the video; may be null if unknown"
			},
			{
				"name": "duration",
				"type": "int32",
				"description": "Duration of the video, in seconds"
			},
			{
				"name": "width",
				"type": "int32",
				"description": "Expected width of the embedded player"
			},
			{
				"name": "height",
				"type": "int32",
				"description": "Expected height of the embedded player"
			}
		],
		"description": "The link is a link to a video player",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeExternalAudio",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "URL of the audio file"
			},
			{
				"name": "mime_type",
				"type": "string",
				"description": "MIME type of the audio file"
			},
			{
				"name": "duration",
				"type": "int32",
				"description": "Duration of the audio, in seconds; 0 if unknown"
			}
		],
		"description": "The link is a link to an audio file",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeExternalVideo",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "URL of the video file"
			},
			{
				"name": "mime_type",
				"type": "string",
				"description": "MIME type of the video file"
			},
			{
				"name": "width",
				"type": "int32",
				"description": "Expected width of the video preview; 0 if unknown"
			},
			{
				"name": "height",
				"type": "int32",
				"description": "Expected height of the video preview; 0 if unknown"
			},
			{
				"name": "duration",
				"type": "int32",
				"description": "Duration of the video, in seconds; 0 if unknown"
			}
		],
		"description": "The link is a link to a video file",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeInvoice",
		"methods": null,
		"description": "The link is a link to an invoice",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeMessage",
		"methods": null,
		"description": "The link is a link to a text or a poll Telegram message",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypePhoto",
		"methods": [
			{
				"name": "photo",
				"type": "photo",
				"description": "The photo"
			}
		],
		"description": "The link is a link to a photo",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypePremiumGiftCode",
		"methods": null,
		"description": "The link is a link to a Telegram Premium gift code",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeShareableChatFolder",
		"methods": null,
		"description": "The link is a link to a shareable chat folder",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeSticker",
		"methods": [
			{
				"name": "sticker",
				"type": "sticker",
				"description": "The sticker. It can be an arbitrary WEBP image and can have dimensions bigger than 512"
			}
		],
		"description": "The link is a link to a sticker",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeStickerSet",
		"methods": [
			{
				"name": "stickers",
				"type": "vector<sticker>",
				"description": "Up to 4 stickers from the sticker set"
			}
		],
		"description": "The link is a link to a sticker set",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeStory",
		"methods": [
			{
				"name": "story_sender_chat_id",
				"type": "int53",
				"description": "The identifier of the chat that posted the story"
			},
			{
				"name": "story_id",
				"type": "int32",
				"description": "Story identifier"
			}
		],
		"description": "The link is a link to a story. Link preview description is unavailable",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeSupergroupBoost",
		"methods": [
			{
				"name": "photo",
				"type": "chatPhoto",
				"description": "Photo of the chat; may be null"
			}
		],
		"description": "The link is a link to boost a supergroup chat",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeTheme",
		"methods": [
			{
				"name": "documents",
				"type": "vector<document>",
				"description": "The list of files with theme description"
			},
			{
				"name": "settings",
				"type": "themeSettings",
				"description": "Settings for the cloud theme; may be null if unknown"
			}
		],
		"description": "The link is a link to a cloud theme. TDLib has no theme support yet",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeUnsupported",
		"methods": null,
		"description": "The link preview type is unsupported yet",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeUpgradedGift",
		"methods": [
			{
				"name": "gift",
				"type": "upgradedGift",
				"description": "The gift"
			}
		],
		"description": "The link is a link to an upgraded gift",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeUser",
		"methods": [
			{
				"name": "photo",
				"type": "chatPhoto",
				"description": "Photo of the user; may be null if none"
			},
			{
				"name": "is_bot",
				"type": "Bool",
				"description": "True, if the user is a bot"
			}
		],
		"description": "The link is a link to a user",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeVideo",
		"methods": [
			{
				"name": "video",
				"type": "video",
				"description": "The video description"
			},
			{
				"name": "cover",
				"type": "photo",
				"description": "Cover of the video; may be null if none"
			},
			{
				"name": "start_timestamp",
				"type": "int32",
				"description": "Timestamp from which the video playing must start, in seconds"
			}
		],
		"description": "The link is a link to a video",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeVideoChat",
		"methods": [
			{
				"name": "photo",
				"type": "chatPhoto",
				"description": "Photo of the chat with the video chat; may be null if none"
			},
			{
				"name": "is_live_stream",
				"type": "Bool",
				"description": "True, if the video chat is expected to be a live stream in a channel or a broadcast group"
			}
		],
		"description": "The link is a link to a video chat",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeVideoNote",
		"methods": [
			{
				"name": "video_note",
				"type": "videoNote",
				"description": "The video note"
			}
		],
		"description": "The link is a link to a video note message",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeVoiceNote",
		"methods": [
			{
				"name": "voice_note",
				"type": "voiceNote",
				"description": "The voice note"
			}
		],
		"description": "The link is a link to a voice note message",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreviewTypeWebApp",
		"methods": [
			{
				"name": "photo",
				"type": "photo",
				"description": "Web App photo; may be null if none"
			}
		],
		"description": "The link is a link to a Web App",
		"inheritance": "LinkPreviewType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "linkPreview",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "Original URL of the link"
			},
			{
				"name": "display_url",
				"type": "string",
				"description": "URL to display"
			},
			{
				"name": "site_name",
				"type": "string",
				"description": "Short name of the site (e.g., Google Docs, App Store)"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Title of the content"
			},
			{
				"name": "description",
				"type": "formattedText",
				"description": "Description of the content"
			},
			{
				"name": "author",
				"type": "string",
				"description": "Author of the content"
			},
			{
				"name": "type",
				"type": "LinkPreviewType",
				"description": "Type of the link preview"
			},
			{
				"name": "has_large_media",
				"type": "Bool",
				"description": "True, if size of media in the preview can be changed"
			},
			{
				"name": "show_large_media",
				"type": "Bool",
				"description": "True, if large media preview must be shown; otherwise, the media preview must be shown small and only the first frame must be shown for videos"
			},
			{
				"name": "show_media_above_description",
				"type": "Bool",
				"description": "True, if media must be shown above link preview description; otherwise, the media must be shown below the description"
			},
			{
				"name": "skip_confirmation",
				"type": "Bool",
				"description": "True, if there is no need to show an ordinary open URL confirmation, when opening the URL from the preview, because the URL is shown in the message text in clear"
			},
			{
				"name": "show_above_text",
				"type": "Bool",
				"description": "True, if the link preview must be shown above message text; otherwise, the link preview must be shown below the message text"
			},
			{
				"name": "instant_view_version",
				"type": "int32",
				"description": "Version of instant view (currently, can be 1 or 2) for the web page; 0 if none"
			}
		],
		"description": "Describes a link preview",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "countryInfo",
		"methods": [
			{
				"name": "country_code",
				"type": "string",
				"description": "A two-letter ISO 3166-1 alpha-2 country code"
			},
			{
				"name": "name",
				"type": "string",
				"description": "Native name of the country"
			},
			{
				"name": "english_name",
				"type": "string",
				"description": "English name of the country"
			},
			{
				"name": "is_hidden",
				"type": "Bool",
				"description": "True, if the country must be hidden from the list of all countries"
			},
			{
				"name": "calling_codes",
				"type": "vector<string>",
				"description": "List of country calling codes"
			}
		],
		"description": "Contains information about a country",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "countries",
		"methods": [
			{
				"name": "countries",
				"type": "vector<countryInfo>",
				"description": "The list of countries"
			}
		],
		"description": "Contains information about countries",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "phoneNumberInfo",
		"methods": [
			{
				"name": "country",
				"type": "countryInfo",
				"description": "Information about the country to which the phone number belongs; may be null"
			},
			{
				"name": "country_calling_code",
				"type": "string",
				"description": "The part of the phone number denoting country calling code or its part"
			},
			{
				"name": "formatted_phone_number",
				"type": "string",
				"description": "The phone number without country calling code formatted accordingly to local rules. Expected digits are returned as '-', but even more digits might be entered by the user"
			},
			{
				"name": "is_anonymous",
				"type": "Bool",
				"description": "True, if the phone number was bought at https://fragment.com and isn't tied to a SIM card. Information about the phone number can be received using getCollectibleItemInfo"
			}
		],
		"description": "Contains information about a phone number",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "CollectibleItemType",
		"methods": null,
		"description": "Describes a collectible item that can be purchased at https://fragment.com",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "collectibleItemTypeUsername",
		"methods": [
			{
				"name": "username",
				"type": "string",
				"description": "The username"
			}
		],
		"description": "A username",
		"inheritance": "CollectibleItemType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "collectibleItemTypePhoneNumber",
		"methods": [
			{
				"name": "phone_number",
				"type": "string",
				"description": "The phone number"
			}
		],
		"description": "A phone number",
		"inheritance": "CollectibleItemType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "collectibleItemInfo",
		"methods": [
			{
				"name": "purchase_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the item was purchased"
			},
			{
				"name": "currency",
				"type": "string",
				"description": "Currency for the paid amount"
			},
			{
				"name": "amount",
				"type": "int53",
				"description": "The paid amount, in the smallest units of the currency"
			},
			{
				"name": "cryptocurrency",
				"type": "string",
				"description": "Cryptocurrency used to pay for the item"
			},
			{
				"name": "cryptocurrency_amount",
				"type": "int64",
				"description": "The paid amount, in the smallest units of the cryptocurrency"
			},
			{
				"name": "url",
				"type": "string",
				"description": "Individual URL for the item on https://fragment.com"
			}
		],
		"description": "Contains information about a collectible item and its last purchase",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "bankCardActionOpenUrl",
		"methods": [
			{
				"name": "text",
				"type": "string",
				"description": "Action text"
			},
			{
				"name": "url",
				"type": "string",
				"description": "The URL to be opened"
			}
		],
		"description": "Describes an action associated with a bank card number",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "bankCardInfo",
		"methods": [
			{
				"name": "title",
				"type": "string",
				"description": "Title of the bank card description"
			},
			{
				"name": "actions",
				"type": "vector<bankCardActionOpenUrl>",
				"description": "Actions that can be done with the bank card number"
			}
		],
		"description": "Information about a bank card",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "address",
		"methods": [
			{
				"name": "country_code",
				"type": "string",
				"description": "A two-letter ISO 3166-1 alpha-2 country code"
			},
			{
				"name": "state",
				"type": "string",
				"description": "State, if applicable"
			},
			{
				"name": "city",
				"type": "string",
				"description": "City"
			},
			{
				"name": "street_line1",
				"type": "string",
				"description": "First line of the address"
			},
			{
				"name": "street_line2",
				"type": "string",
				"description": "Second line of the address"
			},
			{
				"name": "postal_code",
				"type": "string",
				"description": "Address postal code"
			}
		],
		"description": "Describes an address",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "locationAddress",
		"methods": [
			{
				"name": "country_code",
				"type": "string",
				"description": "A two-letter ISO 3166-1 alpha-2 country code"
			},
			{
				"name": "state",
				"type": "string",
				"description": "State, if applicable; empty if unknown"
			},
			{
				"name": "city",
				"type": "string",
				"description": "City; empty if unknown"
			},
			{
				"name": "street",
				"type": "string",
				"description": "The address; empty if unknown"
			}
		],
		"description": "Describes an address of a location",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "labeledPricePart",
		"methods": [
			{
				"name": "label",
				"type": "string",
				"description": "Label for this portion of the product price"
			},
			{
				"name": "amount",
				"type": "int53",
				"description": "Currency amount in the smallest units of the currency"
			}
		],
		"description": "Portion of the price of a product (e.g., \"delivery cost\", \"tax amount\")",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "invoice",
		"methods": [
			{
				"name": "currency",
				"type": "string",
				"description": "ISO 4217 currency code"
			},
			{
				"name": "price_parts",
				"type": "vector<labeledPricePart>",
				"description": "A list of objects used to calculate the total price of the product"
			},
			{
				"name": "subscription_period",
				"type": "int32",
				"description": "The number of seconds between consecutive Telegram Star debiting for subscription invoices; 0 if the invoice doesn't create subscription"
			},
			{
				"name": "max_tip_amount",
				"type": "int53",
				"description": "The maximum allowed amount of tip in the smallest units of the currency"
			},
			{
				"name": "suggested_tip_amounts",
				"type": "vector<int53>",
				"description": "Suggested amounts of tip in the smallest units of the currency"
			},
			{
				"name": "recurring_payment_terms_of_service_url",
				"type": "string",
				"description": "An HTTP URL with terms of service for recurring payments. If non-empty, the invoice payment will result in recurring payments and the user must accept the terms of service before allowed to pay"
			},
			{
				"name": "terms_of_service_url",
				"type": "string",
				"description": "An HTTP URL with terms of service for non-recurring payments. If non-empty, then the user must accept the terms of service before allowed to pay"
			},
			{
				"name": "is_test",
				"type": "Bool",
				"description": "True, if the payment is a test payment"
			},
			{
				"name": "need_name",
				"type": "Bool",
				"description": "True, if the user's name is needed for payment"
			},
			{
				"name": "need_phone_number",
				"type": "Bool",
				"description": "True, if the user's phone number is needed for payment"
			},
			{
				"name": "need_email_address",
				"type": "Bool",
				"description": "True, if the user's email address is needed for payment"
			},
			{
				"name": "need_shipping_address",
				"type": "Bool",
				"description": "True, if the user's shipping address is needed for payment"
			},
			{
				"name": "send_phone_number_to_provider",
				"type": "Bool",
				"description": "True, if the user's phone number will be sent to the provider"
			},
			{
				"name": "send_email_address_to_provider",
				"type": "Bool",
				"description": "True, if the user's email address will be sent to the provider"
			},
			{
				"name": "is_flexible",
				"type": "Bool",
				"description": "True, if the total price depends on the shipping method"
			}
		],
		"description": "Product invoice",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "orderInfo",
		"methods": [
			{
				"name": "name",
				"type": "string",
				"description": "Name of the user"
			},
			{
				"name": "phone_number",
				"type": "string",
				"description": "Phone number of the user"
			},
			{
				"name": "email_address",
				"type": "string",
				"description": "Email address of the user"
			},
			{
				"name": "shipping_address",
				"type": "address",
				"description": "Shipping address for this order; may be null"
			}
		],
		"description": "Order information",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "shippingOption",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Shipping option identifier"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Option title"
			},
			{
				"name": "price_parts",
				"type": "vector<labeledPricePart>",
				"description": "A list of objects used to calculate the total shipping costs"
			}
		],
		"description": "One shipping option",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "savedCredentials",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the saved credentials"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Title of the saved credentials"
			}
		],
		"description": "Contains information about saved payment credentials",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "InputCredentials",
		"methods": null,
		"description": "Contains information about the payment method chosen by the user",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputCredentialsSaved",
		"methods": [
			{
				"name": "saved_credentials_id",
				"type": "string",
				"description": "Identifier of the saved credentials"
			}
		],
		"description": "Applies if a user chooses some previously saved payment credentials. To use their previously saved credentials, the user must have a valid temporary password",
		"inheritance": "InputCredentials",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputCredentialsNew",
		"methods": [
			{
				"name": "data",
				"type": "string",
				"description": "JSON-encoded data with the credential identifier from the payment provider"
			},
			{
				"name": "allow_save",
				"type": "Bool",
				"description": "True, if the credential identifier can be saved on the server side"
			}
		],
		"description": "Applies if a user enters new credentials on a payment provider website",
		"inheritance": "InputCredentials",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputCredentialsApplePay",
		"methods": [
			{
				"name": "data",
				"type": "string",
				"description": "JSON-encoded data with the credential identifier"
			}
		],
		"description": "Applies if a user enters new credentials using Apple Pay",
		"inheritance": "InputCredentials",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputCredentialsGooglePay",
		"methods": [
			{
				"name": "data",
				"type": "string",
				"description": "JSON-encoded data with the credential identifier"
			}
		],
		"description": "Applies if a user enters new credentials using Google Pay",
		"inheritance": "InputCredentials",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "PaymentProvider",
		"methods": null,
		"description": "Contains information about a payment provider",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "paymentProviderSmartGlocal",
		"methods": [
			{
				"name": "public_token",
				"type": "string",
				"description": "Public payment token"
			},
			{
				"name": "tokenize_url",
				"type": "string",
				"description": "URL for sending card tokenization requests"
			}
		],
		"description": "Smart Glocal payment provider",
		"inheritance": "PaymentProvider",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "paymentProviderStripe",
		"methods": [
			{
				"name": "publishable_key",
				"type": "string",
				"description": "Stripe API publishable key"
			},
			{
				"name": "need_country",
				"type": "Bool",
				"description": "True, if the user country must be provided"
			},
			{
				"name": "need_postal_code",
				"type": "Bool",
				"description": "True, if the user ZIP/postal code must be provided"
			},
			{
				"name": "need_cardholder_name",
				"type": "Bool",
				"description": "True, if the cardholder name must be provided"
			}
		],
		"description": "Stripe payment provider",
		"inheritance": "PaymentProvider",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "paymentProviderOther",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "Payment form URL"
			}
		],
		"description": "Some other payment provider, for which a web payment form must be shown",
		"inheritance": "PaymentProvider",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "paymentOption",
		"methods": [
			{
				"name": "title",
				"type": "string",
				"description": "Title for the payment option"
			},
			{
				"name": "url",
				"type": "string",
				"description": "Payment form URL to be opened in a web view"
			}
		],
		"description": "Describes an additional payment option",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "PaymentFormType",
		"methods": null,
		"description": "Describes type of payment form",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "paymentFormTypeRegular",
		"methods": [
			{
				"name": "invoice",
				"type": "invoice",
				"description": "Full information about the invoice"
			},
			{
				"name": "payment_provider_user_id",
				"type": "int53",
				"description": "User identifier of the payment provider bot"
			},
			{
				"name": "payment_provider",
				"type": "PaymentProvider",
				"description": "Information about the payment provider"
			},
			{
				"name": "additional_payment_options",
				"type": "vector<paymentOption>",
				"description": "The list of additional payment options"
			},
			{
				"name": "saved_order_info",
				"type": "orderInfo",
				"description": "Saved server-side order information; may be null"
			},
			{
				"name": "saved_credentials",
				"type": "vector<savedCredentials>",
				"description": "The list of saved payment credentials"
			},
			{
				"name": "can_save_credentials",
				"type": "Bool",
				"description": "True, if the user can choose to save credentials"
			},
			{
				"name": "need_password",
				"type": "Bool",
				"description": "True, if the user will be able to save credentials, if sets up a 2-step verification password"
			}
		],
		"description": "The payment form is for a regular payment",
		"inheritance": "PaymentFormType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "paymentFormTypeStars",
		"methods": [
			{
				"name": "star_count",
				"type": "int53",
				"description": "Number of Telegram Stars that will be paid"
			}
		],
		"description": "The payment form is for a payment in Telegram Stars",
		"inheritance": "PaymentFormType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "paymentFormTypeStarSubscription",
		"methods": [
			{
				"name": "pricing",
				"type": "starSubscriptionPricing",
				"description": "Information about subscription plan"
			}
		],
		"description": "The payment form is for a payment in Telegram Stars for subscription",
		"inheritance": "PaymentFormType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "paymentForm",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "The payment form identifier"
			},
			{
				"name": "type",
				"type": "PaymentFormType",
				"description": "Type of the payment form"
			},
			{
				"name": "seller_bot_user_id",
				"type": "int53",
				"description": "User identifier of the seller bot"
			},
			{
				"name": "product_info",
				"type": "productInfo",
				"description": "Information about the product"
			}
		],
		"description": "Contains information about an invoice payment form",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "validatedOrderInfo",
		"methods": [
			{
				"name": "order_info_id",
				"type": "string",
				"description": "Temporary identifier of the order information"
			},
			{
				"name": "shipping_options",
				"type": "vector<shippingOption>",
				"description": "Available shipping options"
			}
		],
		"description": "Contains a temporary identifier of validated order information, which is stored for one hour, and the available shipping options",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "paymentResult",
		"methods": [
			{
				"name": "success",
				"type": "Bool",
				"description": "True, if the payment request was successful; otherwise, the verification_url will be non-empty"
			},
			{
				"name": "verification_url",
				"type": "string",
				"description": "URL for additional payment credentials verification"
			}
		],
		"description": "Contains the result of a payment request",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "PaymentReceiptType",
		"methods": null,
		"description": "Describes type of successful payment",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "paymentReceiptTypeRegular",
		"methods": [
			{
				"name": "payment_provider_user_id",
				"type": "int53",
				"description": "User identifier of the payment provider bot"
			},
			{
				"name": "invoice",
				"type": "invoice",
				"description": "Information about the invoice"
			},
			{
				"name": "order_info",
				"type": "orderInfo",
				"description": "Order information; may be null"
			},
			{
				"name": "shipping_option",
				"type": "shippingOption",
				"description": "Chosen shipping option; may be null"
			},
			{
				"name": "credentials_title",
				"type": "string",
				"description": "Title of the saved credentials chosen by the buyer"
			},
			{
				"name": "tip_amount",
				"type": "int53",
				"description": "The amount of tip chosen by the buyer in the smallest units of the currency"
			}
		],
		"description": "The payment was done using a third-party payment provider",
		"inheritance": "PaymentReceiptType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "paymentReceiptTypeStars",
		"methods": [
			{
				"name": "star_count",
				"type": "int53",
				"description": "Number of Telegram Stars that were paid"
			},
			{
				"name": "transaction_id",
				"type": "string",
				"description": "Unique identifier of the transaction that can be used to dispute it"
			}
		],
		"description": "The payment was done using Telegram Stars",
		"inheritance": "PaymentReceiptType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "paymentReceipt",
		"methods": [
			{
				"name": "product_info",
				"type": "productInfo",
				"description": "Information about the product"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the payment was made"
			},
			{
				"name": "seller_bot_user_id",
				"type": "int53",
				"description": "User identifier of the seller bot"
			},
			{
				"name": "type",
				"type": "PaymentReceiptType",
				"description": "Type of the payment receipt"
			}
		],
		"description": "Contains information about a successful payment",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "InputInvoice",
		"methods": null,
		"description": "Describes an invoice to process",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputInvoiceMessage",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier of the message"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Message identifier. Use messageProperties.can_be_paid to check whether the message can be used in the method"
			}
		],
		"description": "An invoice from a message of the type messageInvoice or paid media purchase from messagePaidMedia",
		"inheritance": "InputInvoice",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputInvoiceName",
		"methods": [
			{
				"name": "name",
				"type": "string",
				"description": "Name of the invoice"
			}
		],
		"description": "An invoice from a link of the type internalLinkTypeInvoice",
		"inheritance": "InputInvoice",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputInvoiceTelegram",
		"methods": [
			{
				"name": "purpose",
				"type": "TelegramPaymentPurpose",
				"description": "Transaction purpose"
			}
		],
		"description": "An invoice for a payment toward Telegram; must not be used in the in-store apps",
		"inheritance": "InputInvoice",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "PaidMedia",
		"methods": null,
		"description": "Describes a paid media",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "paidMediaPreview",
		"methods": [
			{
				"name": "width",
				"type": "int32",
				"description": "Media width; 0 if unknown"
			},
			{
				"name": "height",
				"type": "int32",
				"description": "Media height; 0 if unknown"
			},
			{
				"name": "duration",
				"type": "int32",
				"description": "Media duration, in seconds; 0 if unknown"
			},
			{
				"name": "minithumbnail",
				"type": "minithumbnail",
				"description": "Media minithumbnail; may be null"
			}
		],
		"description": "The media is hidden until the invoice is paid",
		"inheritance": "PaidMedia",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "paidMediaPhoto",
		"methods": [
			{
				"name": "photo",
				"type": "photo",
				"description": "The photo"
			}
		],
		"description": "The media is a photo",
		"inheritance": "PaidMedia",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "paidMediaVideo",
		"methods": [
			{
				"name": "video",
				"type": "video",
				"description": "The video"
			},
			{
				"name": "cover",
				"type": "photo",
				"description": "Cover of the video; may be null if none"
			},
			{
				"name": "start_timestamp",
				"type": "int32",
				"description": "Timestamp from which the video playing must start, in seconds"
			}
		],
		"description": "The media is a video",
		"inheritance": "PaidMedia",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "paidMediaUnsupported",
		"methods": null,
		"description": "The media is unsupported",
		"inheritance": "PaidMedia",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "giveawayParameters",
		"methods": [
			{
				"name": "boosted_chat_id",
				"type": "int53",
				"description": "Identifier of the supergroup or channel chat, which will be automatically boosted by the winners of the giveaway for duration of the Telegram Premium subscription, or for the specified time. If the chat is a channel, then can_post_messages right is required in the channel, otherwise, the user must be an administrator in the supergroup"
			},
			{
				"name": "additional_chat_ids",
				"type": "vector<int53>",
				"description": "Identifiers of other supergroup or channel chats that must be subscribed by the users to be eligible for the giveaway. There can be up to getOption(\"giveaway_additional_chat_count_max\") additional chats"
			},
			{
				"name": "winners_selection_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the giveaway is expected to be performed; must be 60-getOption(\"giveaway_duration_max\") seconds in the future in scheduled giveaways"
			},
			{
				"name": "only_new_members",
				"type": "Bool",
				"description": "True, if only new members of the chats will be eligible for the giveaway"
			},
			{
				"name": "has_public_winners",
				"type": "Bool",
				"description": "True, if the list of winners of the giveaway will be available to everyone"
			},
			{
				"name": "country_codes",
				"type": "vector<string>",
				"description": "The list of two-letter ISO 3166-1 alpha-2 codes of countries, users from which will be eligible for the giveaway. If empty, then all users can participate in the giveaway. There can be up to getOption(\"giveaway_country_count_max\") chosen countries. Users with phone number that was bought at https://fragment.com can participate in any giveaway and the country code \"FT\" must not be specified in the list"
			},
			{
				"name": "prize_description",
				"type": "string",
				"description": "Additional description of the giveaway prize; 0-128 characters"
			}
		],
		"description": "Describes parameters of a giveaway",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "datedFile",
		"methods": [
			{
				"name": "file",
				"type": "file",
				"description": "The file"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the file was uploaded"
			}
		],
		"description": "File with the date it was uploaded",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "PassportElementType",
		"methods": null,
		"description": "Contains the type of Telegram Passport element",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementTypePersonalDetails",
		"methods": null,
		"description": "A Telegram Passport element containing the user's personal details",
		"inheritance": "PassportElementType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementTypePassport",
		"methods": null,
		"description": "A Telegram Passport element containing the user's passport",
		"inheritance": "PassportElementType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementTypeDriverLicense",
		"methods": null,
		"description": "A Telegram Passport element containing the user's driver license",
		"inheritance": "PassportElementType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementTypeIdentityCard",
		"methods": null,
		"description": "A Telegram Passport element containing the user's identity card",
		"inheritance": "PassportElementType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementTypeInternalPassport",
		"methods": null,
		"description": "A Telegram Passport element containing the user's internal passport",
		"inheritance": "PassportElementType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementTypeAddress",
		"methods": null,
		"description": "A Telegram Passport element containing the user's address",
		"inheritance": "PassportElementType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementTypeUtilityBill",
		"methods": null,
		"description": "A Telegram Passport element containing the user's utility bill",
		"inheritance": "PassportElementType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementTypeBankStatement",
		"methods": null,
		"description": "A Telegram Passport element containing the user's bank statement",
		"inheritance": "PassportElementType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementTypeRentalAgreement",
		"methods": null,
		"description": "A Telegram Passport element containing the user's rental agreement",
		"inheritance": "PassportElementType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementTypePassportRegistration",
		"methods": null,
		"description": "A Telegram Passport element containing the registration page of the user's passport",
		"inheritance": "PassportElementType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementTypeTemporaryRegistration",
		"methods": null,
		"description": "A Telegram Passport element containing the user's temporary registration",
		"inheritance": "PassportElementType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementTypePhoneNumber",
		"methods": null,
		"description": "A Telegram Passport element containing the user's phone number",
		"inheritance": "PassportElementType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementTypeEmailAddress",
		"methods": null,
		"description": "A Telegram Passport element containing the user's email address",
		"inheritance": "PassportElementType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "date",
		"methods": [
			{
				"name": "day",
				"type": "int32",
				"description": "Day of the month; 1-31"
			},
			{
				"name": "month",
				"type": "int32",
				"description": "Month; 1-12"
			},
			{
				"name": "year",
				"type": "int32",
				"description": "Year; 1-9999"
			}
		],
		"description": "Represents a date according to the Gregorian calendar",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "personalDetails",
		"methods": [
			{
				"name": "first_name",
				"type": "string",
				"description": "First name of the user written in English; 1-255 characters"
			},
			{
				"name": "middle_name",
				"type": "string",
				"description": "Middle name of the user written in English; 0-255 characters"
			},
			{
				"name": "last_name",
				"type": "string",
				"description": "Last name of the user written in English; 1-255 characters"
			},
			{
				"name": "native_first_name",
				"type": "string",
				"description": "Native first name of the user; 1-255 characters"
			},
			{
				"name": "native_middle_name",
				"type": "string",
				"description": "Native middle name of the user; 0-255 characters"
			},
			{
				"name": "native_last_name",
				"type": "string",
				"description": "Native last name of the user; 1-255 characters"
			},
			{
				"name": "birthdate",
				"type": "date",
				"description": "Birthdate of the user"
			},
			{
				"name": "gender",
				"type": "string",
				"description": "Gender of the user, \"male\" or \"female\""
			},
			{
				"name": "country_code",
				"type": "string",
				"description": "A two-letter ISO 3166-1 alpha-2 country code of the user's country"
			},
			{
				"name": "residence_country_code",
				"type": "string",
				"description": "A two-letter ISO 3166-1 alpha-2 country code of the user's residence country"
			}
		],
		"description": "Contains the user's personal details",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "identityDocument",
		"methods": [
			{
				"name": "number",
				"type": "string",
				"description": "Document number; 1-24 characters"
			},
			{
				"name": "expiration_date",
				"type": "date",
				"description": "Document expiration date; may be null if not applicable"
			},
			{
				"name": "front_side",
				"type": "datedFile",
				"description": "Front side of the document"
			},
			{
				"name": "reverse_side",
				"type": "datedFile",
				"description": "Reverse side of the document; only for driver license and identity card; may be null"
			},
			{
				"name": "selfie",
				"type": "datedFile",
				"description": "Selfie with the document; may be null"
			},
			{
				"name": "translation",
				"type": "vector<datedFile>",
				"description": "List of files containing a certified English translation of the document"
			}
		],
		"description": "An identity document",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputIdentityDocument",
		"methods": [
			{
				"name": "number",
				"type": "string",
				"description": "Document number; 1-24 characters"
			},
			{
				"name": "expiration_date",
				"type": "date",
				"description": "Document expiration date; pass null if not applicable"
			},
			{
				"name": "front_side",
				"type": "InputFile",
				"description": "Front side of the document"
			},
			{
				"name": "reverse_side",
				"type": "InputFile",
				"description": "Reverse side of the document; only for driver license and identity card; pass null otherwise"
			},
			{
				"name": "selfie",
				"type": "InputFile",
				"description": "Selfie with the document; pass null if unavailable"
			},
			{
				"name": "translation",
				"type": "vector<InputFile>",
				"description": "List of files containing a certified English translation of the document"
			}
		],
		"description": "An identity document to be saved to Telegram Passport",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "personalDocument",
		"methods": [
			{
				"name": "files",
				"type": "vector<datedFile>",
				"description": "List of files containing the pages of the document"
			},
			{
				"name": "translation",
				"type": "vector<datedFile>",
				"description": "List of files containing a certified English translation of the document"
			}
		],
		"description": "A personal document, containing some information about a user",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputPersonalDocument",
		"methods": [
			{
				"name": "files",
				"type": "vector<InputFile>",
				"description": "List of files containing the pages of the document"
			},
			{
				"name": "translation",
				"type": "vector<InputFile>",
				"description": "List of files containing a certified English translation of the document"
			}
		],
		"description": "A personal document to be saved to Telegram Passport",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "PassportElement",
		"methods": null,
		"description": "Contains information about a Telegram Passport element",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementPersonalDetails",
		"methods": [
			{
				"name": "personal_details",
				"type": "personalDetails",
				"description": "Personal details of the user"
			}
		],
		"description": "A Telegram Passport element containing the user's personal details",
		"inheritance": "PassportElement",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementPassport",
		"methods": [
			{
				"name": "passport",
				"type": "identityDocument",
				"description": "Passport"
			}
		],
		"description": "A Telegram Passport element containing the user's passport",
		"inheritance": "PassportElement",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementDriverLicense",
		"methods": [
			{
				"name": "driver_license",
				"type": "identityDocument",
				"description": "Driver license"
			}
		],
		"description": "A Telegram Passport element containing the user's driver license",
		"inheritance": "PassportElement",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementIdentityCard",
		"methods": [
			{
				"name": "identity_card",
				"type": "identityDocument",
				"description": "Identity card"
			}
		],
		"description": "A Telegram Passport element containing the user's identity card",
		"inheritance": "PassportElement",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementInternalPassport",
		"methods": [
			{
				"name": "internal_passport",
				"type": "identityDocument",
				"description": "Internal passport"
			}
		],
		"description": "A Telegram Passport element containing the user's internal passport",
		"inheritance": "PassportElement",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementAddress",
		"methods": [
			{
				"name": "address",
				"type": "address",
				"description": "Address"
			}
		],
		"description": "A Telegram Passport element containing the user's address",
		"inheritance": "PassportElement",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementUtilityBill",
		"methods": [
			{
				"name": "utility_bill",
				"type": "personalDocument",
				"description": "Utility bill"
			}
		],
		"description": "A Telegram Passport element containing the user's utility bill",
		"inheritance": "PassportElement",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementBankStatement",
		"methods": [
			{
				"name": "bank_statement",
				"type": "personalDocument",
				"description": "Bank statement"
			}
		],
		"description": "A Telegram Passport element containing the user's bank statement",
		"inheritance": "PassportElement",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementRentalAgreement",
		"methods": [
			{
				"name": "rental_agreement",
				"type": "personalDocument",
				"description": "Rental agreement"
			}
		],
		"description": "A Telegram Passport element containing the user's rental agreement",
		"inheritance": "PassportElement",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementPassportRegistration",
		"methods": [
			{
				"name": "passport_registration",
				"type": "personalDocument",
				"description": "Passport registration pages"
			}
		],
		"description": "A Telegram Passport element containing the user's passport registration pages",
		"inheritance": "PassportElement",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementTemporaryRegistration",
		"methods": [
			{
				"name": "temporary_registration",
				"type": "personalDocument",
				"description": "Temporary registration"
			}
		],
		"description": "A Telegram Passport element containing the user's temporary registration",
		"inheritance": "PassportElement",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementPhoneNumber",
		"methods": [
			{
				"name": "phone_number",
				"type": "string",
				"description": "Phone number"
			}
		],
		"description": "A Telegram Passport element containing the user's phone number",
		"inheritance": "PassportElement",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementEmailAddress",
		"methods": [
			{
				"name": "email_address",
				"type": "string",
				"description": "Email address"
			}
		],
		"description": "A Telegram Passport element containing the user's email address",
		"inheritance": "PassportElement",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "InputPassportElement",
		"methods": null,
		"description": "Contains information about a Telegram Passport element to be saved",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputPassportElementPersonalDetails",
		"methods": [
			{
				"name": "personal_details",
				"type": "personalDetails",
				"description": "Personal details of the user"
			}
		],
		"description": "A Telegram Passport element to be saved containing the user's personal details",
		"inheritance": "InputPassportElement",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputPassportElementPassport",
		"methods": [
			{
				"name": "passport",
				"type": "inputIdentityDocument",
				"description": "The passport to be saved"
			}
		],
		"description": "A Telegram Passport element to be saved containing the user's passport",
		"inheritance": "InputPassportElement",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputPassportElementDriverLicense",
		"methods": [
			{
				"name": "driver_license",
				"type": "inputIdentityDocument",
				"description": "The driver license to be saved"
			}
		],
		"description": "A Telegram Passport element to be saved containing the user's driver license",
		"inheritance": "InputPassportElement",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputPassportElementIdentityCard",
		"methods": [
			{
				"name": "identity_card",
				"type": "inputIdentityDocument",
				"description": "The identity card to be saved"
			}
		],
		"description": "A Telegram Passport element to be saved containing the user's identity card",
		"inheritance": "InputPassportElement",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputPassportElementInternalPassport",
		"methods": [
			{
				"name": "internal_passport",
				"type": "inputIdentityDocument",
				"description": "The internal passport to be saved"
			}
		],
		"description": "A Telegram Passport element to be saved containing the user's internal passport",
		"inheritance": "InputPassportElement",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputPassportElementAddress",
		"methods": [
			{
				"name": "address",
				"type": "address",
				"description": "The address to be saved"
			}
		],
		"description": "A Telegram Passport element to be saved containing the user's address",
		"inheritance": "InputPassportElement",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputPassportElementUtilityBill",
		"methods": [
			{
				"name": "utility_bill",
				"type": "inputPersonalDocument",
				"description": "The utility bill to be saved"
			}
		],
		"description": "A Telegram Passport element to be saved containing the user's utility bill",
		"inheritance": "InputPassportElement",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputPassportElementBankStatement",
		"methods": [
			{
				"name": "bank_statement",
				"type": "inputPersonalDocument",
				"description": "The bank statement to be saved"
			}
		],
		"description": "A Telegram Passport element to be saved containing the user's bank statement",
		"inheritance": "InputPassportElement",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputPassportElementRentalAgreement",
		"methods": [
			{
				"name": "rental_agreement",
				"type": "inputPersonalDocument",
				"description": "The rental agreement to be saved"
			}
		],
		"description": "A Telegram Passport element to be saved containing the user's rental agreement",
		"inheritance": "InputPassportElement",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputPassportElementPassportRegistration",
		"methods": [
			{
				"name": "passport_registration",
				"type": "inputPersonalDocument",
				"description": "The passport registration page to be saved"
			}
		],
		"description": "A Telegram Passport element to be saved containing the user's passport registration",
		"inheritance": "InputPassportElement",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputPassportElementTemporaryRegistration",
		"methods": [
			{
				"name": "temporary_registration",
				"type": "inputPersonalDocument",
				"description": "The temporary registration document to be saved"
			}
		],
		"description": "A Telegram Passport element to be saved containing the user's temporary registration",
		"inheritance": "InputPassportElement",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputPassportElementPhoneNumber",
		"methods": [
			{
				"name": "phone_number",
				"type": "string",
				"description": "The phone number to be saved"
			}
		],
		"description": "A Telegram Passport element to be saved containing the user's phone number",
		"inheritance": "InputPassportElement",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputPassportElementEmailAddress",
		"methods": [
			{
				"name": "email_address",
				"type": "string",
				"description": "The email address to be saved"
			}
		],
		"description": "A Telegram Passport element to be saved containing the user's email address",
		"inheritance": "InputPassportElement",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElements",
		"methods": [
			{
				"name": "elements",
				"type": "vector<PassportElement>",
				"description": "Telegram Passport elements"
			}
		],
		"description": "Contains information about saved Telegram Passport elements",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "PassportElementErrorSource",
		"methods": null,
		"description": "Contains the  of an error in a Telegram Passport element",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementErrorSourceUnspecified",
		"methods": null,
		"description": "The element contains an error in an unspecified place. The error will be considered resolved when new data is added",
		"inheritance": "PassportElementErrorSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementErrorSourceDataField",
		"methods": [
			{
				"name": "field_name",
				"type": "string",
				"description": "Field name"
			}
		],
		"description": "One of the data fields contains an error. The error will be considered resolved when the value of the field changes",
		"inheritance": "PassportElementErrorSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementErrorSourceFrontSide",
		"methods": null,
		"description": "The front side of the document contains an error. The error will be considered resolved when the file with the front side changes",
		"inheritance": "PassportElementErrorSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementErrorSourceReverseSide",
		"methods": null,
		"description": "The reverse side of the document contains an error. The error will be considered resolved when the file with the reverse side changes",
		"inheritance": "PassportElementErrorSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementErrorSourceSelfie",
		"methods": null,
		"description": "The selfie with the document contains an error. The error will be considered resolved when the file with the selfie changes",
		"inheritance": "PassportElementErrorSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementErrorSourceTranslationFile",
		"methods": [
			{
				"name": "file_index",
				"type": "int32",
				"description": "Index of a file with the error"
			}
		],
		"description": "One of files with the translation of the document contains an error. The error will be considered resolved when the file changes",
		"inheritance": "PassportElementErrorSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementErrorSourceTranslationFiles",
		"methods": null,
		"description": "The translation of the document contains an error. The error will be considered resolved when the list of translation files changes",
		"inheritance": "PassportElementErrorSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementErrorSourceFile",
		"methods": [
			{
				"name": "file_index",
				"type": "int32",
				"description": "Index of a file with the error"
			}
		],
		"description": "The file contains an error. The error will be considered resolved when the file changes",
		"inheritance": "PassportElementErrorSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementErrorSourceFiles",
		"methods": null,
		"description": "The list of attached files contains an error. The error will be considered resolved when the list of files changes",
		"inheritance": "PassportElementErrorSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementError",
		"methods": [
			{
				"name": "type",
				"type": "PassportElementType",
				"description": "Type of the Telegram Passport element which has the error"
			},
			{
				"name": "message",
				"type": "string",
				"description": "Error message"
			},
			{
				"name": "source",
				"type": "PassportElementErrorSource",
				"description": "Error source"
			}
		],
		"description": "Contains the description of an error in a Telegram Passport element",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportSuitableElement",
		"methods": [
			{
				"name": "type",
				"type": "PassportElementType",
				"description": "Type of the element"
			},
			{
				"name": "is_selfie_required",
				"type": "Bool",
				"description": "True, if a selfie is required with the identity document"
			},
			{
				"name": "is_translation_required",
				"type": "Bool",
				"description": "True, if a certified English translation is required with the document"
			},
			{
				"name": "is_native_name_required",
				"type": "Bool",
				"description": "True, if personal details must include the user's name in the language of their country of residence"
			}
		],
		"description": "Contains information about a Telegram Passport element that was requested by a service",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportRequiredElement",
		"methods": [
			{
				"name": "suitable_elements",
				"type": "vector<passportSuitableElement>",
				"description": "List of Telegram Passport elements any of which is enough to provide"
			}
		],
		"description": "Contains a description of the required Telegram Passport element that was requested by a service",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportAuthorizationForm",
		"methods": [
			{
				"name": "id",
				"type": "int32",
				"description": "Unique identifier of the authorization form"
			},
			{
				"name": "required_elements",
				"type": "vector<passportRequiredElement>",
				"description": "Telegram Passport elements that must be provided to complete the form"
			},
			{
				"name": "privacy_policy_url",
				"type": "string",
				"description": "URL for the privacy policy of the service; may be empty"
			}
		],
		"description": "Contains information about a Telegram Passport authorization form that was requested",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "passportElementsWithErrors",
		"methods": [
			{
				"name": "elements",
				"type": "vector<PassportElement>",
				"description": "Telegram Passport elements"
			},
			{
				"name": "errors",
				"type": "vector<passportElementError>",
				"description": "Errors in the elements that are already available"
			}
		],
		"description": "Contains information about a Telegram Passport elements and corresponding errors",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "encryptedCredentials",
		"methods": [
			{
				"name": "data",
				"type": "bytes",
				"description": "The encrypted credentials"
			},
			{
				"name": "hash",
				"type": "bytes",
				"description": "The decrypted data hash"
			},
			{
				"name": "secret",
				"type": "bytes",
				"description": "Secret for data decryption, encrypted with the service's public key"
			}
		],
		"description": "Contains encrypted Telegram Passport data credentials",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "encryptedPassportElement",
		"methods": [
			{
				"name": "type",
				"type": "PassportElementType",
				"description": "Type of Telegram Passport element"
			},
			{
				"name": "data",
				"type": "bytes",
				"description": "Encrypted JSON-encoded data about the user"
			},
			{
				"name": "front_side",
				"type": "datedFile",
				"description": "The front side of an identity document"
			},
			{
				"name": "reverse_side",
				"type": "datedFile",
				"description": "The reverse side of an identity document; may be null"
			},
			{
				"name": "selfie",
				"type": "datedFile",
				"description": "Selfie with the document; may be null"
			},
			{
				"name": "translation",
				"type": "vector<datedFile>",
				"description": "List of files containing a certified English translation of the document"
			},
			{
				"name": "files",
				"type": "vector<datedFile>",
				"description": "List of attached files"
			},
			{
				"name": "value",
				"type": "string",
				"description": "Unencrypted data, phone number or email address"
			},
			{
				"name": "hash",
				"type": "string",
				"description": "Hash of the entire element"
			}
		],
		"description": "Contains information about an encrypted Telegram Passport element; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "InputPassportElementErrorSource",
		"methods": null,
		"description": "Contains the  of an error in a Telegram Passport element; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputPassportElementErrorSourceUnspecified",
		"methods": [
			{
				"name": "element_hash",
				"type": "bytes",
				"description": "Current hash of the entire element"
			}
		],
		"description": "The element contains an error in an unspecified place. The error will be considered resolved when new data is added",
		"inheritance": "InputPassportElementErrorSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputPassportElementErrorSourceDataField",
		"methods": [
			{
				"name": "field_name",
				"type": "string",
				"description": "Field name"
			},
			{
				"name": "data_hash",
				"type": "bytes",
				"description": "Current data hash"
			}
		],
		"description": "A data field contains an error. The error is considered resolved when the field's value changes",
		"inheritance": "InputPassportElementErrorSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputPassportElementErrorSourceFrontSide",
		"methods": [
			{
				"name": "file_hash",
				"type": "bytes",
				"description": "Current hash of the file containing the front side"
			}
		],
		"description": "The front side of the document contains an error. The error is considered resolved when the file with the front side of the document changes",
		"inheritance": "InputPassportElementErrorSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputPassportElementErrorSourceReverseSide",
		"methods": [
			{
				"name": "file_hash",
				"type": "bytes",
				"description": "Current hash of the file containing the reverse side"
			}
		],
		"description": "The reverse side of the document contains an error. The error is considered resolved when the file with the reverse side of the document changes",
		"inheritance": "InputPassportElementErrorSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputPassportElementErrorSourceSelfie",
		"methods": [
			{
				"name": "file_hash",
				"type": "bytes",
				"description": "Current hash of the file containing the selfie"
			}
		],
		"description": "The selfie contains an error. The error is considered resolved when the file with the selfie changes",
		"inheritance": "InputPassportElementErrorSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputPassportElementErrorSourceTranslationFile",
		"methods": [
			{
				"name": "file_hash",
				"type": "bytes",
				"description": "Current hash of the file containing the translation"
			}
		],
		"description": "One of the files containing the translation of the document contains an error. The error is considered resolved when the file with the translation changes",
		"inheritance": "InputPassportElementErrorSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputPassportElementErrorSourceTranslationFiles",
		"methods": [
			{
				"name": "file_hashes",
				"type": "vector<bytes>",
				"description": "Current hashes of all files with the translation"
			}
		],
		"description": "The translation of the document contains an error. The error is considered resolved when the list of files changes",
		"inheritance": "InputPassportElementErrorSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputPassportElementErrorSourceFile",
		"methods": [
			{
				"name": "file_hash",
				"type": "bytes",
				"description": "Current hash of the file which has the error"
			}
		],
		"description": "The file contains an error. The error is considered resolved when the file changes",
		"inheritance": "InputPassportElementErrorSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputPassportElementErrorSourceFiles",
		"methods": [
			{
				"name": "file_hashes",
				"type": "vector<bytes>",
				"description": "Current hashes of all attached files"
			}
		],
		"description": "The list of attached files contains an error. The error is considered resolved when the file list changes",
		"inheritance": "InputPassportElementErrorSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputPassportElementError",
		"methods": [
			{
				"name": "type",
				"type": "PassportElementType",
				"description": "Type of Telegram Passport element that has the error"
			},
			{
				"name": "message",
				"type": "string",
				"description": "Error message"
			},
			{
				"name": "source",
				"type": "InputPassportElementErrorSource",
				"description": "Error source"
			}
		],
		"description": "Contains the description of an error in a Telegram Passport element; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "MessageContent",
		"methods": null,
		"description": "Contains the content of a message",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageText",
		"methods": [
			{
				"name": "text",
				"type": "formattedText",
				"description": "Text of the message"
			},
			{
				"name": "link_preview",
				"type": "linkPreview",
				"description": "A link preview attached to the message; may be null"
			},
			{
				"name": "link_preview_options",
				"type": "linkPreviewOptions",
				"description": "Options which were used for generation of the link preview; may be null if default options were used"
			}
		],
		"description": "A text message",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageAnimation",
		"methods": [
			{
				"name": "animation",
				"type": "animation",
				"description": "The animation description"
			},
			{
				"name": "caption",
				"type": "formattedText",
				"description": "Animation caption"
			},
			{
				"name": "show_caption_above_media",
				"type": "Bool",
				"description": "True, if the caption must be shown above the animation; otherwise, the caption must be shown below the animation"
			},
			{
				"name": "has_spoiler",
				"type": "Bool",
				"description": "True, if the animation preview must be covered by a spoiler animation"
			},
			{
				"name": "is_secret",
				"type": "Bool",
				"description": "True, if the animation thumbnail must be blurred and the animation must be shown only while tapped"
			}
		],
		"description": "An animation message (GIF-style).",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageAudio",
		"methods": [
			{
				"name": "audio",
				"type": "audio",
				"description": "The audio description"
			},
			{
				"name": "caption",
				"type": "formattedText",
				"description": "Audio caption"
			}
		],
		"description": "An audio message",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageDocument",
		"methods": [
			{
				"name": "document",
				"type": "document",
				"description": "The document description"
			},
			{
				"name": "caption",
				"type": "formattedText",
				"description": "Document caption"
			}
		],
		"description": "A document message (general file)",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messagePaidMedia",
		"methods": [
			{
				"name": "star_count",
				"type": "int53",
				"description": "Number of Telegram Stars needed to buy access to the media in the message"
			},
			{
				"name": "media",
				"type": "vector<PaidMedia>",
				"description": "Information about the media"
			},
			{
				"name": "caption",
				"type": "formattedText",
				"description": "Media caption"
			},
			{
				"name": "show_caption_above_media",
				"type": "Bool",
				"description": "True, if the caption must be shown above the media; otherwise, the caption must be shown below the media"
			}
		],
		"description": "A message with paid media",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messagePhoto",
		"methods": [
			{
				"name": "photo",
				"type": "photo",
				"description": "The photo"
			},
			{
				"name": "caption",
				"type": "formattedText",
				"description": "Photo caption"
			},
			{
				"name": "show_caption_above_media",
				"type": "Bool",
				"description": "True, if the caption must be shown above the photo; otherwise, the caption must be shown below the photo"
			},
			{
				"name": "has_spoiler",
				"type": "Bool",
				"description": "True, if the photo preview must be covered by a spoiler animation"
			},
			{
				"name": "is_secret",
				"type": "Bool",
				"description": "True, if the photo must be blurred and must be shown only while tapped"
			}
		],
		"description": "A photo message",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageSticker",
		"methods": [
			{
				"name": "sticker",
				"type": "sticker",
				"description": "The sticker description"
			},
			{
				"name": "is_premium",
				"type": "Bool",
				"description": "True, if premium animation of the sticker must be played"
			}
		],
		"description": "A sticker message",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageVideo",
		"methods": [
			{
				"name": "video",
				"type": "video",
				"description": "The video description"
			},
			{
				"name": "alternative_videos",
				"type": "vector<alternativeVideo>",
				"description": "Alternative qualities of the video"
			},
			{
				"name": "cover",
				"type": "photo",
				"description": "Cover of the video; may be null if none"
			},
			{
				"name": "start_timestamp",
				"type": "int32",
				"description": "Timestamp from which the video playing must start, in seconds"
			},
			{
				"name": "caption",
				"type": "formattedText",
				"description": "Video caption"
			},
			{
				"name": "show_caption_above_media",
				"type": "Bool",
				"description": "True, if the caption must be shown above the video; otherwise, the caption must be shown below the video"
			},
			{
				"name": "has_spoiler",
				"type": "Bool",
				"description": "True, if the video preview must be covered by a spoiler animation"
			},
			{
				"name": "is_secret",
				"type": "Bool",
				"description": "True, if the video thumbnail must be blurred and the video must be shown only while tapped"
			}
		],
		"description": "A video message",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageVideoNote",
		"methods": [
			{
				"name": "video_note",
				"type": "videoNote",
				"description": "The video note description"
			},
			{
				"name": "is_viewed",
				"type": "Bool",
				"description": "True, if at least one of the recipients has viewed the video note"
			},
			{
				"name": "is_secret",
				"type": "Bool",
				"description": "True, if the video note thumbnail must be blurred and the video note must be shown only while tapped"
			}
		],
		"description": "A video note message",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageVoiceNote",
		"methods": [
			{
				"name": "voice_note",
				"type": "voiceNote",
				"description": "The voice note description"
			},
			{
				"name": "caption",
				"type": "formattedText",
				"description": "Voice note caption"
			},
			{
				"name": "is_listened",
				"type": "Bool",
				"description": "True, if at least one of the recipients has listened to the voice note"
			}
		],
		"description": "A voice note message",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageExpiredPhoto",
		"methods": null,
		"description": "A self-destructed photo message",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageExpiredVideo",
		"methods": null,
		"description": "A self-destructed video message",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageExpiredVideoNote",
		"methods": null,
		"description": "A self-destructed video note message",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageExpiredVoiceNote",
		"methods": null,
		"description": "A self-destructed voice note message",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageLocation",
		"methods": [
			{
				"name": "location",
				"type": "location",
				"description": "The location description"
			},
			{
				"name": "live_period",
				"type": "int32",
				"description": "Time relative to the message send date, for which the location can be updated, in seconds; if 0x7FFFFFFF, then location can be updated forever"
			},
			{
				"name": "expires_in",
				"type": "int32",
				"description": "Left time for which the location can be updated, in seconds. If 0, then the location can't be updated anymore. The update updateMessageContent is not sent when this field changes"
			},
			{
				"name": "heading",
				"type": "int32",
				"description": "For live locations, a direction in which the location moves, in degrees; 1-360. If 0 the direction is unknown"
			},
			{
				"name": "proximity_alert_radius",
				"type": "int32",
				"description": "For live locations, a maximum distance to another chat member for proximity alerts, in meters (0-100000). 0 if the notification is disabled. Available only to the message sender"
			}
		],
		"description": "A message with a location",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageVenue",
		"methods": [
			{
				"name": "venue",
				"type": "venue",
				"description": "The venue description"
			}
		],
		"description": "A message with information about a venue",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageContact",
		"methods": [
			{
				"name": "contact",
				"type": "contact",
				"description": "The contact description"
			}
		],
		"description": "A message with a user contact",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageAnimatedEmoji",
		"methods": [
			{
				"name": "animated_emoji",
				"type": "animatedEmoji",
				"description": "The animated emoji"
			},
			{
				"name": "emoji",
				"type": "string",
				"description": "The corresponding emoji"
			}
		],
		"description": "A message with an animated emoji",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageDice",
		"methods": [
			{
				"name": "initial_state",
				"type": "DiceStickers",
				"description": "The animated stickers with the initial dice animation; may be null if unknown. The update updateMessageContent will be sent when the sticker became known"
			},
			{
				"name": "final_state",
				"type": "DiceStickers",
				"description": "The animated stickers with the final dice animation; may be null if unknown. The update updateMessageContent will be sent when the sticker became known"
			},
			{
				"name": "emoji",
				"type": "string",
				"description": "Emoji on which the dice throw animation is based"
			},
			{
				"name": "value",
				"type": "int32",
				"description": "The dice value. If the value is 0, the dice don't have final state yet"
			},
			{
				"name": "success_animation_frame_number",
				"type": "int32",
				"description": "Number of frame after which a success animation like a shower of confetti needs to be shown on updateMessageSendSucceeded"
			}
		],
		"description": "A dice message. The dice value is randomly generated by the server",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageGame",
		"methods": [
			{
				"name": "game",
				"type": "game",
				"description": "The game description"
			}
		],
		"description": "A message with a game",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messagePoll",
		"methods": [
			{
				"name": "poll",
				"type": "poll",
				"description": "The poll description"
			}
		],
		"description": "A message with a poll",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageStory",
		"methods": [
			{
				"name": "story_sender_chat_id",
				"type": "int53",
				"description": "Identifier of the chat that posted the story"
			},
			{
				"name": "story_id",
				"type": "int32",
				"description": "Story identifier"
			},
			{
				"name": "via_mention",
				"type": "Bool",
				"description": "True, if the story was automatically forwarded because of a mention of the user"
			}
		],
		"description": "A message with a forwarded story",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageInvoice",
		"methods": [
			{
				"name": "product_info",
				"type": "productInfo",
				"description": "Information about the product"
			},
			{
				"name": "currency",
				"type": "string",
				"description": "Currency for the product price"
			},
			{
				"name": "total_amount",
				"type": "int53",
				"description": "Product total price in the smallest units of the currency"
			},
			{
				"name": "start_parameter",
				"type": "string",
				"description": "Unique invoice bot start_parameter to be passed to getInternalLink"
			},
			{
				"name": "is_test",
				"type": "Bool",
				"description": "True, if the invoice is a test invoice"
			},
			{
				"name": "need_shipping_address",
				"type": "Bool",
				"description": "True, if the shipping address must be specified"
			},
			{
				"name": "receipt_message_id",
				"type": "int53",
				"description": "The identifier of the message with the receipt, after the product has been purchased"
			},
			{
				"name": "paid_media",
				"type": "PaidMedia",
				"description": "Extended media attached to the invoice; may be null if none"
			},
			{
				"name": "paid_media_caption",
				"type": "formattedText",
				"description": "Extended media caption; may be null if none"
			}
		],
		"description": "A message with an invoice from a bot. Use getInternalLink with internalLinkTypeBotStart to share the invoice",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageCall",
		"methods": [
			{
				"name": "is_video",
				"type": "Bool",
				"description": "True, if the call was a video call"
			},
			{
				"name": "discard_reason",
				"type": "CallDiscardReason",
				"description": "Reason why the call was discarded"
			},
			{
				"name": "duration",
				"type": "int32",
				"description": "Call duration, in seconds"
			}
		],
		"description": "A message with information about an ended call",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageVideoChatScheduled",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Identifier of the video chat. The video chat can be received through the method getGroupCall"
			},
			{
				"name": "start_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the group call is expected to be started by an administrator"
			}
		],
		"description": "A new video chat was scheduled",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageVideoChatStarted",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Identifier of the video chat. The video chat can be received through the method getGroupCall"
			}
		],
		"description": "A newly created video chat",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageVideoChatEnded",
		"methods": [
			{
				"name": "duration",
				"type": "int32",
				"description": "Call duration, in seconds"
			}
		],
		"description": "A message with information about an ended video chat",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageInviteVideoChatParticipants",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Identifier of the video chat. The video chat can be received through the method getGroupCall"
			},
			{
				"name": "user_ids",
				"type": "vector<int53>",
				"description": "Invited user identifiers"
			}
		],
		"description": "A message with information about an invitation to a video chat",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageBasicGroupChatCreate",
		"methods": [
			{
				"name": "title",
				"type": "string",
				"description": "Title of the basic group"
			},
			{
				"name": "member_user_ids",
				"type": "vector<int53>",
				"description": "User identifiers of members in the basic group"
			}
		],
		"description": "A newly created basic group",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageSupergroupChatCreate",
		"methods": [
			{
				"name": "title",
				"type": "string",
				"description": "Title of the supergroup or channel"
			}
		],
		"description": "A newly created supergroup or channel",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageChatChangeTitle",
		"methods": [
			{
				"name": "title",
				"type": "string",
				"description": "New chat title"
			}
		],
		"description": "An updated chat title",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageChatChangePhoto",
		"methods": [
			{
				"name": "photo",
				"type": "chatPhoto",
				"description": "New chat photo"
			}
		],
		"description": "An updated chat photo",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageChatDeletePhoto",
		"methods": null,
		"description": "A deleted chat photo",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageChatAddMembers",
		"methods": [
			{
				"name": "member_user_ids",
				"type": "vector<int53>",
				"description": "User identifiers of the new members"
			}
		],
		"description": "New chat members were added",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageChatJoinByLink",
		"methods": null,
		"description": "A new member joined the chat via an invite link",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageChatJoinByRequest",
		"methods": null,
		"description": "A new member was accepted to the chat by an administrator",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageChatDeleteMember",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier of the deleted chat member"
			}
		],
		"description": "A chat member was deleted",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageChatUpgradeTo",
		"methods": [
			{
				"name": "supergroup_id",
				"type": "int53",
				"description": "Identifier of the supergroup to which the basic group was upgraded"
			}
		],
		"description": "A basic group was upgraded to a supergroup and was deactivated as the result",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageChatUpgradeFrom",
		"methods": [
			{
				"name": "title",
				"type": "string",
				"description": "Title of the newly created supergroup"
			},
			{
				"name": "basic_group_id",
				"type": "int53",
				"description": "The identifier of the original basic group"
			}
		],
		"description": "A supergroup has been created from a basic group",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messagePinMessage",
		"methods": [
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the pinned message, can be an identifier of a deleted message or 0"
			}
		],
		"description": "A message has been pinned",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageScreenshotTaken",
		"methods": null,
		"description": "A screenshot of a message in the chat has been taken",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageChatSetBackground",
		"methods": [
			{
				"name": "old_background_message_id",
				"type": "int53",
				"description": "Identifier of the message with a previously set same background; 0 if none. Can be an identifier of a deleted message"
			},
			{
				"name": "background",
				"type": "chatBackground",
				"description": "The new background"
			},
			{
				"name": "only_for_self",
				"type": "Bool",
				"description": "True, if the background was set only for self"
			}
		],
		"description": "A new background was set in the chat",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageChatSetTheme",
		"methods": [
			{
				"name": "theme_name",
				"type": "string",
				"description": "If non-empty, name of a new theme, set for the chat. Otherwise, chat theme was reset to the default one"
			}
		],
		"description": "A theme in the chat has been changed",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageChatSetMessageAutoDeleteTime",
		"methods": [
			{
				"name": "message_auto_delete_time",
				"type": "int32",
				"description": "New value auto-delete or self-destruct time, in seconds; 0 if disabled"
			},
			{
				"name": "from_user_id",
				"type": "int53",
				"description": "If not 0, a user identifier, which default setting was automatically applied"
			}
		],
		"description": "The auto-delete or self-destruct timer for messages in the chat has been changed",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageChatBoost",
		"methods": [
			{
				"name": "boost_count",
				"type": "int32",
				"description": "Number of times the chat was boosted"
			}
		],
		"description": "The chat was boosted by the sender of the message",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageForumTopicCreated",
		"methods": [
			{
				"name": "name",
				"type": "string",
				"description": "Name of the topic"
			},
			{
				"name": "icon",
				"type": "forumTopicIcon",
				"description": "Icon of the topic"
			}
		],
		"description": "A forum topic has been created",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageForumTopicEdited",
		"methods": [
			{
				"name": "name",
				"type": "string",
				"description": "If non-empty, the new name of the topic"
			},
			{
				"name": "edit_icon_custom_emoji_id",
				"type": "Bool",
				"description": "True, if icon's custom_emoji_id is changed"
			},
			{
				"name": "icon_custom_emoji_id",
				"type": "int64",
				"description": "New unique identifier of the custom emoji shown on the topic icon; 0 if none. Must be ignored if edit_icon_custom_emoji_id is false"
			}
		],
		"description": "A forum topic has been edited",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageForumTopicIsClosedToggled",
		"methods": [
			{
				"name": "is_closed",
				"type": "Bool",
				"description": "True, if the topic was closed; otherwise, the topic was reopened"
			}
		],
		"description": "A forum topic has been closed or opened",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageForumTopicIsHiddenToggled",
		"methods": [
			{
				"name": "is_hidden",
				"type": "Bool",
				"description": "True, if the topic was hidden; otherwise, the topic was unhidden"
			}
		],
		"description": "A General forum topic has been hidden or unhidden",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageSuggestProfilePhoto",
		"methods": [
			{
				"name": "photo",
				"type": "chatPhoto",
				"description": "The suggested chat photo. Use the method setProfilePhoto with inputChatPhotoPrevious to apply the photo"
			}
		],
		"description": "A profile photo was suggested to a user in a private chat",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageCustomServiceAction",
		"methods": [
			{
				"name": "text",
				"type": "string",
				"description": "Message text to be shown in the chat"
			}
		],
		"description": "A non-standard action has happened in the chat",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageGameScore",
		"methods": [
			{
				"name": "game_message_id",
				"type": "int53",
				"description": "Identifier of the message with the game, can be an identifier of a deleted message"
			},
			{
				"name": "game_id",
				"type": "int64",
				"description": "Identifier of the game; may be different from the games presented in the message with the game"
			},
			{
				"name": "score",
				"type": "int32",
				"description": "New score"
			}
		],
		"description": "A new high score was achieved in a game",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messagePaymentSuccessful",
		"methods": [
			{
				"name": "invoice_chat_id",
				"type": "int53",
				"description": "Identifier of the chat, containing the corresponding invoice message"
			},
			{
				"name": "invoice_message_id",
				"type": "int53",
				"description": "Identifier of the message with the corresponding invoice; can be 0 or an identifier of a deleted message"
			},
			{
				"name": "currency",
				"type": "string",
				"description": "Currency for the price of the product"
			},
			{
				"name": "total_amount",
				"type": "int53",
				"description": "Total price for the product, in the smallest units of the currency"
			},
			{
				"name": "subscription_until_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the subscription will expire; 0 if unknown or the payment isn't recurring"
			},
			{
				"name": "is_recurring",
				"type": "Bool",
				"description": "True, if this is a recurring payment"
			},
			{
				"name": "is_first_recurring",
				"type": "Bool",
				"description": "True, if this is the first recurring payment"
			},
			{
				"name": "invoice_name",
				"type": "string",
				"description": "Name of the invoice; may be empty if unknown"
			}
		],
		"description": "A payment has been sent to a bot or a business account",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messagePaymentSuccessfulBot",
		"methods": [
			{
				"name": "currency",
				"type": "string",
				"description": "Currency for price of the product"
			},
			{
				"name": "total_amount",
				"type": "int53",
				"description": "Total price for the product, in the smallest units of the currency"
			},
			{
				"name": "subscription_until_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the subscription will expire; 0 if unknown or the payment isn't recurring"
			},
			{
				"name": "is_recurring",
				"type": "Bool",
				"description": "True, if this is a recurring payment"
			},
			{
				"name": "is_first_recurring",
				"type": "Bool",
				"description": "True, if this is the first recurring payment"
			},
			{
				"name": "invoice_payload",
				"type": "bytes",
				"description": "Invoice payload"
			},
			{
				"name": "shipping_option_id",
				"type": "string",
				"description": "Identifier of the shipping option chosen by the user; may be empty if not applicable; for bots only"
			},
			{
				"name": "order_info",
				"type": "orderInfo",
				"description": "Information about the order; may be null; for bots only"
			},
			{
				"name": "telegram_payment_charge_id",
				"type": "string",
				"description": "Telegram payment identifier"
			},
			{
				"name": "provider_payment_charge_id",
				"type": "string",
				"description": "Provider payment identifier"
			}
		],
		"description": "A payment has been received by the bot or the business account",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messagePaymentRefunded",
		"methods": [
			{
				"name": "owner_id",
				"type": "MessageSender",
				"description": "Identifier of the previous owner of the Telegram Stars that refunds them"
			},
			{
				"name": "currency",
				"type": "string",
				"description": "Currency for the price of the product"
			},
			{
				"name": "total_amount",
				"type": "int53",
				"description": "Total price for the product, in the smallest units of the currency"
			},
			{
				"name": "invoice_payload",
				"type": "bytes",
				"description": "Invoice payload; only for bots"
			},
			{
				"name": "telegram_payment_charge_id",
				"type": "string",
				"description": "Telegram payment identifier"
			},
			{
				"name": "provider_payment_charge_id",
				"type": "string",
				"description": "Provider payment identifier"
			}
		],
		"description": "A payment has been refunded",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageGiftedPremium",
		"methods": [
			{
				"name": "gifter_user_id",
				"type": "int53",
				"description": "The identifier of a user that gifted Telegram Premium; 0 if the gift was anonymous or is outgoing"
			},
			{
				"name": "receiver_user_id",
				"type": "int53",
				"description": "The identifier of a user that received Telegram Premium; 0 if the gift is incoming"
			},
			{
				"name": "text",
				"type": "formattedText",
				"description": "Message added to the gifted Telegram Premium by the sender"
			},
			{
				"name": "currency",
				"type": "string",
				"description": "Currency for the paid amount"
			},
			{
				"name": "amount",
				"type": "int53",
				"description": "The paid amount, in the smallest units of the currency"
			},
			{
				"name": "cryptocurrency",
				"type": "string",
				"description": "Cryptocurrency used to pay for the gift; may be empty if none"
			},
			{
				"name": "cryptocurrency_amount",
				"type": "int64",
				"description": "The paid amount, in the smallest units of the cryptocurrency; 0 if none"
			},
			{
				"name": "month_count",
				"type": "int32",
				"description": "Number of months the Telegram Premium subscription will be active"
			},
			{
				"name": "sticker",
				"type": "sticker",
				"description": "A sticker to be shown in the message; may be null if unknown"
			}
		],
		"description": "Telegram Premium was gifted to a user",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messagePremiumGiftCode",
		"methods": [
			{
				"name": "creator_id",
				"type": "MessageSender",
				"description": "Identifier of a chat or a user that created the gift code; may be null if unknown"
			},
			{
				"name": "text",
				"type": "formattedText",
				"description": "Message added to the gift"
			},
			{
				"name": "is_from_giveaway",
				"type": "Bool",
				"description": "True, if the gift code was created for a giveaway"
			},
			{
				"name": "is_unclaimed",
				"type": "Bool",
				"description": "True, if the winner for the corresponding Telegram Premium subscription wasn't chosen"
			},
			{
				"name": "currency",
				"type": "string",
				"description": "Currency for the paid amount; empty if unknown"
			},
			{
				"name": "amount",
				"type": "int53",
				"description": "The paid amount, in the smallest units of the currency; 0 if unknown"
			},
			{
				"name": "cryptocurrency",
				"type": "string",
				"description": "Cryptocurrency used to pay for the gift; may be empty if none or unknown"
			},
			{
				"name": "cryptocurrency_amount",
				"type": "int64",
				"description": "The paid amount, in the smallest units of the cryptocurrency; 0 if unknown"
			},
			{
				"name": "month_count",
				"type": "int32",
				"description": "Number of months the Telegram Premium subscription will be active after code activation"
			},
			{
				"name": "sticker",
				"type": "sticker",
				"description": "A sticker to be shown in the message; may be null if unknown"
			},
			{
				"name": "code",
				"type": "string",
				"description": "The gift code"
			}
		],
		"description": "A Telegram Premium gift code was created for the user",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageGiveawayCreated",
		"methods": [
			{
				"name": "star_count",
				"type": "int53",
				"description": "Number of Telegram Stars that will be shared by winners of the giveaway; 0 for Telegram Premium giveaways"
			}
		],
		"description": "A giveaway was created for the chat. Use telegramPaymentPurposePremiumGiveaway, storePaymentPurposePremiumGiveaway, telegramPaymentPurposeStarGiveaway, or storePaymentPurposeStarGiveaway to create a giveaway",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageGiveaway",
		"methods": [
			{
				"name": "parameters",
				"type": "giveawayParameters",
				"description": "Giveaway parameters"
			},
			{
				"name": "winner_count",
				"type": "int32",
				"description": "Number of users which will receive Telegram Premium subscription gift codes"
			},
			{
				"name": "prize",
				"type": "GiveawayPrize",
				"description": "Prize of the giveaway"
			},
			{
				"name": "sticker",
				"type": "sticker",
				"description": "A sticker to be shown in the message; may be null if unknown"
			}
		],
		"description": "A giveaway",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageGiveawayCompleted",
		"methods": [
			{
				"name": "giveaway_message_id",
				"type": "int53",
				"description": "Identifier of the message with the giveaway; can be 0 if the message was deleted"
			},
			{
				"name": "winner_count",
				"type": "int32",
				"description": "Number of winners in the giveaway"
			},
			{
				"name": "is_star_giveaway",
				"type": "Bool",
				"description": "True, if the giveaway is a Telegram Star giveaway"
			},
			{
				"name": "unclaimed_prize_count",
				"type": "int32",
				"description": "Number of undistributed prizes; for Telegram Premium giveaways only"
			}
		],
		"description": "A giveaway without public winners has been completed for the chat",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageGiveawayWinners",
		"methods": [
			{
				"name": "boosted_chat_id",
				"type": "int53",
				"description": "Identifier of the supergroup or channel chat, which was automatically boosted by the winners of the giveaway"
			},
			{
				"name": "giveaway_message_id",
				"type": "int53",
				"description": "Identifier of the message with the giveaway in the boosted chat"
			},
			{
				"name": "additional_chat_count",
				"type": "int32",
				"description": "Number of other chats that participated in the giveaway"
			},
			{
				"name": "actual_winners_selection_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the winners were selected. May be bigger than winners selection date specified in parameters of the giveaway"
			},
			{
				"name": "only_new_members",
				"type": "Bool",
				"description": "True, if only new members of the chats were eligible for the giveaway"
			},
			{
				"name": "was_refunded",
				"type": "Bool",
				"description": "True, if the giveaway was canceled and was fully refunded"
			},
			{
				"name": "prize",
				"type": "GiveawayPrize",
				"description": "Prize of the giveaway"
			},
			{
				"name": "prize_description",
				"type": "string",
				"description": "Additional description of the giveaway prize"
			},
			{
				"name": "winner_count",
				"type": "int32",
				"description": "Total number of winners in the giveaway"
			},
			{
				"name": "winner_user_ids",
				"type": "vector<int53>",
				"description": "Up to 100 user identifiers of the winners of the giveaway"
			},
			{
				"name": "unclaimed_prize_count",
				"type": "int32",
				"description": "Number of undistributed prizes; for Telegram Premium giveaways only"
			}
		],
		"description": "A giveaway with public winners has been completed for the chat",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageGiftedStars",
		"methods": [
			{
				"name": "gifter_user_id",
				"type": "int53",
				"description": "The identifier of a user that gifted Telegram Stars; 0 if the gift was anonymous or is outgoing"
			},
			{
				"name": "receiver_user_id",
				"type": "int53",
				"description": "The identifier of a user that received Telegram Stars; 0 if the gift is incoming"
			},
			{
				"name": "currency",
				"type": "string",
				"description": "Currency for the paid amount"
			},
			{
				"name": "amount",
				"type": "int53",
				"description": "The paid amount, in the smallest units of the currency"
			},
			{
				"name": "cryptocurrency",
				"type": "string",
				"description": "Cryptocurrency used to pay for the gift; may be empty if none"
			},
			{
				"name": "cryptocurrency_amount",
				"type": "int64",
				"description": "The paid amount, in the smallest units of the cryptocurrency; 0 if none"
			},
			{
				"name": "star_count",
				"type": "int53",
				"description": "Number of Telegram Stars that were gifted"
			},
			{
				"name": "transaction_id",
				"type": "string",
				"description": "Identifier of the transaction for Telegram Stars purchase; for receiver only"
			},
			{
				"name": "sticker",
				"type": "sticker",
				"description": "A sticker to be shown in the message; may be null if unknown"
			}
		],
		"description": "Telegram Stars were gifted to a user",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageGiveawayPrizeStars",
		"methods": [
			{
				"name": "star_count",
				"type": "int53",
				"description": "Number of Telegram Stars that were received"
			},
			{
				"name": "transaction_id",
				"type": "string",
				"description": "Identifier of the transaction for Telegram Stars credit"
			},
			{
				"name": "boosted_chat_id",
				"type": "int53",
				"description": "Identifier of the supergroup or channel chat, which was automatically boosted by the winners of the giveaway"
			},
			{
				"name": "giveaway_message_id",
				"type": "int53",
				"description": "Identifier of the message with the giveaway in the boosted chat; can be 0 if the message was deleted"
			},
			{
				"name": "is_unclaimed",
				"type": "Bool",
				"description": "True, if the corresponding winner wasn't chosen and the Telegram Stars were received by the owner of the boosted chat"
			},
			{
				"name": "sticker",
				"type": "sticker",
				"description": "A sticker to be shown in the message; may be null if unknown"
			}
		],
		"description": "A Telegram Stars were received by the current user from a giveaway",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageGift",
		"methods": [
			{
				"name": "gift",
				"type": "gift",
				"description": "The gift"
			},
			{
				"name": "sender_id",
				"type": "MessageSender",
				"description": "Sender of the gift"
			},
			{
				"name": "received_gift_id",
				"type": "string",
				"description": "Unique identifier of the received gift for the current user; only for the receiver of the gift"
			},
			{
				"name": "text",
				"type": "formattedText",
				"description": "Message added to the gift"
			},
			{
				"name": "sell_star_count",
				"type": "int53",
				"description": "Number of Telegram Stars that can be claimed by the receiver instead of the regular gift; 0 if the gift can't be sold by the receiver"
			},
			{
				"name": "prepaid_upgrade_star_count",
				"type": "int53",
				"description": "Number of Telegram Stars that were paid by the sender for the ability to upgrade the gift"
			},
			{
				"name": "is_private",
				"type": "Bool",
				"description": "True, if the sender and gift text are shown only to the gift receiver; otherwise, everyone will be able to see them"
			},
			{
				"name": "is_saved",
				"type": "Bool",
				"description": "True, if the gift is displayed on the user's or the channel's profile page; only for the receiver of the gift"
			},
			{
				"name": "can_be_upgraded",
				"type": "Bool",
				"description": "True, if the gift can be upgraded to a unique gift; only for the receiver of the gift"
			},
			{
				"name": "was_converted",
				"type": "Bool",
				"description": "True, if the gift was converted to Telegram Stars; only for the receiver of the gift"
			},
			{
				"name": "was_upgraded",
				"type": "Bool",
				"description": "True, if the gift was upgraded to a unique gift"
			},
			{
				"name": "was_refunded",
				"type": "Bool",
				"description": "True, if the gift was refunded and isn't available anymore"
			},
			{
				"name": "upgraded_received_gift_id",
				"type": "string",
				"description": "Identifier of the corresponding upgraded gift; may be empty if unknown. Use getReceivedGift to get information about the gift"
			}
		],
		"description": "A regular gift was received or sent by the current user, or the current user was notified about a channel gift",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageUpgradedGift",
		"methods": [
			{
				"name": "gift",
				"type": "upgradedGift",
				"description": "The gift"
			},
			{
				"name": "sender_id",
				"type": "MessageSender",
				"description": "Sender of the gift; may be null for anonymous gifts"
			},
			{
				"name": "received_gift_id",
				"type": "string",
				"description": "Unique identifier of the received gift for the current user; only for the receiver of the gift"
			},
			{
				"name": "is_upgrade",
				"type": "Bool",
				"description": "True, if the gift was obtained by upgrading of a previously received gift; otherwise, this is a transferred gift"
			},
			{
				"name": "is_saved",
				"type": "Bool",
				"description": "True, if the gift is displayed on the user's or the channel's profile page; only for the receiver of the gift"
			},
			{
				"name": "can_be_transferred",
				"type": "Bool",
				"description": "True, if the gift can be transferred to another owner; only for the receiver of the gift"
			},
			{
				"name": "was_transferred",
				"type": "Bool",
				"description": "True, if the gift was transferred to another owner; only for the receiver of the gift"
			},
			{
				"name": "transfer_star_count",
				"type": "int53",
				"description": "Number of Telegram Stars that must be paid to transfer the upgraded gift; only for the receiver of the gift"
			},
			{
				"name": "export_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the gift can be transferred to the TON blockchain as an NFT; 0 if NFT export isn't possible; only for the receiver of the gift"
			}
		],
		"description": "An upgraded gift was received or sent by the current user, or the current user was notified about a channel gift",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageRefundedUpgradedGift",
		"methods": [
			{
				"name": "gift",
				"type": "gift",
				"description": "The gift"
			},
			{
				"name": "sender_id",
				"type": "MessageSender",
				"description": "Sender of the gift"
			},
			{
				"name": "is_upgrade",
				"type": "Bool",
				"description": "True, if the gift was obtained by upgrading of a previously received gift"
			}
		],
		"description": "A gift which purchase, upgrade or transfer were refunded",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageContactRegistered",
		"methods": null,
		"description": "A contact has registered with Telegram",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageUsersShared",
		"methods": [
			{
				"name": "users",
				"type": "vector<sharedUser>",
				"description": "The shared users"
			},
			{
				"name": "button_id",
				"type": "int32",
				"description": "Identifier of the keyboard button with the request"
			}
		],
		"description": "The current user shared users, which were requested by the bot",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageChatShared",
		"methods": [
			{
				"name": "chat",
				"type": "sharedChat",
				"description": "The shared chat"
			},
			{
				"name": "button_id",
				"type": "int32",
				"description": "Identifier of the keyboard button with the request"
			}
		],
		"description": "The current user shared a chat, which was requested by the bot",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageBotWriteAccessAllowed",
		"methods": [
			{
				"name": "reason",
				"type": "BotWriteAccessAllowReason",
				"description": "The reason why the bot was allowed to write messages"
			}
		],
		"description": "The user allowed the bot to send messages",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageWebAppDataSent",
		"methods": [
			{
				"name": "button_text",
				"type": "string",
				"description": "Text of the keyboardButtonTypeWebApp button, which opened the Web App"
			}
		],
		"description": "Data from a Web App has been sent to a bot",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageWebAppDataReceived",
		"methods": [
			{
				"name": "button_text",
				"type": "string",
				"description": "Text of the keyboardButtonTypeWebApp button, which opened the Web App"
			},
			{
				"name": "data",
				"type": "string",
				"description": "The data"
			}
		],
		"description": "Data from a Web App has been received; for bots only",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messagePassportDataSent",
		"methods": [
			{
				"name": "types",
				"type": "vector<PassportElementType>",
				"description": "List of Telegram Passport element types sent"
			}
		],
		"description": "Telegram Passport data has been sent to a bot",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messagePassportDataReceived",
		"methods": [
			{
				"name": "elements",
				"type": "vector<encryptedPassportElement>",
				"description": "List of received Telegram Passport elements"
			},
			{
				"name": "credentials",
				"type": "encryptedCredentials",
				"description": "Encrypted data credentials"
			}
		],
		"description": "Telegram Passport data has been received; for bots only",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageProximityAlertTriggered",
		"methods": [
			{
				"name": "traveler_id",
				"type": "MessageSender",
				"description": "The identifier of a user or chat that triggered the proximity alert"
			},
			{
				"name": "watcher_id",
				"type": "MessageSender",
				"description": "The identifier of a user or chat that subscribed for the proximity alert"
			},
			{
				"name": "distance",
				"type": "int32",
				"description": "The distance between the users"
			}
		],
		"description": "A user in the chat came within proximity alert range",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageUnsupported",
		"methods": null,
		"description": "A message content that is not supported in the current TDLib version",
		"inheritance": "MessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "TextEntityType",
		"methods": null,
		"description": "Represents a part of the text which must be formatted differently",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "textEntityTypeMention",
		"methods": null,
		"description": "A mention of a user, a supergroup, or a channel by their username",
		"inheritance": "TextEntityType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "textEntityTypeHashtag",
		"methods": null,
		"description": "A hashtag text, beginning with \"#\" and optionally containing a chat username at the end",
		"inheritance": "TextEntityType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "textEntityTypeCashtag",
		"methods": null,
		"description": "A cashtag text, beginning with \"$\", consisting of capital English letters (e.g., \"$USD\"), and optionally containing a chat username at the end",
		"inheritance": "TextEntityType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "textEntityTypeBotCommand",
		"methods": null,
		"description": "A bot command, beginning with \"/\"",
		"inheritance": "TextEntityType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "textEntityTypeUrl",
		"methods": null,
		"description": "An HTTP URL",
		"inheritance": "TextEntityType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "textEntityTypeEmailAddress",
		"methods": null,
		"description": "An email address",
		"inheritance": "TextEntityType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "textEntityTypePhoneNumber",
		"methods": null,
		"description": "A phone number",
		"inheritance": "TextEntityType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "textEntityTypeBankCardNumber",
		"methods": null,
		"description": "A bank card number. The getBankCardInfo method can be used to get information about the bank card",
		"inheritance": "TextEntityType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "textEntityTypeBold",
		"methods": null,
		"description": "A bold text",
		"inheritance": "TextEntityType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "textEntityTypeItalic",
		"methods": null,
		"description": "An italic text",
		"inheritance": "TextEntityType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "textEntityTypeUnderline",
		"methods": null,
		"description": "An underlined text",
		"inheritance": "TextEntityType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "textEntityTypeStrikethrough",
		"methods": null,
		"description": "A strikethrough text",
		"inheritance": "TextEntityType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "textEntityTypeSpoiler",
		"methods": null,
		"description": "A spoiler text",
		"inheritance": "TextEntityType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "textEntityTypeCode",
		"methods": null,
		"description": "Text that must be formatted as if inside a code HTML tag",
		"inheritance": "TextEntityType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "textEntityTypePre",
		"methods": null,
		"description": "Text that must be formatted as if inside a pre HTML tag",
		"inheritance": "TextEntityType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "textEntityTypePreCode",
		"methods": [
			{
				"name": "language",
				"type": "string",
				"description": "Programming language of the code; as defined by the sender"
			}
		],
		"description": "Text that must be formatted as if inside pre, and code HTML tags",
		"inheritance": "TextEntityType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "textEntityTypeBlockQuote",
		"methods": null,
		"description": "Text that must be formatted as if inside a blockquote HTML tag; not supported in secret chats",
		"inheritance": "TextEntityType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "textEntityTypeExpandableBlockQuote",
		"methods": null,
		"description": "Text that must be formatted as if inside a blockquote HTML tag and collapsed by default to 3 lines with the ability to show full text; not supported in secret chats",
		"inheritance": "TextEntityType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "textEntityTypeTextUrl",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "HTTP or tg:// URL to be opened when the link is clicked"
			}
		],
		"description": "A text description shown instead of a raw URL",
		"inheritance": "TextEntityType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "textEntityTypeMentionName",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the mentioned user"
			}
		],
		"description": "A text shows instead of a raw mention of the user (e.g., when the user has no username)",
		"inheritance": "TextEntityType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "textEntityTypeCustomEmoji",
		"methods": [
			{
				"name": "custom_emoji_id",
				"type": "int64",
				"description": "Unique identifier of the custom emoji"
			}
		],
		"description": "A custom emoji. The text behind a custom emoji must be an emoji. Only premium users can use premium custom emoji",
		"inheritance": "TextEntityType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "textEntityTypeMediaTimestamp",
		"methods": [
			{
				"name": "media_timestamp",
				"type": "int32",
				"description": "Timestamp from which a video/audio/video note/voice note/story playing must start, in seconds. The media can be in the content or the link preview of the current message, or in the same places in the replied message"
			}
		],
		"description": "A media timestamp",
		"inheritance": "TextEntityType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputThumbnail",
		"methods": [
			{
				"name": "thumbnail",
				"type": "InputFile",
				"description": "Thumbnail file to send. Sending thumbnails by file_id is currently not supported"
			},
			{
				"name": "width",
				"type": "int32",
				"description": "Thumbnail width, usually shouldn't exceed 320. Use 0 if unknown"
			},
			{
				"name": "height",
				"type": "int32",
				"description": "Thumbnail height, usually shouldn't exceed 320. Use 0 if unknown"
			}
		],
		"description": "A thumbnail to be sent along with a file; must be in JPEG or WEBP format for stickers, and less than 200 KB in size",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "InputPaidMediaType",
		"methods": null,
		"description": "Describes type of paid media to sent",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputPaidMediaTypePhoto",
		"methods": null,
		"description": "The media is a photo. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20",
		"inheritance": "InputPaidMediaType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputPaidMediaTypeVideo",
		"methods": [
			{
				"name": "cover",
				"type": "InputFile",
				"description": "Cover of the video; pass null to skip cover uploading"
			},
			{
				"name": "start_timestamp",
				"type": "int32",
				"description": "Timestamp from which the video playing must start, in seconds"
			},
			{
				"name": "duration",
				"type": "int32",
				"description": "Duration of the video, in seconds"
			},
			{
				"name": "supports_streaming",
				"type": "Bool",
				"description": "True, if the video is expected to be streamed"
			}
		],
		"description": "The media is a video",
		"inheritance": "InputPaidMediaType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputPaidMedia",
		"methods": [
			{
				"name": "type",
				"type": "InputPaidMediaType",
				"description": "Type of the media"
			},
			{
				"name": "media",
				"type": "InputFile",
				"description": "Photo or video to be sent"
			},
			{
				"name": "thumbnail",
				"type": "inputThumbnail",
				"description": "Media thumbnail; pass null to skip thumbnail uploading"
			},
			{
				"name": "added_sticker_file_ids",
				"type": "vector<int32>",
				"description": "File identifiers of the stickers added to the media, if applicable"
			},
			{
				"name": "width",
				"type": "int32",
				"description": "Media width"
			},
			{
				"name": "height",
				"type": "int32",
				"description": "Media height"
			}
		],
		"description": "Describes a paid media to be sent",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "MessageSchedulingState",
		"methods": null,
		"description": "Contains information about the time when a scheduled message will be sent",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageSchedulingStateSendAtDate",
		"methods": [
			{
				"name": "send_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the message will be sent. The date must be within 367 days in the future"
			}
		],
		"description": "The message will be sent at the specified date",
		"inheritance": "MessageSchedulingState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageSchedulingStateSendWhenOnline",
		"methods": null,
		"description": "The message will be sent when the other user is online. Applicable to private chats only and when the exact online status of the other user is known",
		"inheritance": "MessageSchedulingState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageSchedulingStateSendWhenVideoProcessed",
		"methods": [
			{
				"name": "send_date",
				"type": "int32",
				"description": "Approximate point in time (Unix timestamp) when the message is expected to be sent"
			}
		],
		"description": "The message will be sent when the video in the message is converted and optimized; can be used only by the server",
		"inheritance": "MessageSchedulingState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "MessageSelfDestructType",
		"methods": null,
		"description": "Describes when a message will be self-destructed",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageSelfDestructTypeTimer",
		"methods": [
			{
				"name": "self_destruct_time",
				"type": "int32",
				"description": "The message's self-destruct time, in seconds; must be between 0 and 60 in private chats"
			}
		],
		"description": "The message will be self-destructed in the specified time after its content was opened",
		"inheritance": "MessageSelfDestructType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageSelfDestructTypeImmediately",
		"methods": null,
		"description": "The message can be opened only once and will be self-destructed once closed",
		"inheritance": "MessageSelfDestructType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageSendOptions",
		"methods": [
			{
				"name": "disable_notification",
				"type": "Bool",
				"description": "Pass true to disable notification for the message"
			},
			{
				"name": "from_background",
				"type": "Bool",
				"description": "Pass true if the message is sent from the background"
			},
			{
				"name": "protect_content",
				"type": "Bool",
				"description": "Pass true if the content of the message must be protected from forwarding and saving; for bots only"
			},
			{
				"name": "allow_paid_broadcast",
				"type": "Bool",
				"description": "Pass true to allow the message to ignore regular broadcast limits for a small fee; for bots only"
			},
			{
				"name": "paid_message_star_count",
				"type": "int53",
				"description": "The number of Telegram Stars the user agreed to pay to send the messages"
			},
			{
				"name": "update_order_of_installed_sticker_sets",
				"type": "Bool",
				"description": "Pass true if the user explicitly chosen a sticker or a custom emoji from an installed sticker set; applicable only to sendMessage and sendMessageAlbum"
			},
			{
				"name": "scheduling_state",
				"type": "MessageSchedulingState",
				"description": "Message scheduling state; pass null to send message immediately. Messages sent to a secret chat, to a chat with paid messages, live location messages and self-destructing messages can't be scheduled"
			},
			{
				"name": "effect_id",
				"type": "int64",
				"description": "Identifier of the effect to apply to the message; pass 0 if none; applicable only to sendMessage and sendMessageAlbum in private chats"
			},
			{
				"name": "sending_id",
				"type": "int32",
				"description": "Non-persistent identifier, which will be returned back in messageSendingStatePending object and can be used to match sent messages and corresponding updateNewMessage updates"
			},
			{
				"name": "only_preview",
				"type": "Bool",
				"description": "Pass true to get a fake message instead of actually sending them"
			}
		],
		"description": "Options to be used when a message is sent",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageCopyOptions",
		"methods": [
			{
				"name": "send_copy",
				"type": "Bool",
				"description": "True, if content of the message needs to be copied without reference to the original sender. Always true if the message is forwarded to a secret chat or is local. Use messageProperties.can_be_saved and messageProperties.can_be_copied_to_secret_chat to check whether the message is suitable"
			},
			{
				"name": "replace_caption",
				"type": "Bool",
				"description": "True, if media caption of the message copy needs to be replaced. Ignored if send_copy is false"
			},
			{
				"name": "new_caption",
				"type": "formattedText",
				"description": "New message caption; pass null to copy message without caption. Ignored if replace_caption is false"
			},
			{
				"name": "new_show_caption_above_media",
				"type": "Bool",
				"description": "True, if new caption must be shown above the media; otherwise, new caption must be shown below the media; not supported in secret chats. Ignored if replace_caption is false"
			}
		],
		"description": "Options to be used when a message content is copied without reference to the original sender. Service messages, messages with messageInvoice, messagePaidMedia, messageGiveaway, or messageGiveawayWinners content can't be copied",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "InputMessageContent",
		"methods": null,
		"description": "The content of a message to send",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputMessageText",
		"methods": [
			{
				"name": "text",
				"type": "formattedText",
				"description": "Formatted text to be sent; 0-getOption(\"message_text_length_max\") characters. Only Bold, Italic, Underline, Strikethrough, Spoiler, CustomEmoji, BlockQuote, ExpandableBlockQuote, Code, Pre, PreCode, TextUrl and MentionName entities are allowed to be specified manually"
			},
			{
				"name": "link_preview_options",
				"type": "linkPreviewOptions",
				"description": "Options to be used for generation of a link preview; may be null if none; pass null to use default link preview options"
			},
			{
				"name": "clear_draft",
				"type": "Bool",
				"description": "True, if a chat message draft must be deleted"
			}
		],
		"description": "A text message",
		"inheritance": "InputMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputMessageAnimation",
		"methods": [
			{
				"name": "animation",
				"type": "InputFile",
				"description": "Animation file to be sent"
			},
			{
				"name": "thumbnail",
				"type": "inputThumbnail",
				"description": "Animation thumbnail; pass null to skip thumbnail uploading"
			},
			{
				"name": "added_sticker_file_ids",
				"type": "vector<int32>",
				"description": "File identifiers of the stickers added to the animation, if applicable"
			},
			{
				"name": "duration",
				"type": "int32",
				"description": "Duration of the animation, in seconds"
			},
			{
				"name": "width",
				"type": "int32",
				"description": "Width of the animation; may be replaced by the server"
			},
			{
				"name": "height",
				"type": "int32",
				"description": "Height of the animation; may be replaced by the server"
			},
			{
				"name": "caption",
				"type": "formattedText",
				"description": "Animation caption; pass null to use an empty caption; 0-getOption(\"message_caption_length_max\") characters"
			},
			{
				"name": "show_caption_above_media",
				"type": "Bool",
				"description": "True, if the caption must be shown above the animation; otherwise, the caption must be shown below the animation; not supported in secret chats"
			},
			{
				"name": "has_spoiler",
				"type": "Bool",
				"description": "True, if the animation preview must be covered by a spoiler animation; not supported in secret chats"
			}
		],
		"description": "An animation message (GIF-style).",
		"inheritance": "InputMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputMessageAudio",
		"methods": [
			{
				"name": "audio",
				"type": "InputFile",
				"description": "Audio file to be sent"
			},
			{
				"name": "album_cover_thumbnail",
				"type": "inputThumbnail",
				"description": "Thumbnail of the cover for the album; pass null to skip thumbnail uploading"
			},
			{
				"name": "duration",
				"type": "int32",
				"description": "Duration of the audio, in seconds; may be replaced by the server"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Title of the audio; 0-64 characters; may be replaced by the server"
			},
			{
				"name": "performer",
				"type": "string",
				"description": "Performer of the audio; 0-64 characters, may be replaced by the server"
			},
			{
				"name": "caption",
				"type": "formattedText",
				"description": "Audio caption; pass null to use an empty caption; 0-getOption(\"message_caption_length_max\") characters"
			}
		],
		"description": "An audio message",
		"inheritance": "InputMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputMessageDocument",
		"methods": [
			{
				"name": "document",
				"type": "InputFile",
				"description": "Document to be sent"
			},
			{
				"name": "thumbnail",
				"type": "inputThumbnail",
				"description": "Document thumbnail; pass null to skip thumbnail uploading"
			},
			{
				"name": "disable_content_type_detection",
				"type": "Bool",
				"description": "Pass true to disable automatic file type detection and send the document as a file. Always true for files sent to secret chats"
			},
			{
				"name": "caption",
				"type": "formattedText",
				"description": "Document caption; pass null to use an empty caption; 0-getOption(\"message_caption_length_max\") characters"
			}
		],
		"description": "A document message (general file)",
		"inheritance": "InputMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputMessagePaidMedia",
		"methods": [
			{
				"name": "star_count",
				"type": "int53",
				"description": "The number of Telegram Stars that must be paid to see the media; 1-getOption(\"paid_media_message_star_count_max\")"
			},
			{
				"name": "paid_media",
				"type": "vector<inputPaidMedia>",
				"description": "The content of the paid media"
			},
			{
				"name": "caption",
				"type": "formattedText",
				"description": "Message caption; pass null to use an empty caption; 0-getOption(\"message_caption_length_max\") characters"
			},
			{
				"name": "show_caption_above_media",
				"type": "Bool",
				"description": "True, if the caption must be shown above the media; otherwise, the caption must be shown below the media; not supported in secret chats"
			},
			{
				"name": "payload",
				"type": "string",
				"description": "Bot-provided data for the paid media; bots only"
			}
		],
		"description": "A message with paid media; can be used only in channel chats with supergroupFullInfo.has_paid_media_allowed",
		"inheritance": "InputMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputMessagePhoto",
		"methods": [
			{
				"name": "photo",
				"type": "InputFile",
				"description": "Photo to send. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20"
			},
			{
				"name": "thumbnail",
				"type": "inputThumbnail",
				"description": "Photo thumbnail to be sent; pass null to skip thumbnail uploading. The thumbnail is sent to the other party only in secret chats"
			},
			{
				"name": "added_sticker_file_ids",
				"type": "vector<int32>",
				"description": "File identifiers of the stickers added to the photo, if applicable"
			},
			{
				"name": "width",
				"type": "int32",
				"description": "Photo width"
			},
			{
				"name": "height",
				"type": "int32",
				"description": "Photo height"
			},
			{
				"name": "caption",
				"type": "formattedText",
				"description": "Photo caption; pass null to use an empty caption; 0-getOption(\"message_caption_length_max\") characters"
			},
			{
				"name": "show_caption_above_media",
				"type": "Bool",
				"description": "True, if the caption must be shown above the photo; otherwise, the caption must be shown below the photo; not supported in secret chats"
			},
			{
				"name": "self_destruct_type",
				"type": "MessageSelfDestructType",
				"description": "Photo self-destruct type; pass null if none; private chats only"
			},
			{
				"name": "has_spoiler",
				"type": "Bool",
				"description": "True, if the photo preview must be covered by a spoiler animation; not supported in secret chats"
			}
		],
		"description": "A photo message",
		"inheritance": "InputMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputMessageSticker",
		"methods": [
			{
				"name": "sticker",
				"type": "InputFile",
				"description": "Sticker to be sent"
			},
			{
				"name": "thumbnail",
				"type": "inputThumbnail",
				"description": "Sticker thumbnail; pass null to skip thumbnail uploading"
			},
			{
				"name": "width",
				"type": "int32",
				"description": "Sticker width"
			},
			{
				"name": "height",
				"type": "int32",
				"description": "Sticker height"
			},
			{
				"name": "emoji",
				"type": "string",
				"description": "Emoji used to choose the sticker"
			}
		],
		"description": "A sticker message",
		"inheritance": "InputMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputMessageVideo",
		"methods": [
			{
				"name": "video",
				"type": "InputFile",
				"description": "Video to be sent. The video is expected to be re-encoded to MPEG4 format with H.264 codec by the sender"
			},
			{
				"name": "thumbnail",
				"type": "inputThumbnail",
				"description": "Video thumbnail; pass null to skip thumbnail uploading"
			},
			{
				"name": "cover",
				"type": "InputFile",
				"description": "Cover of the video; pass null to skip cover uploading; not supported in secret chats and for self-destructing messages"
			},
			{
				"name": "start_timestamp",
				"type": "int32",
				"description": "Timestamp from which the video playing must start, in seconds"
			},
			{
				"name": "added_sticker_file_ids",
				"type": "vector<int32>",
				"description": "File identifiers of the stickers added to the video, if applicable"
			},
			{
				"name": "duration",
				"type": "int32",
				"description": "Duration of the video, in seconds"
			},
			{
				"name": "width",
				"type": "int32",
				"description": "Video width"
			},
			{
				"name": "height",
				"type": "int32",
				"description": "Video height"
			},
			{
				"name": "supports_streaming",
				"type": "Bool",
				"description": "True, if the video is expected to be streamed"
			},
			{
				"name": "caption",
				"type": "formattedText",
				"description": "Video caption; pass null to use an empty caption; 0-getOption(\"message_caption_length_max\") characters"
			},
			{
				"name": "show_caption_above_media",
				"type": "Bool",
				"description": "True, if the caption must be shown above the video; otherwise, the caption must be shown below the video; not supported in secret chats"
			},
			{
				"name": "self_destruct_type",
				"type": "MessageSelfDestructType",
				"description": "Video self-destruct type; pass null if none; private chats only"
			},
			{
				"name": "has_spoiler",
				"type": "Bool",
				"description": "True, if the video preview must be covered by a spoiler animation; not supported in secret chats"
			}
		],
		"description": "A video message",
		"inheritance": "InputMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputMessageVideoNote",
		"methods": [
			{
				"name": "video_note",
				"type": "InputFile",
				"description": "Video note to be sent. The video is expected to be encoded to MPEG4 format with H.264 codec and have no data outside of the visible circle"
			},
			{
				"name": "thumbnail",
				"type": "inputThumbnail",
				"description": "Video thumbnail; may be null if empty; pass null to skip thumbnail uploading"
			},
			{
				"name": "duration",
				"type": "int32",
				"description": "Duration of the video, in seconds; 0-60"
			},
			{
				"name": "length",
				"type": "int32",
				"description": "Video width and height; must be positive and not greater than 640"
			},
			{
				"name": "self_destruct_type",
				"type": "MessageSelfDestructType",
				"description": "Video note self-destruct type; may be null if none; pass null if none; private chats only"
			}
		],
		"description": "A video note message",
		"inheritance": "InputMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputMessageVoiceNote",
		"methods": [
			{
				"name": "voice_note",
				"type": "InputFile",
				"description": "Voice note to be sent. The voice note must be encoded with the Opus codec and stored inside an OGG container with a single audio channel, or be in MP3 or M4A format as regular audio"
			},
			{
				"name": "duration",
				"type": "int32",
				"description": "Duration of the voice note, in seconds"
			},
			{
				"name": "waveform",
				"type": "bytes",
				"description": "Waveform representation of the voice note in 5-bit format"
			},
			{
				"name": "caption",
				"type": "formattedText",
				"description": "Voice note caption; may be null if empty; pass null to use an empty caption; 0-getOption(\"message_caption_length_max\") characters"
			},
			{
				"name": "self_destruct_type",
				"type": "MessageSelfDestructType",
				"description": "Voice note self-destruct type; may be null if none; pass null if none; private chats only"
			}
		],
		"description": "A voice note message",
		"inheritance": "InputMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputMessageLocation",
		"methods": [
			{
				"name": "location",
				"type": "location",
				"description": "Location to be sent"
			},
			{
				"name": "live_period",
				"type": "int32",
				"description": "Period for which the location can be updated, in seconds; must be between 60 and 86400 for a temporary live location, 0x7FFFFFFF for permanent live location, and 0 otherwise"
			},
			{
				"name": "heading",
				"type": "int32",
				"description": "For live locations, a direction in which the location moves, in degrees; 1-360. Pass 0 if unknown"
			},
			{
				"name": "proximity_alert_radius",
				"type": "int32",
				"description": "For live locations, a maximum distance to another chat member for proximity alerts, in meters (0-100000). Pass 0 if the notification is disabled. Can't be enabled in channels and Saved Messages"
			}
		],
		"description": "A message with a location",
		"inheritance": "InputMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputMessageVenue",
		"methods": [
			{
				"name": "venue",
				"type": "venue",
				"description": "Venue to send"
			}
		],
		"description": "A message with information about a venue",
		"inheritance": "InputMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputMessageContact",
		"methods": [
			{
				"name": "contact",
				"type": "contact",
				"description": "Contact to send"
			}
		],
		"description": "A message containing a user contact",
		"inheritance": "InputMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputMessageDice",
		"methods": [
			{
				"name": "emoji",
				"type": "string",
				"description": "Emoji on which the dice throw animation is based"
			},
			{
				"name": "clear_draft",
				"type": "Bool",
				"description": "True, if the chat message draft must be deleted"
			}
		],
		"description": "A dice message",
		"inheritance": "InputMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputMessageGame",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "User identifier of the bot that owns the game"
			},
			{
				"name": "game_short_name",
				"type": "string",
				"description": "Short name of the game"
			}
		],
		"description": "A message with a game; not supported for channels or secret chats",
		"inheritance": "InputMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputMessageInvoice",
		"methods": [
			{
				"name": "invoice",
				"type": "invoice",
				"description": "Invoice"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Product title; 1-32 characters"
			},
			{
				"name": "description",
				"type": "string",
				"description": "Product description; 0-255 characters"
			},
			{
				"name": "photo_url",
				"type": "string",
				"description": "Product photo URL; optional"
			},
			{
				"name": "photo_size",
				"type": "int32",
				"description": "Product photo size"
			},
			{
				"name": "photo_width",
				"type": "int32",
				"description": "Product photo width"
			},
			{
				"name": "photo_height",
				"type": "int32",
				"description": "Product photo height"
			},
			{
				"name": "payload",
				"type": "bytes",
				"description": "The invoice payload"
			},
			{
				"name": "provider_token",
				"type": "string",
				"description": "Payment provider token; may be empty for payments in Telegram Stars"
			},
			{
				"name": "provider_data",
				"type": "string",
				"description": "JSON-encoded data about the invoice, which will be shared with the payment provider"
			},
			{
				"name": "start_parameter",
				"type": "string",
				"description": "Unique invoice bot deep link parameter for the generation of this invoice. If empty, it would be possible to pay directly from forwards of the invoice message"
			},
			{
				"name": "paid_media",
				"type": "inputPaidMedia",
				"description": "The content of paid media attached to the invoice; pass null if none"
			},
			{
				"name": "paid_media_caption",
				"type": "formattedText",
				"description": "Paid media caption; pass null to use an empty caption; 0-getOption(\"message_caption_length_max\") characters"
			}
		],
		"description": "A message with an invoice; can be used only by bots",
		"inheritance": "InputMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputMessagePoll",
		"methods": [
			{
				"name": "question",
				"type": "formattedText",
				"description": "Poll question; 1-255 characters (up to 300 characters for bots). Only custom emoji entities are allowed to be added and only by Premium users"
			},
			{
				"name": "options",
				"type": "vector<formattedText>",
				"description": "List of poll answer options, 2-10 strings 1-100 characters each. Only custom emoji entities are allowed to be added and only by Premium users"
			},
			{
				"name": "is_anonymous",
				"type": "Bool",
				"description": "True, if the poll voters are anonymous. Non-anonymous polls can't be sent or forwarded to channels"
			},
			{
				"name": "type",
				"type": "PollType",
				"description": "Type of the poll"
			},
			{
				"name": "open_period",
				"type": "int32",
				"description": "Amount of time the poll will be active after creation, in seconds; for bots only"
			},
			{
				"name": "close_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the poll will automatically be closed; for bots only"
			},
			{
				"name": "is_closed",
				"type": "Bool",
				"description": "True, if the poll needs to be sent already closed; for bots only"
			}
		],
		"description": "A message with a poll. Polls can't be sent to secret chats. Polls can be sent only to a private chat with a bot",
		"inheritance": "InputMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputMessageStory",
		"methods": [
			{
				"name": "story_sender_chat_id",
				"type": "int53",
				"description": "Identifier of the chat that posted the story"
			},
			{
				"name": "story_id",
				"type": "int32",
				"description": "Story identifier"
			}
		],
		"description": "A message with a forwarded story. Stories can't be sent to secret chats. A story can be forwarded only if story.can_be_forwarded",
		"inheritance": "InputMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputMessageForwarded",
		"methods": [
			{
				"name": "from_chat_id",
				"type": "int53",
				"description": "Identifier for the chat this forwarded message came from"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message to forward. A message can be forwarded only if messageProperties.can_be_forwarded"
			},
			{
				"name": "in_game_share",
				"type": "Bool",
				"description": "Pass true if a game message is being shared from a launched game; applies only to game messages"
			},
			{
				"name": "replace_video_start_timestamp",
				"type": "Bool",
				"description": "Pass true to replace video start timestamp in the forwarded message"
			},
			{
				"name": "new_video_start_timestamp",
				"type": "int32",
				"description": "The new video start timestamp; ignored if replace_video_start_timestamp == false"
			},
			{
				"name": "copy_options",
				"type": "messageCopyOptions",
				"description": "Options to be used to copy content of the message without reference to the original sender; pass null to forward the message as usual"
			}
		],
		"description": "A forwarded message",
		"inheritance": "InputMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageProperties",
		"methods": [
			{
				"name": "can_be_copied_to_secret_chat",
				"type": "Bool",
				"description": "True, if content of the message can be copied to a secret chat using inputMessageForwarded or forwardMessages with copy options"
			},
			{
				"name": "can_be_deleted_only_for_self",
				"type": "Bool",
				"description": "True, if the message can be deleted only for the current user while other users will continue to see it using the method deleteMessages with revoke == false"
			},
			{
				"name": "can_be_deleted_for_all_users",
				"type": "Bool",
				"description": "True, if the message can be deleted for all users using the method deleteMessages with revoke == true"
			},
			{
				"name": "can_be_edited",
				"type": "Bool",
				"description": "True, if the message can be edited using the methods editMessageText, editMessageCaption, or editMessageReplyMarkup. For live location and poll messages this fields shows whether editMessageLiveLocation or stopPoll can be used with this message"
			},
			{
				"name": "can_be_forwarded",
				"type": "Bool",
				"description": "True, if the message can be forwarded using inputMessageForwarded or forwardMessages"
			},
			{
				"name": "can_be_paid",
				"type": "Bool",
				"description": "True, if the message can be paid using inputInvoiceMessage"
			},
			{
				"name": "can_be_pinned",
				"type": "Bool",
				"description": "True, if the message can be pinned or unpinned in the chat using pinChatMessage or unpinChatMessage"
			},
			{
				"name": "can_be_replied",
				"type": "Bool",
				"description": "True, if the message can be replied in the same chat and forum topic using inputMessageReplyToMessage"
			},
			{
				"name": "can_be_replied_in_another_chat",
				"type": "Bool",
				"description": "True, if the message can be replied in another chat or forum topic using inputMessageReplyToExternalMessage"
			},
			{
				"name": "can_be_saved",
				"type": "Bool",
				"description": "True, if content of the message can be saved locally or copied using inputMessageForwarded or forwardMessages with copy options"
			},
			{
				"name": "can_be_shared_in_story",
				"type": "Bool",
				"description": "True, if the message can be shared in a story using inputStoryAreaTypeMessage"
			},
			{
				"name": "can_edit_media",
				"type": "Bool",
				"description": "True, if the message can be edited using the method editMessageMedia"
			},
			{
				"name": "can_edit_scheduling_state",
				"type": "Bool",
				"description": "True, if scheduling state of the message can be edited"
			},
			{
				"name": "can_get_embedding_code",
				"type": "Bool",
				"description": "True, if code for message embedding can be received using getMessageEmbeddingCode"
			},
			{
				"name": "can_get_link",
				"type": "Bool",
				"description": "True, if a link can be generated for the message using getMessageLink"
			},
			{
				"name": "can_get_media_timestamp_links",
				"type": "Bool",
				"description": "True, if media timestamp links can be generated for media timestamp entities in the message text, caption or link preview description using getMessageLink"
			},
			{
				"name": "can_get_message_thread",
				"type": "Bool",
				"description": "True, if information about the message thread is available through getMessageThread and getMessageThreadHistory"
			},
			{
				"name": "can_get_read_date",
				"type": "Bool",
				"description": "True, if read date of the message can be received through getMessageReadDate"
			},
			{
				"name": "can_get_statistics",
				"type": "Bool",
				"description": "True, if message statistics are available through getMessageStatistics and message forwards can be received using getMessagePublicForwards"
			},
			{
				"name": "can_get_viewers",
				"type": "Bool",
				"description": "True, if chat members already viewed the message can be received through getMessageViewers"
			},
			{
				"name": "can_recognize_speech",
				"type": "Bool",
				"description": "True, if speech can be recognized for the message through recognizeSpeech"
			},
			{
				"name": "can_report_chat",
				"type": "Bool",
				"description": "True, if the message can be reported using reportChat"
			},
			{
				"name": "can_report_reactions",
				"type": "Bool",
				"description": "True, if reactions on the message can be reported through reportMessageReactions"
			},
			{
				"name": "can_report_supergroup_spam",
				"type": "Bool",
				"description": "True, if the message can be reported using reportSupergroupSpam"
			},
			{
				"name": "can_set_fact_check",
				"type": "Bool",
				"description": "True, if fact check for the message can be changed through setMessageFactCheck"
			},
			{
				"name": "need_show_statistics",
				"type": "Bool",
				"description": "True, if message statistics must be available from context menu of the message"
			}
		],
		"description": "Contains properties of a message and describes actions that can be done with the message right now",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "SearchMessagesFilter",
		"methods": null,
		"description": "Represents a filter for message search results",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "searchMessagesFilterEmpty",
		"methods": null,
		"description": "Returns all found messages, no filter is applied",
		"inheritance": "SearchMessagesFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "searchMessagesFilterAnimation",
		"methods": null,
		"description": "Returns only animation messages",
		"inheritance": "SearchMessagesFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "searchMessagesFilterAudio",
		"methods": null,
		"description": "Returns only audio messages",
		"inheritance": "SearchMessagesFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "searchMessagesFilterDocument",
		"methods": null,
		"description": "Returns only document messages",
		"inheritance": "SearchMessagesFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "searchMessagesFilterPhoto",
		"methods": null,
		"description": "Returns only photo messages",
		"inheritance": "SearchMessagesFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "searchMessagesFilterVideo",
		"methods": null,
		"description": "Returns only video messages",
		"inheritance": "SearchMessagesFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "searchMessagesFilterVoiceNote",
		"methods": null,
		"description": "Returns only voice note messages",
		"inheritance": "SearchMessagesFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "searchMessagesFilterPhotoAndVideo",
		"methods": null,
		"description": "Returns only photo and video messages",
		"inheritance": "SearchMessagesFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "searchMessagesFilterUrl",
		"methods": null,
		"description": "Returns only messages containing URLs",
		"inheritance": "SearchMessagesFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "searchMessagesFilterChatPhoto",
		"methods": null,
		"description": "Returns only messages containing chat photos",
		"inheritance": "SearchMessagesFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "searchMessagesFilterVideoNote",
		"methods": null,
		"description": "Returns only video note messages",
		"inheritance": "SearchMessagesFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "searchMessagesFilterVoiceAndVideoNote",
		"methods": null,
		"description": "Returns only voice and video note messages",
		"inheritance": "SearchMessagesFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "searchMessagesFilterMention",
		"methods": null,
		"description": "Returns only messages with mentions of the current user, or messages that are replies to their messages",
		"inheritance": "SearchMessagesFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "searchMessagesFilterUnreadMention",
		"methods": null,
		"description": "Returns only messages with unread mentions of the current user, or messages that are replies to their messages. When using this filter the results can't be additionally filtered by a query, a message thread or by the sending user",
		"inheritance": "SearchMessagesFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "searchMessagesFilterUnreadReaction",
		"methods": null,
		"description": "Returns only messages with unread reactions for the current user. When using this filter the results can't be additionally filtered by a query, a message thread or by the sending user",
		"inheritance": "SearchMessagesFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "searchMessagesFilterFailedToSend",
		"methods": null,
		"description": "Returns only failed to send messages. This filter can be used only if the message database is used",
		"inheritance": "SearchMessagesFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "searchMessagesFilterPinned",
		"methods": null,
		"description": "Returns only pinned messages",
		"inheritance": "SearchMessagesFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "SearchMessagesChatTypeFilter",
		"methods": null,
		"description": "Represents a filter for type of the chats in which to search messages",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "searchMessagesChatTypeFilterPrivate",
		"methods": null,
		"description": "Returns only messages in private chats",
		"inheritance": "SearchMessagesChatTypeFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "searchMessagesChatTypeFilterGroup",
		"methods": null,
		"description": "Returns only messages in basic group and supergroup chats",
		"inheritance": "SearchMessagesChatTypeFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "searchMessagesChatTypeFilterChannel",
		"methods": null,
		"description": "Returns only messages in channel chats",
		"inheritance": "SearchMessagesChatTypeFilter",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ChatAction",
		"methods": null,
		"description": "Describes the different types of activity in a chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatActionTyping",
		"methods": null,
		"description": "The user is typing a message",
		"inheritance": "ChatAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatActionRecordingVideo",
		"methods": null,
		"description": "The user is recording a video",
		"inheritance": "ChatAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatActionUploadingVideo",
		"methods": [
			{
				"name": "progress",
				"type": "int32",
				"description": "Upload progress, as a percentage"
			}
		],
		"description": "The user is uploading a video",
		"inheritance": "ChatAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatActionRecordingVoiceNote",
		"methods": null,
		"description": "The user is recording a voice note",
		"inheritance": "ChatAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatActionUploadingVoiceNote",
		"methods": [
			{
				"name": "progress",
				"type": "int32",
				"description": "Upload progress, as a percentage"
			}
		],
		"description": "The user is uploading a voice note",
		"inheritance": "ChatAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatActionUploadingPhoto",
		"methods": [
			{
				"name": "progress",
				"type": "int32",
				"description": "Upload progress, as a percentage"
			}
		],
		"description": "The user is uploading a photo",
		"inheritance": "ChatAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatActionUploadingDocument",
		"methods": [
			{
				"name": "progress",
				"type": "int32",
				"description": "Upload progress, as a percentage"
			}
		],
		"description": "The user is uploading a document",
		"inheritance": "ChatAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatActionChoosingSticker",
		"methods": null,
		"description": "The user is picking a sticker to send",
		"inheritance": "ChatAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatActionChoosingLocation",
		"methods": null,
		"description": "The user is picking a location or venue to send",
		"inheritance": "ChatAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatActionChoosingContact",
		"methods": null,
		"description": "The user is picking a contact to send",
		"inheritance": "ChatAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatActionStartPlayingGame",
		"methods": null,
		"description": "The user has started to play a game",
		"inheritance": "ChatAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatActionRecordingVideoNote",
		"methods": null,
		"description": "The user is recording a video note",
		"inheritance": "ChatAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatActionUploadingVideoNote",
		"methods": [
			{
				"name": "progress",
				"type": "int32",
				"description": "Upload progress, as a percentage"
			}
		],
		"description": "The user is uploading a video note",
		"inheritance": "ChatAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatActionWatchingAnimations",
		"methods": [
			{
				"name": "emoji",
				"type": "string",
				"description": "The animated emoji"
			}
		],
		"description": "The user is watching animations sent by the other party by clicking on an animated emoji",
		"inheritance": "ChatAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatActionCancel",
		"methods": null,
		"description": "The user has canceled the previous action",
		"inheritance": "ChatAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "UserStatus",
		"methods": null,
		"description": "Describes the last time the user was online",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userStatusEmpty",
		"methods": null,
		"description": "The user's status has never been changed",
		"inheritance": "UserStatus",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userStatusOnline",
		"methods": [
			{
				"name": "expires",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the user's online status will expire"
			}
		],
		"description": "The user is online",
		"inheritance": "UserStatus",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userStatusOffline",
		"methods": [
			{
				"name": "was_online",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the user was last online"
			}
		],
		"description": "The user is offline",
		"inheritance": "UserStatus",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userStatusRecently",
		"methods": [
			{
				"name": "by_my_privacy_settings",
				"type": "Bool",
				"description": "Exact user's status is hidden because the current user enabled userPrivacySettingShowStatus privacy setting for the user and has no Telegram Premium"
			}
		],
		"description": "The user was online recently",
		"inheritance": "UserStatus",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userStatusLastWeek",
		"methods": [
			{
				"name": "by_my_privacy_settings",
				"type": "Bool",
				"description": "Exact user's status is hidden because the current user enabled userPrivacySettingShowStatus privacy setting for the user and has no Telegram Premium"
			}
		],
		"description": "The user is offline, but was online last week",
		"inheritance": "UserStatus",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userStatusLastMonth",
		"methods": [
			{
				"name": "by_my_privacy_settings",
				"type": "Bool",
				"description": "Exact user's status is hidden because the current user enabled userPrivacySettingShowStatus privacy setting for the user and has no Telegram Premium"
			}
		],
		"description": "The user is offline, but was online last month",
		"inheritance": "UserStatus",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "emojiKeyword",
		"methods": [
			{
				"name": "emoji",
				"type": "string",
				"description": "The emoji"
			},
			{
				"name": "keyword",
				"type": "string",
				"description": "The keyword"
			}
		],
		"description": "Represents an emoji with its keyword",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "emojiKeywords",
		"methods": [
			{
				"name": "emoji_keywords",
				"type": "vector<emojiKeyword>",
				"description": "List of emojis with their keywords"
			}
		],
		"description": "Represents a list of emojis with their keywords",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "stickers",
		"methods": [
			{
				"name": "stickers",
				"type": "vector<sticker>",
				"description": "List of stickers"
			}
		],
		"description": "Represents a list of stickers",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "emojis",
		"methods": [
			{
				"name": "emojis",
				"type": "vector<string>",
				"description": "List of emojis"
			}
		],
		"description": "Represents a list of emojis",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "stickerSet",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "Identifier of the sticker set"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Title of the sticker set"
			},
			{
				"name": "name",
				"type": "string",
				"description": "Name of the sticker set"
			},
			{
				"name": "thumbnail",
				"type": "thumbnail",
				"description": "Sticker set thumbnail in WEBP, TGS, or WEBM format with width and height 100; may be null. The file can be downloaded only before the thumbnail is changed"
			},
			{
				"name": "thumbnail_outline",
				"type": "outline",
				"description": "Sticker set thumbnail's outline; may be null if unknown"
			},
			{
				"name": "is_owned",
				"type": "Bool",
				"description": "True, if the sticker set is owned by the current user"
			},
			{
				"name": "is_installed",
				"type": "Bool",
				"description": "True, if the sticker set has been installed by the current user"
			},
			{
				"name": "is_archived",
				"type": "Bool",
				"description": "True, if the sticker set has been archived. A sticker set can't be installed and archived simultaneously"
			},
			{
				"name": "is_official",
				"type": "Bool",
				"description": "True, if the sticker set is official"
			},
			{
				"name": "sticker_type",
				"type": "StickerType",
				"description": "Type of the stickers in the set"
			},
			{
				"name": "needs_repainting",
				"type": "Bool",
				"description": "True, if stickers in the sticker set are custom emoji that must be repainted; for custom emoji sticker sets only"
			},
			{
				"name": "is_allowed_as_chat_emoji_status",
				"type": "Bool",
				"description": "True, if stickers in the sticker set are custom emoji that can be used as chat emoji status; for custom emoji sticker sets only"
			},
			{
				"name": "is_viewed",
				"type": "Bool",
				"description": "True for already viewed trending sticker sets"
			},
			{
				"name": "stickers",
				"type": "vector<sticker>",
				"description": "List of stickers in this set"
			},
			{
				"name": "emojis",
				"type": "vector<emojis>",
				"description": "A list of emojis corresponding to the stickers in the same order. The list is only for informational purposes, because a sticker is always sent with a fixed emoji from the corresponding Sticker object"
			}
		],
		"description": "Represents a sticker set",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "stickerSetInfo",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "Identifier of the sticker set"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Title of the sticker set"
			},
			{
				"name": "name",
				"type": "string",
				"description": "Name of the sticker set"
			},
			{
				"name": "thumbnail",
				"type": "thumbnail",
				"description": "Sticker set thumbnail in WEBP, TGS, or WEBM format with width and height 100; may be null. The file can be downloaded only before the thumbnail is changed"
			},
			{
				"name": "thumbnail_outline",
				"type": "outline",
				"description": "Sticker set thumbnail's outline; may be null if unknown"
			},
			{
				"name": "is_owned",
				"type": "Bool",
				"description": "True, if the sticker set is owned by the current user"
			},
			{
				"name": "is_installed",
				"type": "Bool",
				"description": "True, if the sticker set has been installed by the current user"
			},
			{
				"name": "is_archived",
				"type": "Bool",
				"description": "True, if the sticker set has been archived. A sticker set can't be installed and archived simultaneously"
			},
			{
				"name": "is_official",
				"type": "Bool",
				"description": "True, if the sticker set is official"
			},
			{
				"name": "sticker_type",
				"type": "StickerType",
				"description": "Type of the stickers in the set"
			},
			{
				"name": "needs_repainting",
				"type": "Bool",
				"description": "True, if stickers in the sticker set are custom emoji that must be repainted; for custom emoji sticker sets only"
			},
			{
				"name": "is_allowed_as_chat_emoji_status",
				"type": "Bool",
				"description": "True, if stickers in the sticker set are custom emoji that can be used as chat emoji status; for custom emoji sticker sets only"
			},
			{
				"name": "is_viewed",
				"type": "Bool",
				"description": "True for already viewed trending sticker sets"
			},
			{
				"name": "size",
				"type": "int32",
				"description": "Total number of stickers in the set"
			},
			{
				"name": "covers",
				"type": "vector<sticker>",
				"description": "Up to the first 5 stickers from the set, depending on the context. If the application needs more stickers the full sticker set needs to be requested"
			}
		],
		"description": "Represents short information about a sticker set",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "stickerSets",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "Approximate total number of sticker sets found"
			},
			{
				"name": "sets",
				"type": "vector<stickerSetInfo>",
				"description": "List of sticker sets"
			}
		],
		"description": "Represents a list of sticker sets",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "trendingStickerSets",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "Approximate total number of trending sticker sets"
			},
			{
				"name": "sets",
				"type": "vector<stickerSetInfo>",
				"description": "List of trending sticker sets"
			},
			{
				"name": "is_premium",
				"type": "Bool",
				"description": "True, if the list contains sticker sets with premium stickers"
			}
		],
		"description": "Represents a list of trending sticker sets",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "EmojiCategorySource",
		"methods": null,
		"description": "Describes source of stickers for an emoji category",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "emojiCategorySourceSearch",
		"methods": [
			{
				"name": "emojis",
				"type": "vector<string>",
				"description": "List of emojis to search for"
			}
		],
		"description": "The category contains a list of similar emoji to search for in getStickers and searchStickers for stickers, or getInlineQueryResults with the bot getOption(\"animation_search_bot_username\") for animations",
		"inheritance": "EmojiCategorySource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "emojiCategorySourcePremium",
		"methods": null,
		"description": "The category contains premium stickers that must be found by getPremiumStickers",
		"inheritance": "EmojiCategorySource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "emojiCategory",
		"methods": [
			{
				"name": "name",
				"type": "string",
				"description": "Name of the category"
			},
			{
				"name": "icon",
				"type": "sticker",
				"description": "Custom emoji sticker, which represents icon of the category"
			},
			{
				"name": "source",
				"type": "EmojiCategorySource",
				"description": "Source of stickers for the emoji category"
			},
			{
				"name": "is_greeting",
				"type": "Bool",
				"description": "True, if the category must be shown first when choosing a sticker for the start page"
			}
		],
		"description": "Describes an emoji category",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "emojiCategories",
		"methods": [
			{
				"name": "categories",
				"type": "vector<emojiCategory>",
				"description": "List of categories"
			}
		],
		"description": "Represents a list of emoji categories",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "EmojiCategoryType",
		"methods": null,
		"description": "Describes type of emoji category",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "emojiCategoryTypeDefault",
		"methods": null,
		"description": "The category must be used by default (e.g., for custom emoji or animation search)",
		"inheritance": "EmojiCategoryType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "emojiCategoryTypeRegularStickers",
		"methods": null,
		"description": "The category must be used by default for regular sticker selection. It may contain greeting emoji category and premium stickers",
		"inheritance": "EmojiCategoryType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "emojiCategoryTypeEmojiStatus",
		"methods": null,
		"description": "The category must be used for emoji status selection",
		"inheritance": "EmojiCategoryType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "emojiCategoryTypeChatPhoto",
		"methods": null,
		"description": "The category must be used for chat photo emoji selection",
		"inheritance": "EmojiCategoryType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "currentWeather",
		"methods": [
			{
				"name": "temperature",
				"type": "double",
				"description": "Temperature, in degree Celsius"
			},
			{
				"name": "emoji",
				"type": "string",
				"description": "Emoji representing the weather"
			}
		],
		"description": "Describes the current weather",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyAreaPosition",
		"methods": [
			{
				"name": "x_percentage",
				"type": "double",
				"description": "The abscissa of the rectangle's center, as a percentage of the media width"
			},
			{
				"name": "y_percentage",
				"type": "double",
				"description": "The ordinate of the rectangle's center, as a percentage of the media height"
			},
			{
				"name": "width_percentage",
				"type": "double",
				"description": "The width of the rectangle, as a percentage of the media width"
			},
			{
				"name": "height_percentage",
				"type": "double",
				"description": "The height of the rectangle, as a percentage of the media height"
			},
			{
				"name": "rotation_angle",
				"type": "double",
				"description": "Clockwise rotation angle of the rectangle, in degrees; 0-360"
			},
			{
				"name": "corner_radius_percentage",
				"type": "double",
				"description": "The radius of the rectangle corner rounding, as a percentage of the media width"
			}
		],
		"description": "Describes position of a clickable rectangle area on a story media",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "StoryAreaType",
		"methods": null,
		"description": "Describes type of clickable area on a story media",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyAreaTypeLocation",
		"methods": [
			{
				"name": "location",
				"type": "location",
				"description": "The location"
			},
			{
				"name": "address",
				"type": "locationAddress",
				"description": "Address of the location; may be null if unknown"
			}
		],
		"description": "An area pointing to a location",
		"inheritance": "StoryAreaType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyAreaTypeVenue",
		"methods": [
			{
				"name": "venue",
				"type": "venue",
				"description": "Information about the venue"
			}
		],
		"description": "An area pointing to a venue",
		"inheritance": "StoryAreaType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyAreaTypeSuggestedReaction",
		"methods": [
			{
				"name": "reaction_type",
				"type": "ReactionType",
				"description": "Type of the reaction"
			},
			{
				"name": "total_count",
				"type": "int32",
				"description": "Number of times the reaction was added"
			},
			{
				"name": "is_dark",
				"type": "Bool",
				"description": "True, if reaction has a dark background"
			},
			{
				"name": "is_flipped",
				"type": "Bool",
				"description": "True, if reaction corner is flipped"
			}
		],
		"description": "An area pointing to a suggested reaction. App needs to show a clickable reaction on the area and call setStoryReaction when the are is clicked",
		"inheritance": "StoryAreaType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyAreaTypeMessage",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat with the message"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message"
			}
		],
		"description": "An area pointing to a message",
		"inheritance": "StoryAreaType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyAreaTypeLink",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "HTTP or tg:// URL to be opened when the area is clicked"
			}
		],
		"description": "An area pointing to a HTTP or tg:// link",
		"inheritance": "StoryAreaType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyAreaTypeWeather",
		"methods": [
			{
				"name": "temperature",
				"type": "double",
				"description": "Temperature, in degree Celsius"
			},
			{
				"name": "emoji",
				"type": "string",
				"description": "Emoji representing the weather"
			},
			{
				"name": "background_color",
				"type": "int32",
				"description": "A color of the area background in the ARGB format"
			}
		],
		"description": "An area with information about weather",
		"inheritance": "StoryAreaType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyAreaTypeUpgradedGift",
		"methods": [
			{
				"name": "gift_name",
				"type": "string",
				"description": "Unique name of the upgraded gift"
			}
		],
		"description": "An area with an upgraded gift",
		"inheritance": "StoryAreaType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyArea",
		"methods": [
			{
				"name": "position",
				"type": "storyAreaPosition",
				"description": "Position of the area"
			},
			{
				"name": "type",
				"type": "StoryAreaType",
				"description": "Type of the area"
			}
		],
		"description": "Describes a clickable rectangle area on a story media",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "InputStoryAreaType",
		"methods": null,
		"description": "Describes type of clickable area on a story media to be added",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputStoryAreaTypeLocation",
		"methods": [
			{
				"name": "location",
				"type": "location",
				"description": "The location"
			},
			{
				"name": "address",
				"type": "locationAddress",
				"description": "Address of the location; pass null if unknown"
			}
		],
		"description": "An area pointing to a location",
		"inheritance": "InputStoryAreaType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputStoryAreaTypeFoundVenue",
		"methods": [
			{
				"name": "query_id",
				"type": "int64",
				"description": "Identifier of the inline query, used to found the venue"
			},
			{
				"name": "result_id",
				"type": "string",
				"description": "Identifier of the inline query result"
			}
		],
		"description": "An area pointing to a venue found by the bot getOption(\"venue_search_bot_username\")",
		"inheritance": "InputStoryAreaType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputStoryAreaTypePreviousVenue",
		"methods": [
			{
				"name": "venue_provider",
				"type": "string",
				"description": "Provider of the venue"
			},
			{
				"name": "venue_id",
				"type": "string",
				"description": "Identifier of the venue in the provider database"
			}
		],
		"description": "An area pointing to a venue already added to the story",
		"inheritance": "InputStoryAreaType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputStoryAreaTypeSuggestedReaction",
		"methods": [
			{
				"name": "reaction_type",
				"type": "ReactionType",
				"description": "Type of the reaction"
			},
			{
				"name": "is_dark",
				"type": "Bool",
				"description": "True, if reaction has a dark background"
			},
			{
				"name": "is_flipped",
				"type": "Bool",
				"description": "True, if reaction corner is flipped"
			}
		],
		"description": "An area pointing to a suggested reaction",
		"inheritance": "InputStoryAreaType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputStoryAreaTypeMessage",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat with the message. Currently, the chat must be a supergroup or a channel chat"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message. Use messageProperties.can_be_shared_in_story to check whether the message is suitable"
			}
		],
		"description": "An area pointing to a message",
		"inheritance": "InputStoryAreaType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputStoryAreaTypeLink",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "HTTP or tg:// URL to be opened when the area is clicked"
			}
		],
		"description": "An area pointing to a HTTP or tg:// link",
		"inheritance": "InputStoryAreaType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputStoryAreaTypeWeather",
		"methods": [
			{
				"name": "temperature",
				"type": "double",
				"description": "Temperature, in degree Celsius"
			},
			{
				"name": "emoji",
				"type": "string",
				"description": "Emoji representing the weather"
			},
			{
				"name": "background_color",
				"type": "int32",
				"description": "A color of the area background in the ARGB format"
			}
		],
		"description": "An area with information about weather",
		"inheritance": "InputStoryAreaType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputStoryAreaTypeUpgradedGift",
		"methods": [
			{
				"name": "gift_name",
				"type": "string",
				"description": "Unique name of the upgraded gift"
			}
		],
		"description": "An area with an upgraded gift",
		"inheritance": "InputStoryAreaType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputStoryArea",
		"methods": [
			{
				"name": "position",
				"type": "storyAreaPosition",
				"description": "Position of the area"
			},
			{
				"name": "type",
				"type": "InputStoryAreaType",
				"description": "Type of the area"
			}
		],
		"description": "Describes a clickable rectangle area on a story media to be added",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputStoryAreas",
		"methods": [
			{
				"name": "areas",
				"type": "vector<inputStoryArea>",
				"description": "List of input story areas. Currently, a story can have up to 10 inputStoryAreaTypeLocation, inputStoryAreaTypeFoundVenue, and inputStoryAreaTypePreviousVenue areas, up to getOption(\"story_suggested_reaction_area_count_max\") inputStoryAreaTypeSuggestedReaction areas, up to 1 inputStoryAreaTypeMessage area, up to getOption(\"story_link_area_count_max\") inputStoryAreaTypeLink areas if the current user is a Telegram Premium user, up to 3 inputStoryAreaTypeWeather areas, and up to 1 inputStoryAreaTypeUpgradedGift area"
			}
		],
		"description": "Contains a list of story areas to be added",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyVideo",
		"methods": [
			{
				"name": "duration",
				"type": "double",
				"description": "Duration of the video, in seconds"
			},
			{
				"name": "width",
				"type": "int32",
				"description": "Video width"
			},
			{
				"name": "height",
				"type": "int32",
				"description": "Video height"
			},
			{
				"name": "has_stickers",
				"type": "Bool",
				"description": "True, if stickers were added to the video. The list of corresponding sticker sets can be received using getAttachedStickerSets"
			},
			{
				"name": "is_animation",
				"type": "Bool",
				"description": "True, if the video has no sound"
			},
			{
				"name": "minithumbnail",
				"type": "minithumbnail",
				"description": "Video minithumbnail; may be null"
			},
			{
				"name": "thumbnail",
				"type": "thumbnail",
				"description": "Video thumbnail in JPEG or MPEG4 format; may be null"
			},
			{
				"name": "preload_prefix_size",
				"type": "int32",
				"description": "Size of file prefix, which is expected to be preloaded, in bytes"
			},
			{
				"name": "cover_frame_timestamp",
				"type": "double",
				"description": "Timestamp of the frame used as video thumbnail"
			},
			{
				"name": "video",
				"type": "file",
				"description": "File containing the video"
			}
		],
		"description": "Describes a video file sent in a story",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "StoryContent",
		"methods": null,
		"description": "Contains the content of a story",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyContentPhoto",
		"methods": [
			{
				"name": "photo",
				"type": "photo",
				"description": "The photo"
			}
		],
		"description": "A photo story",
		"inheritance": "StoryContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyContentVideo",
		"methods": [
			{
				"name": "video",
				"type": "storyVideo",
				"description": "The video in MPEG4 format"
			},
			{
				"name": "alternative_video",
				"type": "storyVideo",
				"description": "Alternative version of the video in MPEG4 format, encoded with H.264 codec; may be null"
			}
		],
		"description": "A video story",
		"inheritance": "StoryContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyContentUnsupported",
		"methods": null,
		"description": "A story content that is not supported in the current TDLib version",
		"inheritance": "StoryContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "InputStoryContent",
		"methods": null,
		"description": "The content of a story to send",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputStoryContentPhoto",
		"methods": [
			{
				"name": "photo",
				"type": "InputFile",
				"description": "Photo to send. The photo must be at most 10 MB in size. The photo size must be 1080x1920"
			},
			{
				"name": "added_sticker_file_ids",
				"type": "vector<int32>",
				"description": "File identifiers of the stickers added to the photo, if applicable"
			}
		],
		"description": "A photo story",
		"inheritance": "InputStoryContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputStoryContentVideo",
		"methods": [
			{
				"name": "video",
				"type": "InputFile",
				"description": "Video to be sent. The video size must be 720x1280. The video must be streamable and stored in MPEG4 format, after encoding with H.265 codec and key frames added each second"
			},
			{
				"name": "added_sticker_file_ids",
				"type": "vector<int32>",
				"description": "File identifiers of the stickers added to the video, if applicable"
			},
			{
				"name": "duration",
				"type": "double",
				"description": "Precise duration of the video, in seconds; 0-60"
			},
			{
				"name": "cover_frame_timestamp",
				"type": "double",
				"description": "Timestamp of the frame, which will be used as video thumbnail"
			},
			{
				"name": "is_animation",
				"type": "Bool",
				"description": "True, if the video has no sound"
			}
		],
		"description": "A video story",
		"inheritance": "InputStoryContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "StoryList",
		"methods": null,
		"description": "Describes a list of stories",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyListMain",
		"methods": null,
		"description": "The list of stories, shown in the main chat list and folder chat lists",
		"inheritance": "StoryList",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyListArchive",
		"methods": null,
		"description": "The list of stories, shown in the Arvhive chat list",
		"inheritance": "StoryList",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "StoryOrigin",
		"methods": null,
		"description": "Contains information about the origin of a story that was reposted",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyOriginPublicStory",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat that posted original story"
			},
			{
				"name": "story_id",
				"type": "int32",
				"description": "Story identifier of the original story"
			}
		],
		"description": "The original story was a public story with known sender",
		"inheritance": "StoryOrigin",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyOriginHiddenUser",
		"methods": [
			{
				"name": "sender_name",
				"type": "string",
				"description": "Name of the story sender"
			}
		],
		"description": "The original story was sent by an unknown user",
		"inheritance": "StoryOrigin",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyRepostInfo",
		"methods": [
			{
				"name": "origin",
				"type": "StoryOrigin",
				"description": "Origin of the story that was reposted"
			},
			{
				"name": "is_content_modified",
				"type": "Bool",
				"description": "True, if story content was modified during reposting; otherwise, story wasn't modified"
			}
		],
		"description": "Contains information about original story that was reposted",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyInteractionInfo",
		"methods": [
			{
				"name": "view_count",
				"type": "int32",
				"description": "Number of times the story was viewed"
			},
			{
				"name": "forward_count",
				"type": "int32",
				"description": "Number of times the story was forwarded; 0 if none or unknown"
			},
			{
				"name": "reaction_count",
				"type": "int32",
				"description": "Number of reactions added to the story; 0 if none or unknown"
			},
			{
				"name": "recent_viewer_user_ids",
				"type": "vector<int53>",
				"description": "Identifiers of at most 3 recent viewers of the story"
			}
		],
		"description": "Contains information about interactions with a story",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "story",
		"methods": [
			{
				"name": "id",
				"type": "int32",
				"description": "Unique story identifier among stories of the given sender"
			},
			{
				"name": "sender_chat_id",
				"type": "int53",
				"description": "Identifier of the chat that posted the story"
			},
			{
				"name": "sender_id",
				"type": "MessageSender",
				"description": "Identifier of the sender of the story; may be null if the story is posted on behalf of the sender_chat_id"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the story was published"
			},
			{
				"name": "is_being_sent",
				"type": "Bool",
				"description": "True, if the story is being sent by the current user"
			},
			{
				"name": "is_being_edited",
				"type": "Bool",
				"description": "True, if the story is being edited by the current user"
			},
			{
				"name": "is_edited",
				"type": "Bool",
				"description": "True, if the story was edited"
			},
			{
				"name": "is_posted_to_chat_page",
				"type": "Bool",
				"description": "True, if the story is saved in the sender's profile and will be available there after expiration"
			},
			{
				"name": "is_visible_only_for_self",
				"type": "Bool",
				"description": "True, if the story is visible only for the current user"
			},
			{
				"name": "can_be_deleted",
				"type": "Bool",
				"description": "True, if the story can be deleted"
			},
			{
				"name": "can_be_edited",
				"type": "Bool",
				"description": "True, if the story can be edited"
			},
			{
				"name": "can_be_forwarded",
				"type": "Bool",
				"description": "True, if the story can be forwarded as a message. Otherwise, screenshots and saving of the story content must be also forbidden"
			},
			{
				"name": "can_be_replied",
				"type": "Bool",
				"description": "True, if the story can be replied in the chat with the story sender"
			},
			{
				"name": "can_toggle_is_posted_to_chat_page",
				"type": "Bool",
				"description": "True, if the story's is_posted_to_chat_page value can be changed"
			},
			{
				"name": "can_get_statistics",
				"type": "Bool",
				"description": "True, if the story statistics are available through getStoryStatistics"
			},
			{
				"name": "can_get_interactions",
				"type": "Bool",
				"description": "True, if interactions with the story can be received through getStoryInteractions"
			},
			{
				"name": "has_expired_viewers",
				"type": "Bool",
				"description": "True, if users viewed the story can't be received, because the story has expired more than getOption(\"story_viewers_expiration_delay\") seconds ago"
			},
			{
				"name": "repost_info",
				"type": "storyRepostInfo",
				"description": "Information about the original story; may be null if the story wasn't reposted"
			},
			{
				"name": "interaction_info",
				"type": "storyInteractionInfo",
				"description": "Information about interactions with the story; may be null if the story isn't owned or there were no interactions"
			},
			{
				"name": "chosen_reaction_type",
				"type": "ReactionType",
				"description": "Type of the chosen reaction; may be null if none"
			},
			{
				"name": "privacy_settings",
				"type": "StoryPrivacySettings",
				"description": "Privacy rules affecting story visibility; may be approximate for non-owned stories"
			},
			{
				"name": "content",
				"type": "StoryContent",
				"description": "Content of the story"
			},
			{
				"name": "areas",
				"type": "vector<storyArea>",
				"description": "Clickable areas to be shown on the story content"
			},
			{
				"name": "caption",
				"type": "formattedText",
				"description": "Caption of the story"
			}
		],
		"description": "Represents a story",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "stories",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "Approximate total number of stories found"
			},
			{
				"name": "stories",
				"type": "vector<story>",
				"description": "The list of stories"
			},
			{
				"name": "pinned_story_ids",
				"type": "vector<int32>",
				"description": "Identifiers of the pinned stories; returned only in getChatPostedToChatPageStories with from_story_id == 0"
			}
		],
		"description": "Represents a list of stories",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "foundStories",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "Approximate total number of stories found"
			},
			{
				"name": "stories",
				"type": "vector<story>",
				"description": "List of stories"
			},
			{
				"name": "next_offset",
				"type": "string",
				"description": "The offset for the next request. If empty, then there are no more results"
			}
		],
		"description": "Contains a list of stories found by a search",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyFullId",
		"methods": [
			{
				"name": "sender_chat_id",
				"type": "int53",
				"description": "Identifier of the chat that posted the story"
			},
			{
				"name": "story_id",
				"type": "int32",
				"description": "Unique story identifier among stories of the given sender"
			}
		],
		"description": "Contains identifier of a story along with identifier of its sender",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyInfo",
		"methods": [
			{
				"name": "story_id",
				"type": "int32",
				"description": "Unique story identifier among stories of the given sender"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the story was published"
			},
			{
				"name": "is_for_close_friends",
				"type": "Bool",
				"description": "True, if the story is available only to close friends"
			}
		],
		"description": "Contains basic information about a story",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatActiveStories",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat that posted the stories"
			},
			{
				"name": "list",
				"type": "StoryList",
				"description": "Identifier of the story list in which the stories are shown; may be null if the stories aren't shown in a story list"
			},
			{
				"name": "order",
				"type": "int53",
				"description": "A parameter used to determine order of the stories in the story list; 0 if the stories doesn't need to be shown in the story list. Stories must be sorted by the pair (order, story_sender_chat_id) in descending order"
			},
			{
				"name": "max_read_story_id",
				"type": "int32",
				"description": "Identifier of the last read active story"
			},
			{
				"name": "stories",
				"type": "vector<storyInfo>",
				"description": "Basic information about the stories; use getStory to get full information about the stories. The stories are in chronological order (i.e., in order of increasing story identifiers)"
			}
		],
		"description": "Describes active stories posted by a chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "StoryInteractionType",
		"methods": null,
		"description": "Describes type of interaction with a story",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyInteractionTypeView",
		"methods": [
			{
				"name": "chosen_reaction_type",
				"type": "ReactionType",
				"description": "Type of the reaction that was chosen by the viewer; may be null if none"
			}
		],
		"description": "A view of the story",
		"inheritance": "StoryInteractionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyInteractionTypeForward",
		"methods": [
			{
				"name": "message",
				"type": "message",
				"description": "The message with story forward"
			}
		],
		"description": "A forward of the story as a message",
		"inheritance": "StoryInteractionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyInteractionTypeRepost",
		"methods": [
			{
				"name": "story",
				"type": "story",
				"description": "The reposted story"
			}
		],
		"description": "A repost of the story as a story",
		"inheritance": "StoryInteractionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyInteraction",
		"methods": [
			{
				"name": "actor_id",
				"type": "MessageSender",
				"description": "Identifier of the user or chat that made the interaction"
			},
			{
				"name": "interaction_date",
				"type": "int32",
				"description": "Approximate point in time (Unix timestamp) when the interaction happened"
			},
			{
				"name": "block_list",
				"type": "BlockList",
				"description": "Block list to which the actor is added; may be null if none or for chat stories"
			},
			{
				"name": "type",
				"type": "StoryInteractionType",
				"description": "Type of the interaction"
			}
		],
		"description": "Represents interaction with a story",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyInteractions",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "Approximate total number of interactions found"
			},
			{
				"name": "total_forward_count",
				"type": "int32",
				"description": "Approximate total number of found forwards and reposts; always 0 for chat stories"
			},
			{
				"name": "total_reaction_count",
				"type": "int32",
				"description": "Approximate total number of found reactions; always 0 for chat stories"
			},
			{
				"name": "interactions",
				"type": "vector<storyInteraction>",
				"description": "List of story interactions"
			},
			{
				"name": "next_offset",
				"type": "string",
				"description": "The offset for the next request. If empty, then there are no more results"
			}
		],
		"description": "Represents a list of interactions with a story",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "quickReplyMessage",
		"methods": [
			{
				"name": "id",
				"type": "int53",
				"description": "Unique message identifier among all quick replies"
			},
			{
				"name": "sending_state",
				"type": "MessageSendingState",
				"description": "The sending state of the message; may be null if the message isn't being sent and didn't fail to be sent"
			},
			{
				"name": "can_be_edited",
				"type": "Bool",
				"description": "True, if the message can be edited"
			},
			{
				"name": "reply_to_message_id",
				"type": "int53",
				"description": "The identifier of the quick reply message to which the message replies; 0 if none"
			},
			{
				"name": "via_bot_user_id",
				"type": "int53",
				"description": "If non-zero, the user identifier of the bot through which this message was sent"
			},
			{
				"name": "media_album_id",
				"type": "int64",
				"description": "Unique identifier of an album this message belongs to; 0 if none. Only audios, documents, photos and videos can be grouped together in albums"
			},
			{
				"name": "content",
				"type": "MessageContent",
				"description": "Content of the message"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "Inline keyboard reply markup for the message; may be null if none"
			}
		],
		"description": "Describes a message that can be used for quick reply",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "quickReplyMessages",
		"methods": [
			{
				"name": "messages",
				"type": "vector<quickReplyMessage>",
				"description": "List of quick reply messages; messages may be null"
			}
		],
		"description": "Contains a list of quick reply messages",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "quickReplyShortcut",
		"methods": [
			{
				"name": "id",
				"type": "int32",
				"description": "Unique shortcut identifier"
			},
			{
				"name": "name",
				"type": "string",
				"description": "The name of the shortcut that can be used to use the shortcut"
			},
			{
				"name": "first_message",
				"type": "quickReplyMessage",
				"description": "The first shortcut message"
			},
			{
				"name": "message_count",
				"type": "int32",
				"description": "The total number of messages in the shortcut"
			}
		],
		"description": "Describes a shortcut that can be used for a quick reply",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "PublicForward",
		"methods": null,
		"description": "Describes a public forward or repost of a story",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "publicForwardMessage",
		"methods": [
			{
				"name": "message",
				"type": "message",
				"description": "Information about the message"
			}
		],
		"description": "Contains a public forward as a message",
		"inheritance": "PublicForward",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "publicForwardStory",
		"methods": [
			{
				"name": "story",
				"type": "story",
				"description": "Information about the story"
			}
		],
		"description": "Contains a public repost to a story",
		"inheritance": "PublicForward",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "publicForwards",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "Approximate total number of messages and stories found"
			},
			{
				"name": "forwards",
				"type": "vector<PublicForward>",
				"description": "List of found public forwards and reposts"
			},
			{
				"name": "next_offset",
				"type": "string",
				"description": "The offset for the next request. If empty, then there are no more results"
			}
		],
		"description": "Represents a list of public forwards and reposts as a story of a message or a story",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "botMediaPreview",
		"methods": [
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the preview was added or changed last time"
			},
			{
				"name": "content",
				"type": "StoryContent",
				"description": "Content of the preview"
			}
		],
		"description": "Describes media previews of a bot",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "botMediaPreviews",
		"methods": [
			{
				"name": "previews",
				"type": "vector<botMediaPreview>",
				"description": "List of media previews"
			}
		],
		"description": "Contains a list of media previews of a bot",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "botMediaPreviewInfo",
		"methods": [
			{
				"name": "previews",
				"type": "vector<botMediaPreview>",
				"description": "List of media previews"
			},
			{
				"name": "language_codes",
				"type": "vector<string>",
				"description": "List of language codes for which the bot has dedicated previews"
			}
		],
		"description": "Contains a list of media previews of a bot for the given language and the list of languages for which the bot has dedicated previews",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatBoostLevelFeatures",
		"methods": [
			{
				"name": "level",
				"type": "int32",
				"description": "Target chat boost level"
			},
			{
				"name": "story_per_day_count",
				"type": "int32",
				"description": "Number of stories that the chat can publish daily"
			},
			{
				"name": "custom_emoji_reaction_count",
				"type": "int32",
				"description": "Number of custom emoji reactions that can be added to the list of available reactions"
			},
			{
				"name": "title_color_count",
				"type": "int32",
				"description": "Number of custom colors for chat title"
			},
			{
				"name": "profile_accent_color_count",
				"type": "int32",
				"description": "Number of custom colors for profile photo background"
			},
			{
				"name": "can_set_profile_background_custom_emoji",
				"type": "Bool",
				"description": "True, if custom emoji for profile background can be set"
			},
			{
				"name": "accent_color_count",
				"type": "int32",
				"description": "Number of custom colors for background of empty chat photo, replies to messages and link previews"
			},
			{
				"name": "can_set_background_custom_emoji",
				"type": "Bool",
				"description": "True, if custom emoji for reply header and link preview background can be set"
			},
			{
				"name": "can_set_emoji_status",
				"type": "Bool",
				"description": "True, if emoji status can be set"
			},
			{
				"name": "chat_theme_background_count",
				"type": "int32",
				"description": "Number of chat theme backgrounds that can be set as chat background"
			},
			{
				"name": "can_set_custom_background",
				"type": "Bool",
				"description": "True, if custom background can be set in the chat for all users"
			},
			{
				"name": "can_set_custom_emoji_sticker_set",
				"type": "Bool",
				"description": "True, if custom emoji sticker set can be set for the chat"
			},
			{
				"name": "can_recognize_speech",
				"type": "Bool",
				"description": "True, if speech recognition can be used for video note and voice note messages by all users"
			},
			{
				"name": "can_disable_sponsored_messages",
				"type": "Bool",
				"description": "True, if sponsored messages can be disabled in the chat"
			}
		],
		"description": "Contains a list of features available on a specific chat boost level",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatBoostFeatures",
		"methods": [
			{
				"name": "features",
				"type": "vector<chatBoostLevelFeatures>",
				"description": "The list of features"
			},
			{
				"name": "min_profile_background_custom_emoji_boost_level",
				"type": "int32",
				"description": "The minimum boost level required to set custom emoji for profile background"
			},
			{
				"name": "min_background_custom_emoji_boost_level",
				"type": "int32",
				"description": "The minimum boost level required to set custom emoji for reply header and link preview background; for channel chats only"
			},
			{
				"name": "min_emoji_status_boost_level",
				"type": "int32",
				"description": "The minimum boost level required to set emoji status"
			},
			{
				"name": "min_chat_theme_background_boost_level",
				"type": "int32",
				"description": "The minimum boost level required to set a chat theme background as chat background"
			},
			{
				"name": "min_custom_background_boost_level",
				"type": "int32",
				"description": "The minimum boost level required to set custom chat background"
			},
			{
				"name": "min_custom_emoji_sticker_set_boost_level",
				"type": "int32",
				"description": "The minimum boost level required to set custom emoji sticker set for the chat; for supergroup chats only"
			},
			{
				"name": "min_speech_recognition_boost_level",
				"type": "int32",
				"description": "The minimum boost level allowing to recognize speech in video note and voice note messages for non-Premium users; for supergroup chats only"
			},
			{
				"name": "min_sponsored_message_disable_boost_level",
				"type": "int32",
				"description": "The minimum boost level allowing to disable sponsored messages in the chat; for channel chats only"
			}
		],
		"description": "Contains a list of features available on the first chat boost levels",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ChatBoostSource",
		"methods": null,
		"description": "Describes source of a chat boost",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatBoostSourceGiftCode",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of a user, for which the gift code was created"
			},
			{
				"name": "gift_code",
				"type": "string",
				"description": "The created Telegram Premium gift code, which is known only if this is a gift code for the current user, or it has already been claimed"
			}
		],
		"description": "The chat created a Telegram Premium gift code for a user",
		"inheritance": "ChatBoostSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatBoostSourceGiveaway",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of a user that won in the giveaway; 0 if none"
			},
			{
				"name": "gift_code",
				"type": "string",
				"description": "The created Telegram Premium gift code if it was used by the user or can be claimed by the current user; an empty string otherwise; for Telegram Premium giveways only"
			},
			{
				"name": "star_count",
				"type": "int53",
				"description": "Number of Telegram Stars distributed among winners of the giveaway"
			},
			{
				"name": "giveaway_message_id",
				"type": "int53",
				"description": "Identifier of the corresponding giveaway message; can be an identifier of a deleted message"
			},
			{
				"name": "is_unclaimed",
				"type": "Bool",
				"description": "True, if the winner for the corresponding giveaway prize wasn't chosen, because there were not enough participants"
			}
		],
		"description": "The chat created a giveaway",
		"inheritance": "ChatBoostSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatBoostSourcePremium",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user"
			}
		],
		"description": "A user with Telegram Premium subscription or gifted Telegram Premium boosted the chat",
		"inheritance": "ChatBoostSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "prepaidGiveaway",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "Unique identifier of the prepaid giveaway"
			},
			{
				"name": "winner_count",
				"type": "int32",
				"description": "Number of users which will receive giveaway prize"
			},
			{
				"name": "prize",
				"type": "GiveawayPrize",
				"description": "Prize of the giveaway"
			},
			{
				"name": "boost_count",
				"type": "int32",
				"description": "The number of boosts received by the chat from the giveaway; for Telegram Star giveaways only"
			},
			{
				"name": "payment_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the giveaway was paid"
			}
		],
		"description": "Describes a prepaid giveaway",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatBoostStatus",
		"methods": [
			{
				"name": "boost_url",
				"type": "string",
				"description": "An HTTP URL, which can be used to boost the chat"
			},
			{
				"name": "applied_slot_ids",
				"type": "vector<int32>",
				"description": "Identifiers of boost slots of the current user applied to the chat"
			},
			{
				"name": "level",
				"type": "int32",
				"description": "Current boost level of the chat"
			},
			{
				"name": "gift_code_boost_count",
				"type": "int32",
				"description": "The number of boosts received by the chat from created Telegram Premium gift codes and giveaways; always 0 if the current user isn't an administrator in the chat"
			},
			{
				"name": "boost_count",
				"type": "int32",
				"description": "The number of boosts received by the chat"
			},
			{
				"name": "current_level_boost_count",
				"type": "int32",
				"description": "The number of boosts added to reach the current level"
			},
			{
				"name": "next_level_boost_count",
				"type": "int32",
				"description": "The number of boosts needed to reach the next level; 0 if the next level isn't available"
			},
			{
				"name": "premium_member_count",
				"type": "int32",
				"description": "Approximate number of Telegram Premium subscribers joined the chat; always 0 if the current user isn't an administrator in the chat"
			},
			{
				"name": "premium_member_percentage",
				"type": "double",
				"description": "A percentage of Telegram Premium subscribers joined the chat; always 0 if the current user isn't an administrator in the chat"
			},
			{
				"name": "prepaid_giveaways",
				"type": "vector<prepaidGiveaway>",
				"description": "The list of prepaid giveaways available for the chat; only for chat administrators"
			}
		],
		"description": "Describes current boost status of a chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatBoost",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the boost"
			},
			{
				"name": "count",
				"type": "int32",
				"description": "The number of identical boosts applied"
			},
			{
				"name": "source",
				"type": "ChatBoostSource",
				"description": "Source of the boost"
			},
			{
				"name": "start_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the chat was boosted"
			},
			{
				"name": "expiration_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the boost will expire"
			}
		],
		"description": "Describes a boost applied to a chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "foundChatBoosts",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "Total number of boosts applied to the chat"
			},
			{
				"name": "boosts",
				"type": "vector<chatBoost>",
				"description": "List of boosts"
			},
			{
				"name": "next_offset",
				"type": "string",
				"description": "The offset for the next request. If empty, then there are no more results"
			}
		],
		"description": "Contains a list of boosts applied to a chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatBoostSlot",
		"methods": [
			{
				"name": "slot_id",
				"type": "int32",
				"description": "Unique identifier of the slot"
			},
			{
				"name": "currently_boosted_chat_id",
				"type": "int53",
				"description": "Identifier of the currently boosted chat; 0 if none"
			},
			{
				"name": "start_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the chat was boosted; 0 if none"
			},
			{
				"name": "expiration_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the boost will expire"
			},
			{
				"name": "cooldown_until_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) after which the boost can be used for another chat"
			}
		],
		"description": "Describes a slot for chat boost",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatBoostSlots",
		"methods": [
			{
				"name": "slots",
				"type": "vector<chatBoostSlot>",
				"description": "List of boost slots"
			}
		],
		"description": "Contains a list of chat boost slots",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ResendCodeReason",
		"methods": null,
		"description": "Describes the reason why a code needs to be re-sent",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "resendCodeReasonUserRequest",
		"methods": null,
		"description": "The user requested to resend the code",
		"inheritance": "ResendCodeReason",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "resendCodeReasonVerificationFailed",
		"methods": [
			{
				"name": "error_message",
				"type": "string",
				"description": "Cause of the verification failure, for example, PLAY_SERVICES_NOT_AVAILABLE, APNS_RECEIVE_TIMEOUT, or APNS_INIT_FAILED"
			}
		],
		"description": "The code is re-sent, because device verification has failed",
		"inheritance": "ResendCodeReason",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "CallDiscardReason",
		"methods": null,
		"description": "Describes the reason why a call was discarded",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callDiscardReasonEmpty",
		"methods": null,
		"description": "The call wasn't discarded, or the reason is unknown",
		"inheritance": "CallDiscardReason",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callDiscardReasonMissed",
		"methods": null,
		"description": "The call was ended before the conversation started. It was canceled by the caller or missed by the other party",
		"inheritance": "CallDiscardReason",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callDiscardReasonDeclined",
		"methods": null,
		"description": "The call was ended before the conversation started. It was declined by the other party",
		"inheritance": "CallDiscardReason",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callDiscardReasonDisconnected",
		"methods": null,
		"description": "The call was ended during the conversation because the users were disconnected",
		"inheritance": "CallDiscardReason",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callDiscardReasonHungUp",
		"methods": null,
		"description": "The call was ended because one of the parties hung up",
		"inheritance": "CallDiscardReason",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callDiscardReasonAllowGroupCall",
		"methods": [
			{
				"name": "encrypted_group_call_key",
				"type": "bytes",
				"description": "Encrypted using the call private key encryption key for the associated group call"
			}
		],
		"description": "The call was ended because it has been used successfully to transfer private encryption key for the associated group call",
		"inheritance": "CallDiscardReason",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callProtocol",
		"methods": [
			{
				"name": "udp_p2p",
				"type": "Bool",
				"description": "True, if UDP peer-to-peer connections are supported"
			},
			{
				"name": "udp_reflector",
				"type": "Bool",
				"description": "True, if connection through UDP reflectors is supported"
			},
			{
				"name": "min_layer",
				"type": "int32",
				"description": "The minimum supported API layer; use 65"
			},
			{
				"name": "max_layer",
				"type": "int32",
				"description": "The maximum supported API layer; use 92"
			},
			{
				"name": "library_versions",
				"type": "vector<string>",
				"description": "List of supported tgcalls versions"
			}
		],
		"description": "Specifies the supported call protocols",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "CallServerType",
		"methods": null,
		"description": "Describes the type of call server",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callServerTypeTelegramReflector",
		"methods": [
			{
				"name": "peer_tag",
				"type": "bytes",
				"description": "A peer tag to be used with the reflector"
			},
			{
				"name": "is_tcp",
				"type": "Bool",
				"description": "True, if the server uses TCP instead of UDP"
			}
		],
		"description": "A Telegram call reflector",
		"inheritance": "CallServerType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callServerTypeWebrtc",
		"methods": [
			{
				"name": "username",
				"type": "string",
				"description": "Username to be used for authentication"
			},
			{
				"name": "password",
				"type": "string",
				"description": "Authentication password"
			},
			{
				"name": "supports_turn",
				"type": "Bool",
				"description": "True, if the server supports TURN"
			},
			{
				"name": "supports_stun",
				"type": "Bool",
				"description": "True, if the server supports STUN"
			}
		],
		"description": "A WebRTC server",
		"inheritance": "CallServerType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callServer",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "Server identifier"
			},
			{
				"name": "ip_address",
				"type": "string",
				"description": "Server IPv4 address"
			},
			{
				"name": "ipv6_address",
				"type": "string",
				"description": "Server IPv6 address"
			},
			{
				"name": "port",
				"type": "int32",
				"description": "Server port number"
			},
			{
				"name": "type",
				"type": "CallServerType",
				"description": "Server type"
			}
		],
		"description": "Describes a server for relaying call data",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callId",
		"methods": [
			{
				"name": "id",
				"type": "int32",
				"description": "Call identifier"
			}
		],
		"description": "Contains the call identifier",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "groupCallId",
		"methods": [
			{
				"name": "id",
				"type": "int32",
				"description": "Group call identifier"
			}
		],
		"description": "Contains the group call identifier",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "CallState",
		"methods": null,
		"description": "Describes the current call state",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callStatePending",
		"methods": [
			{
				"name": "is_created",
				"type": "Bool",
				"description": "True, if the call has already been created by the server"
			},
			{
				"name": "is_received",
				"type": "Bool",
				"description": "True, if the call has already been received by the other party"
			}
		],
		"description": "The call is pending, waiting to be accepted by a user",
		"inheritance": "CallState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callStateExchangingKeys",
		"methods": null,
		"description": "The call has been answered and encryption keys are being exchanged",
		"inheritance": "CallState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callStateReady",
		"methods": [
			{
				"name": "protocol",
				"type": "callProtocol",
				"description": "Call protocols supported by the other call participant"
			},
			{
				"name": "servers",
				"type": "vector<callServer>",
				"description": "List of available call servers"
			},
			{
				"name": "config",
				"type": "string",
				"description": "A JSON-encoded call config"
			},
			{
				"name": "encryption_key",
				"type": "bytes",
				"description": "Call encryption key"
			},
			{
				"name": "emojis",
				"type": "vector<string>",
				"description": "Encryption key fingerprint represented as 4 emoji"
			},
			{
				"name": "allow_p2p",
				"type": "Bool",
				"description": "True, if peer-to-peer connection is allowed by users privacy settings"
			},
			{
				"name": "custom_parameters",
				"type": "string",
				"description": "Custom JSON-encoded call parameters to be passed to tgcalls"
			}
		],
		"description": "The call is ready to use",
		"inheritance": "CallState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callStateHangingUp",
		"methods": null,
		"description": "The call is hanging up after discardCall has been called",
		"inheritance": "CallState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callStateDiscarded",
		"methods": [
			{
				"name": "reason",
				"type": "CallDiscardReason",
				"description": "The reason why the call has ended"
			},
			{
				"name": "need_rating",
				"type": "Bool",
				"description": "True, if the call rating must be sent to the server"
			},
			{
				"name": "need_debug_information",
				"type": "Bool",
				"description": "True, if the call debug information must be sent to the server"
			},
			{
				"name": "need_log",
				"type": "Bool",
				"description": "True, if the call log must be sent to the server"
			}
		],
		"description": "The call has ended successfully",
		"inheritance": "CallState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callStateError",
		"methods": [
			{
				"name": "error",
				"type": "error",
				"description": "Error. An error with the code 4005000 will be returned if an outgoing call is missed because of an expired timeout"
			}
		],
		"description": "The call has ended with an error",
		"inheritance": "CallState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "GroupCallVideoQuality",
		"methods": null,
		"description": "Describes the quality of a group call video",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "groupCallVideoQualityThumbnail",
		"methods": null,
		"description": "The worst available video quality",
		"inheritance": "GroupCallVideoQuality",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "groupCallVideoQualityMedium",
		"methods": null,
		"description": "The medium video quality",
		"inheritance": "GroupCallVideoQuality",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "groupCallVideoQualityFull",
		"methods": null,
		"description": "The best available video quality",
		"inheritance": "GroupCallVideoQuality",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "groupCallStream",
		"methods": [
			{
				"name": "channel_id",
				"type": "int32",
				"description": "Identifier of an audio/video channel"
			},
			{
				"name": "scale",
				"type": "int32",
				"description": "Scale of segment durations in the stream. The duration is 1000/(2**scale) milliseconds"
			},
			{
				"name": "time_offset",
				"type": "int53",
				"description": "Point in time when the stream currently ends; Unix timestamp in milliseconds"
			}
		],
		"description": "Describes an available stream in a group call",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "groupCallStreams",
		"methods": [
			{
				"name": "streams",
				"type": "vector<groupCallStream>",
				"description": "A list of group call streams"
			}
		],
		"description": "Represents a list of group call streams",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "rtmpUrl",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "The URL"
			},
			{
				"name": "stream_key",
				"type": "string",
				"description": "Stream key"
			}
		],
		"description": "Represents an RTMP URL",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "groupCallRecentSpeaker",
		"methods": [
			{
				"name": "participant_id",
				"type": "MessageSender",
				"description": "Group call participant identifier"
			},
			{
				"name": "is_speaking",
				"type": "Bool",
				"description": "True, is the user has spoken recently"
			}
		],
		"description": "Describes a recently speaking participant in a group call",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "groupCall",
		"methods": [
			{
				"name": "id",
				"type": "int32",
				"description": "Group call identifier"
			},
			{
				"name": "from_call_id",
				"type": "int32",
				"description": "Identifier of one-to-one call from which the group call was created; 0 if unknown"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Group call title"
			},
			{
				"name": "scheduled_start_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the group call is expected to be started by an administrator; 0 if it is already active or was ended"
			},
			{
				"name": "enabled_start_notification",
				"type": "Bool",
				"description": "True, if the group call is scheduled and the current user will receive a notification when the group call starts"
			},
			{
				"name": "is_active",
				"type": "Bool",
				"description": "True, if the call is active"
			},
			{
				"name": "is_rtmp_stream",
				"type": "Bool",
				"description": "True, if the chat is an RTMP stream instead of an ordinary video chat"
			},
			{
				"name": "is_joined",
				"type": "Bool",
				"description": "True, if the call is joined"
			},
			{
				"name": "need_rejoin",
				"type": "Bool",
				"description": "True, if user was kicked from the call because of network loss and the call needs to be rejoined"
			},
			{
				"name": "can_be_managed",
				"type": "Bool",
				"description": "True, if the current user can manage the group call"
			},
			{
				"name": "participant_count",
				"type": "int32",
				"description": "Number of participants in the group call"
			},
			{
				"name": "has_hidden_listeners",
				"type": "Bool",
				"description": "True, if group call participants, which are muted, aren't returned in participant list"
			},
			{
				"name": "loaded_all_participants",
				"type": "Bool",
				"description": "True, if all group call participants are loaded"
			},
			{
				"name": "recent_speakers",
				"type": "vector<groupCallRecentSpeaker>",
				"description": "At most 3 recently speaking users in the group call"
			},
			{
				"name": "is_my_video_enabled",
				"type": "Bool",
				"description": "True, if the current user's video is enabled"
			},
			{
				"name": "is_my_video_paused",
				"type": "Bool",
				"description": "True, if the current user's video is paused"
			},
			{
				"name": "can_enable_video",
				"type": "Bool",
				"description": "True, if the current user can broadcast video or share screen"
			},
			{
				"name": "mute_new_participants",
				"type": "Bool",
				"description": "True, if only group call administrators can unmute new participants"
			},
			{
				"name": "can_toggle_mute_new_participants",
				"type": "Bool",
				"description": "True, if the current user can enable or disable mute_new_participants setting"
			},
			{
				"name": "record_duration",
				"type": "int32",
				"description": "Duration of the ongoing group call recording, in seconds; 0 if none. An updateGroupCall update is not triggered when value of this field changes, but the same recording goes on"
			},
			{
				"name": "is_video_recorded",
				"type": "Bool",
				"description": "True, if a video file is being recorded for the call"
			},
			{
				"name": "duration",
				"type": "int32",
				"description": "Call duration, in seconds; for ended calls only"
			}
		],
		"description": "Describes a group call",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "groupCallVideoSourceGroup",
		"methods": [
			{
				"name": "semantics",
				"type": "string",
				"description": "The semantics of sources, one of \"SIM\" or \"FID\""
			},
			{
				"name": "source_ids",
				"type": "vector<int32>",
				"description": "The list of synchronization source identifiers"
			}
		],
		"description": "Describes a group of video synchronization source identifiers",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "groupCallParticipantVideoInfo",
		"methods": [
			{
				"name": "source_groups",
				"type": "vector<groupCallVideoSourceGroup>",
				"description": "List of synchronization source groups of the video"
			},
			{
				"name": "endpoint_id",
				"type": "string",
				"description": "Video channel endpoint identifier"
			},
			{
				"name": "is_paused",
				"type": "Bool",
				"description": "True, if the video is paused. This flag needs to be ignored, if new video frames are received"
			}
		],
		"description": "Contains information about a group call participant's video channel",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "groupCallParticipant",
		"methods": [
			{
				"name": "participant_id",
				"type": "MessageSender",
				"description": "Identifier of the group call participant"
			},
			{
				"name": "audio_source_id",
				"type": "int32",
				"description": "User's audio channel synchronization source identifier"
			},
			{
				"name": "screen_sharing_audio_source_id",
				"type": "int32",
				"description": "User's screen sharing audio channel synchronization source identifier"
			},
			{
				"name": "video_info",
				"type": "groupCallParticipantVideoInfo",
				"description": "Information about user's video channel; may be null if there is no active video"
			},
			{
				"name": "screen_sharing_video_info",
				"type": "groupCallParticipantVideoInfo",
				"description": "Information about user's screen sharing video channel; may be null if there is no active screen sharing video"
			},
			{
				"name": "bio",
				"type": "string",
				"description": "The participant user's bio or the participant chat's description"
			},
			{
				"name": "is_current_user",
				"type": "Bool",
				"description": "True, if the participant is the current user"
			},
			{
				"name": "is_speaking",
				"type": "Bool",
				"description": "True, if the participant is speaking as set by setGroupCallParticipantIsSpeaking"
			},
			{
				"name": "is_hand_raised",
				"type": "Bool",
				"description": "True, if the participant hand is raised"
			},
			{
				"name": "can_be_muted_for_all_users",
				"type": "Bool",
				"description": "True, if the current user can mute the participant for all other group call participants"
			},
			{
				"name": "can_be_unmuted_for_all_users",
				"type": "Bool",
				"description": "True, if the current user can allow the participant to unmute themselves or unmute the participant (if the participant is the current user)"
			},
			{
				"name": "can_be_muted_for_current_user",
				"type": "Bool",
				"description": "True, if the current user can mute the participant only for self"
			},
			{
				"name": "can_be_unmuted_for_current_user",
				"type": "Bool",
				"description": "True, if the current user can unmute the participant for self"
			},
			{
				"name": "is_muted_for_all_users",
				"type": "Bool",
				"description": "True, if the participant is muted for all users"
			},
			{
				"name": "is_muted_for_current_user",
				"type": "Bool",
				"description": "True, if the participant is muted for the current user"
			},
			{
				"name": "can_unmute_self",
				"type": "Bool",
				"description": "True, if the participant is muted for all users, but can unmute themselves"
			},
			{
				"name": "volume_level",
				"type": "int32",
				"description": "Participant's volume level; 1-20000 in hundreds of percents"
			},
			{
				"name": "order",
				"type": "string",
				"description": "User's order in the group call participant list. Orders must be compared lexicographically. The bigger is order, the higher is user in the list. If order is empty, the user must be removed from the participant list"
			}
		],
		"description": "Represents a group call participant",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "CallProblem",
		"methods": null,
		"description": "Describes the exact type of problem with a call",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callProblemEcho",
		"methods": null,
		"description": "The user heard their own voice",
		"inheritance": "CallProblem",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callProblemNoise",
		"methods": null,
		"description": "The user heard background noise",
		"inheritance": "CallProblem",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callProblemInterruptions",
		"methods": null,
		"description": "The other side kept disappearing",
		"inheritance": "CallProblem",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callProblemDistortedSpeech",
		"methods": null,
		"description": "The speech was distorted",
		"inheritance": "CallProblem",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callProblemSilentLocal",
		"methods": null,
		"description": "The user couldn't hear the other side",
		"inheritance": "CallProblem",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callProblemSilentRemote",
		"methods": null,
		"description": "The other side couldn't hear the user",
		"inheritance": "CallProblem",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callProblemDropped",
		"methods": null,
		"description": "The call ended unexpectedly",
		"inheritance": "CallProblem",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callProblemDistortedVideo",
		"methods": null,
		"description": "The video was distorted",
		"inheritance": "CallProblem",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callProblemPixelatedVideo",
		"methods": null,
		"description": "The video was pixelated",
		"inheritance": "CallProblem",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "call",
		"methods": [
			{
				"name": "id",
				"type": "int32",
				"description": "Call identifier, not persistent"
			},
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier of the other call participant"
			},
			{
				"name": "is_outgoing",
				"type": "Bool",
				"description": "True, if the call is outgoing"
			},
			{
				"name": "is_video",
				"type": "Bool",
				"description": "True, if the call is a video call"
			},
			{
				"name": "state",
				"type": "CallState",
				"description": "Call state"
			},
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Identifier of the group call associated with the call; 0 if the group call isn't created yet. The group call can be received through the method getGroupCall"
			}
		],
		"description": "Describes a call",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "FirebaseAuthenticationSettings",
		"methods": null,
		"description": "Contains settings for Firebase Authentication in the official applications",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "firebaseAuthenticationSettingsAndroid",
		"methods": null,
		"description": "Settings for Firebase Authentication in the official Android application",
		"inheritance": "FirebaseAuthenticationSettings",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "firebaseAuthenticationSettingsIos",
		"methods": [
			{
				"name": "device_token",
				"type": "string",
				"description": "Device token from Apple Push Notification service"
			},
			{
				"name": "is_app_sandbox",
				"type": "Bool",
				"description": "True, if App Sandbox is enabled"
			}
		],
		"description": "Settings for Firebase Authentication in the official iOS application",
		"inheritance": "FirebaseAuthenticationSettings",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "phoneNumberAuthenticationSettings",
		"methods": [
			{
				"name": "allow_flash_call",
				"type": "Bool",
				"description": "Pass true if the authentication code may be sent via a flash call to the specified phone number"
			},
			{
				"name": "allow_missed_call",
				"type": "Bool",
				"description": "Pass true if the authentication code may be sent via a missed call to the specified phone number"
			},
			{
				"name": "is_current_phone_number",
				"type": "Bool",
				"description": "Pass true if the authenticated phone number is used on the current device"
			},
			{
				"name": "has_unknown_phone_number",
				"type": "Bool",
				"description": "Pass true if there is a SIM card in the current device, but it is not possible to check whether phone number matches"
			},
			{
				"name": "allow_sms_retriever_api",
				"type": "Bool",
				"description": "For official applications only. True, if the application can use Android SMS Retriever API (requires Google Play Services >= 10.2) to automatically receive the authentication code from the SMS. See https://developers.google.com/identity/sms-retriever/ for more details"
			},
			{
				"name": "firebase_authentication_settings",
				"type": "FirebaseAuthenticationSettings",
				"description": "For official Android and iOS applications only; pass null otherwise. Settings for Firebase Authentication"
			},
			{
				"name": "authentication_tokens",
				"type": "vector<string>",
				"description": "List of up to 20 authentication tokens, recently received in updateOption(\"authentication_token\") in previously logged out sessions"
			}
		],
		"description": "Contains settings for the authentication of the user's phone number",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "addedReaction",
		"methods": [
			{
				"name": "type",
				"type": "ReactionType",
				"description": "Type of the reaction"
			},
			{
				"name": "sender_id",
				"type": "MessageSender",
				"description": "Identifier of the chat member, applied the reaction"
			},
			{
				"name": "is_outgoing",
				"type": "Bool",
				"description": "True, if the reaction was added by the current user"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the reaction was added"
			}
		],
		"description": "Represents a reaction applied to a message",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "addedReactions",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "The total number of found reactions"
			},
			{
				"name": "reactions",
				"type": "vector<addedReaction>",
				"description": "The list of added reactions"
			},
			{
				"name": "next_offset",
				"type": "string",
				"description": "The offset for the next request. If empty, then there are no more results"
			}
		],
		"description": "Represents a list of reactions added to a message",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "availableReaction",
		"methods": [
			{
				"name": "type",
				"type": "ReactionType",
				"description": "Type of the reaction"
			},
			{
				"name": "needs_premium",
				"type": "Bool",
				"description": "True, if Telegram Premium is needed to send the reaction"
			}
		],
		"description": "Represents an available reaction",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "availableReactions",
		"methods": [
			{
				"name": "top_reactions",
				"type": "vector<availableReaction>",
				"description": "List of reactions to be shown at the top"
			},
			{
				"name": "recent_reactions",
				"type": "vector<availableReaction>",
				"description": "List of recently used reactions"
			},
			{
				"name": "popular_reactions",
				"type": "vector<availableReaction>",
				"description": "List of popular reactions"
			},
			{
				"name": "allow_custom_emoji",
				"type": "Bool",
				"description": "True, if any custom emoji reaction can be added by Telegram Premium subscribers"
			},
			{
				"name": "are_tags",
				"type": "Bool",
				"description": "True, if the reactions will be tags and the message can be found by them"
			},
			{
				"name": "unavailability_reason",
				"type": "ReactionUnavailabilityReason",
				"description": "The reason why the current user can't add reactions to the message, despite some other users can; may be null if none"
			}
		],
		"description": "Represents a list of reactions that can be added to a message",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "emojiReaction",
		"methods": [
			{
				"name": "emoji",
				"type": "string",
				"description": "Text representation of the reaction"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Reaction title"
			},
			{
				"name": "is_active",
				"type": "Bool",
				"description": "True, if the reaction can be added to new messages and enabled in chats"
			},
			{
				"name": "static_icon",
				"type": "sticker",
				"description": "Static icon for the reaction"
			},
			{
				"name": "appear_animation",
				"type": "sticker",
				"description": "Appear animation for the reaction"
			},
			{
				"name": "select_animation",
				"type": "sticker",
				"description": "Select animation for the reaction"
			},
			{
				"name": "activate_animation",
				"type": "sticker",
				"description": "Activate animation for the reaction"
			},
			{
				"name": "effect_animation",
				"type": "sticker",
				"description": "Effect animation for the reaction"
			},
			{
				"name": "around_animation",
				"type": "sticker",
				"description": "Around animation for the reaction; may be null"
			},
			{
				"name": "center_animation",
				"type": "sticker",
				"description": "Center animation for the reaction; may be null"
			}
		],
		"description": "Contains information about an emoji reaction",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ReactionUnavailabilityReason",
		"methods": null,
		"description": "Describes why the current user can't add reactions to the message, despite some other users can",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reactionUnavailabilityReasonAnonymousAdministrator",
		"methods": null,
		"description": "The user is an anonymous administrator in the supergroup, but isn't a creator of it, so they can't vote on behalf of the supergroup",
		"inheritance": "ReactionUnavailabilityReason",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reactionUnavailabilityReasonGuest",
		"methods": null,
		"description": "The user isn't a member of the supergroup and can't send messages and reactions there without joining",
		"inheritance": "ReactionUnavailabilityReason",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "animations",
		"methods": [
			{
				"name": "animations",
				"type": "vector<animation>",
				"description": "List of animations"
			}
		],
		"description": "Represents a list of animations",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "DiceStickers",
		"methods": null,
		"description": "Contains animated stickers which must be used for dice animation rendering",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "diceStickersRegular",
		"methods": [
			{
				"name": "sticker",
				"type": "sticker",
				"description": "The animated sticker with the dice animation"
			}
		],
		"description": "A regular animated sticker",
		"inheritance": "DiceStickers",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "diceStickersSlotMachine",
		"methods": [
			{
				"name": "background",
				"type": "sticker",
				"description": "The animated sticker with the slot machine background. The background animation must start playing after all reel animations finish"
			},
			{
				"name": "lever",
				"type": "sticker",
				"description": "The animated sticker with the lever animation. The lever animation must play once in the initial dice state"
			},
			{
				"name": "left_reel",
				"type": "sticker",
				"description": "The animated sticker with the left reel"
			},
			{
				"name": "center_reel",
				"type": "sticker",
				"description": "The animated sticker with the center reel"
			},
			{
				"name": "right_reel",
				"type": "sticker",
				"description": "The animated sticker with the right reel"
			}
		],
		"description": "Animated stickers to be combined into a slot machine",
		"inheritance": "DiceStickers",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "importedContacts",
		"methods": [
			{
				"name": "user_ids",
				"type": "vector<int53>",
				"description": "User identifiers of the imported contacts in the same order as they were specified in the request; 0 if the contact is not yet a registered user"
			},
			{
				"name": "importer_count",
				"type": "vector<int32>",
				"description": "The number of users that imported the corresponding contact; 0 for already registered users or if unavailable"
			}
		],
		"description": "Represents the result of an importContacts request",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "SpeechRecognitionResult",
		"methods": null,
		"description": "Describes result of speech recognition in a voice note",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "speechRecognitionResultPending",
		"methods": [
			{
				"name": "partial_text",
				"type": "string",
				"description": "Partially recognized text"
			}
		],
		"description": "The speech recognition is ongoing",
		"inheritance": "SpeechRecognitionResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "speechRecognitionResultText",
		"methods": [
			{
				"name": "text",
				"type": "string",
				"description": "Recognized text"
			}
		],
		"description": "The speech recognition successfully finished",
		"inheritance": "SpeechRecognitionResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "speechRecognitionResultError",
		"methods": [
			{
				"name": "error",
				"type": "error",
				"description": "Recognition error. An error with a message \"MSG_VOICE_TOO_LONG\" is returned when media duration is too big to be recognized"
			}
		],
		"description": "The speech recognition failed",
		"inheritance": "SpeechRecognitionResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessConnection",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the connection"
			},
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the business user that created the connection"
			},
			{
				"name": "user_chat_id",
				"type": "int53",
				"description": "Chat identifier of the private chat with the user"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the connection was established"
			},
			{
				"name": "can_reply",
				"type": "Bool",
				"description": "True, if the bot can send messages to the connected user; false otherwise"
			},
			{
				"name": "is_enabled",
				"type": "Bool",
				"description": "True, if the connection is enabled; false otherwise"
			}
		],
		"description": "Describes a connection of the bot with a business account",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "attachmentMenuBotColor",
		"methods": [
			{
				"name": "light_color",
				"type": "int32",
				"description": "Color in the RGB format for light themes"
			},
			{
				"name": "dark_color",
				"type": "int32",
				"description": "Color in the RGB format for dark themes"
			}
		],
		"description": "Describes a color to highlight a bot added to attachment menu",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "attachmentMenuBot",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "User identifier of the bot"
			},
			{
				"name": "supports_self_chat",
				"type": "Bool",
				"description": "True, if the bot supports opening from attachment menu in the chat with the bot"
			},
			{
				"name": "supports_user_chats",
				"type": "Bool",
				"description": "True, if the bot supports opening from attachment menu in private chats with ordinary users"
			},
			{
				"name": "supports_bot_chats",
				"type": "Bool",
				"description": "True, if the bot supports opening from attachment menu in private chats with other bots"
			},
			{
				"name": "supports_group_chats",
				"type": "Bool",
				"description": "True, if the bot supports opening from attachment menu in basic group and supergroup chats"
			},
			{
				"name": "supports_channel_chats",
				"type": "Bool",
				"description": "True, if the bot supports opening from attachment menu in channel chats"
			},
			{
				"name": "request_write_access",
				"type": "Bool",
				"description": "True, if the user must be asked for the permission to send messages to the bot"
			},
			{
				"name": "is_added",
				"type": "Bool",
				"description": "True, if the bot was explicitly added by the user. If the bot isn't added, then on the first bot launch toggleBotIsAddedToAttachmentMenu must be called and the bot must be added or removed"
			},
			{
				"name": "show_in_attachment_menu",
				"type": "Bool",
				"description": "True, if the bot must be shown in the attachment menu"
			},
			{
				"name": "show_in_side_menu",
				"type": "Bool",
				"description": "True, if the bot must be shown in the side menu"
			},
			{
				"name": "show_disclaimer_in_side_menu",
				"type": "Bool",
				"description": "True, if a disclaimer, why the bot is shown in the side menu, is needed"
			},
			{
				"name": "name",
				"type": "string",
				"description": "Name for the bot in attachment menu"
			},
			{
				"name": "name_color",
				"type": "attachmentMenuBotColor",
				"description": "Color to highlight selected name of the bot if appropriate; may be null"
			},
			{
				"name": "default_icon",
				"type": "file",
				"description": "Default icon for the bot in SVG format; may be null"
			},
			{
				"name": "ios_static_icon",
				"type": "file",
				"description": "Icon for the bot in SVG format for the official iOS app; may be null"
			},
			{
				"name": "ios_animated_icon",
				"type": "file",
				"description": "Icon for the bot in TGS format for the official iOS app; may be null"
			},
			{
				"name": "ios_side_menu_icon",
				"type": "file",
				"description": "Icon for the bot in PNG format for the official iOS app side menu; may be null"
			},
			{
				"name": "android_icon",
				"type": "file",
				"description": "Icon for the bot in TGS format for the official Android app; may be null"
			},
			{
				"name": "android_side_menu_icon",
				"type": "file",
				"description": "Icon for the bot in SVG format for the official Android app side menu; may be null"
			},
			{
				"name": "macos_icon",
				"type": "file",
				"description": "Icon for the bot in TGS format for the official native macOS app; may be null"
			},
			{
				"name": "macos_side_menu_icon",
				"type": "file",
				"description": "Icon for the bot in PNG format for the official macOS app side menu; may be null"
			},
			{
				"name": "icon_color",
				"type": "attachmentMenuBotColor",
				"description": "Color to highlight selected icon of the bot if appropriate; may be null"
			},
			{
				"name": "web_app_placeholder",
				"type": "file",
				"description": "Default placeholder for opened Web Apps in SVG format; may be null"
			}
		],
		"description": "Represents a bot, which can be added to attachment or side menu",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "sentWebAppMessage",
		"methods": [
			{
				"name": "inline_message_id",
				"type": "string",
				"description": "Identifier of the sent inline message, if known"
			}
		],
		"description": "Information about the message sent by answerWebAppQuery",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "BotWriteAccessAllowReason",
		"methods": null,
		"description": "Describes a reason why a bot was allowed to write messages to the current user",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "botWriteAccessAllowReasonConnectedWebsite",
		"methods": [
			{
				"name": "domain_name",
				"type": "string",
				"description": "Domain name of the connected website"
			}
		],
		"description": "The user connected a website by logging in using Telegram Login Widget on it",
		"inheritance": "BotWriteAccessAllowReason",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "botWriteAccessAllowReasonAddedToAttachmentMenu",
		"methods": null,
		"description": "The user added the bot to attachment or side menu using toggleBotIsAddedToAttachmentMenu",
		"inheritance": "BotWriteAccessAllowReason",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "botWriteAccessAllowReasonLaunchedWebApp",
		"methods": [
			{
				"name": "web_app",
				"type": "webApp",
				"description": "Information about the Web App"
			}
		],
		"description": "The user launched a Web App using getWebAppLinkUrl",
		"inheritance": "BotWriteAccessAllowReason",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "botWriteAccessAllowReasonAcceptedRequest",
		"methods": null,
		"description": "The user accepted bot's request to send messages with allowBotToSendMessages",
		"inheritance": "BotWriteAccessAllowReason",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "httpUrl",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "The URL"
			}
		],
		"description": "Contains an HTTP URL",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userLink",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "The URL"
			},
			{
				"name": "expires_in",
				"type": "int32",
				"description": "Left time for which the link is valid, in seconds; 0 if the link is a public username link"
			}
		],
		"description": "Contains an HTTPS URL, which can be used to get information about a user",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "targetChatTypes",
		"methods": [
			{
				"name": "allow_user_chats",
				"type": "Bool",
				"description": "True, if private chats with ordinary users are allowed"
			},
			{
				"name": "allow_bot_chats",
				"type": "Bool",
				"description": "True, if private chats with other bots are allowed"
			},
			{
				"name": "allow_group_chats",
				"type": "Bool",
				"description": "True, if basic group and supergroup chats are allowed"
			},
			{
				"name": "allow_channel_chats",
				"type": "Bool",
				"description": "True, if channel chats are allowed"
			}
		],
		"description": "Describes allowed types for the target chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "TargetChat",
		"methods": null,
		"description": "Describes the target chat to be opened",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "targetChatCurrent",
		"methods": null,
		"description": "The currently opened chat and forum topic must be kept",
		"inheritance": "TargetChat",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "targetChatChosen",
		"methods": [
			{
				"name": "types",
				"type": "targetChatTypes",
				"description": "Allowed types for the chat"
			}
		],
		"description": "The chat needs to be chosen by the user among chats of the specified types",
		"inheritance": "TargetChat",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "targetChatInternalLink",
		"methods": [
			{
				"name": "link",
				"type": "InternalLinkType",
				"description": "An internal link pointing to the chat"
			}
		],
		"description": "The chat needs to be open with the provided internal link",
		"inheritance": "TargetChat",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "InputInlineQueryResult",
		"methods": null,
		"description": "Represents a single result of an inline query; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputInlineQueryResultAnimation",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the query result"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Title of the query result"
			},
			{
				"name": "thumbnail_url",
				"type": "string",
				"description": "URL of the result thumbnail (JPEG, GIF, or MPEG4), if it exists"
			},
			{
				"name": "thumbnail_mime_type",
				"type": "string",
				"description": "MIME type of the video thumbnail. If non-empty, must be one of \"image/jpeg\", \"image/gif\" and \"video/mp4\""
			},
			{
				"name": "video_url",
				"type": "string",
				"description": "The URL of the video file (file size must not exceed 1MB)"
			},
			{
				"name": "video_mime_type",
				"type": "string",
				"description": "MIME type of the video file. Must be one of \"image/gif\" and \"video/mp4\""
			},
			{
				"name": "video_duration",
				"type": "int32",
				"description": "Duration of the video, in seconds"
			},
			{
				"name": "video_width",
				"type": "int32",
				"description": "Width of the video"
			},
			{
				"name": "video_height",
				"type": "int32",
				"description": "Height of the video"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null"
			},
			{
				"name": "input_message_content",
				"type": "InputMessageContent",
				"description": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageAnimation, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact"
			}
		],
		"description": "Represents a link to an animated GIF or an animated (i.e., without sound) H.264/MPEG-4 AVC video",
		"inheritance": "InputInlineQueryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputInlineQueryResultArticle",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the query result"
			},
			{
				"name": "url",
				"type": "string",
				"description": "URL of the result, if it exists"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Title of the result"
			},
			{
				"name": "description",
				"type": "string",
				"description": "A short description of the result"
			},
			{
				"name": "thumbnail_url",
				"type": "string",
				"description": "URL of the result thumbnail, if it exists"
			},
			{
				"name": "thumbnail_width",
				"type": "int32",
				"description": "Thumbnail width, if known"
			},
			{
				"name": "thumbnail_height",
				"type": "int32",
				"description": "Thumbnail height, if known"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null"
			},
			{
				"name": "input_message_content",
				"type": "InputMessageContent",
				"description": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact"
			}
		],
		"description": "Represents a link to an article or web page",
		"inheritance": "InputInlineQueryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputInlineQueryResultAudio",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the query result"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Title of the audio file"
			},
			{
				"name": "performer",
				"type": "string",
				"description": "Performer of the audio file"
			},
			{
				"name": "audio_url",
				"type": "string",
				"description": "The URL of the audio file"
			},
			{
				"name": "audio_duration",
				"type": "int32",
				"description": "Audio file duration, in seconds"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null"
			},
			{
				"name": "input_message_content",
				"type": "InputMessageContent",
				"description": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageAudio, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact"
			}
		],
		"description": "Represents a link to an MP3 audio file",
		"inheritance": "InputInlineQueryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputInlineQueryResultContact",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the query result"
			},
			{
				"name": "contact",
				"type": "contact",
				"description": "User contact"
			},
			{
				"name": "thumbnail_url",
				"type": "string",
				"description": "URL of the result thumbnail, if it exists"
			},
			{
				"name": "thumbnail_width",
				"type": "int32",
				"description": "Thumbnail width, if known"
			},
			{
				"name": "thumbnail_height",
				"type": "int32",
				"description": "Thumbnail height, if known"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null"
			},
			{
				"name": "input_message_content",
				"type": "InputMessageContent",
				"description": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact"
			}
		],
		"description": "Represents a user contact",
		"inheritance": "InputInlineQueryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputInlineQueryResultDocument",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the query result"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Title of the resulting file"
			},
			{
				"name": "description",
				"type": "string",
				"description": "Short description of the result, if known"
			},
			{
				"name": "document_url",
				"type": "string",
				"description": "URL of the file"
			},
			{
				"name": "mime_type",
				"type": "string",
				"description": "MIME type of the file content; only \"application/pdf\" and \"application/zip\" are currently allowed"
			},
			{
				"name": "thumbnail_url",
				"type": "string",
				"description": "The URL of the file thumbnail, if it exists"
			},
			{
				"name": "thumbnail_width",
				"type": "int32",
				"description": "Width of the thumbnail"
			},
			{
				"name": "thumbnail_height",
				"type": "int32",
				"description": "Height of the thumbnail"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null"
			},
			{
				"name": "input_message_content",
				"type": "InputMessageContent",
				"description": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageDocument, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact"
			}
		],
		"description": "Represents a link to a file",
		"inheritance": "InputInlineQueryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputInlineQueryResultGame",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the query result"
			},
			{
				"name": "game_short_name",
				"type": "string",
				"description": "Short name of the game"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null"
			}
		],
		"description": "Represents a game",
		"inheritance": "InputInlineQueryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputInlineQueryResultLocation",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the query result"
			},
			{
				"name": "location",
				"type": "location",
				"description": "Location result"
			},
			{
				"name": "live_period",
				"type": "int32",
				"description": "Amount of time relative to the message sent time until the location can be updated, in seconds"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Title of the result"
			},
			{
				"name": "thumbnail_url",
				"type": "string",
				"description": "URL of the result thumbnail, if it exists"
			},
			{
				"name": "thumbnail_width",
				"type": "int32",
				"description": "Thumbnail width, if known"
			},
			{
				"name": "thumbnail_height",
				"type": "int32",
				"description": "Thumbnail height, if known"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null"
			},
			{
				"name": "input_message_content",
				"type": "InputMessageContent",
				"description": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact"
			}
		],
		"description": "Represents a point on the map",
		"inheritance": "InputInlineQueryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputInlineQueryResultPhoto",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the query result"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Title of the result, if known"
			},
			{
				"name": "description",
				"type": "string",
				"description": "A short description of the result, if known"
			},
			{
				"name": "thumbnail_url",
				"type": "string",
				"description": "URL of the photo thumbnail, if it exists"
			},
			{
				"name": "photo_url",
				"type": "string",
				"description": "The URL of the JPEG photo (photo size must not exceed 5MB)"
			},
			{
				"name": "photo_width",
				"type": "int32",
				"description": "Width of the photo"
			},
			{
				"name": "photo_height",
				"type": "int32",
				"description": "Height of the photo"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null"
			},
			{
				"name": "input_message_content",
				"type": "InputMessageContent",
				"description": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessagePhoto, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact"
			}
		],
		"description": "Represents link to a JPEG image",
		"inheritance": "InputInlineQueryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputInlineQueryResultSticker",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the query result"
			},
			{
				"name": "thumbnail_url",
				"type": "string",
				"description": "URL of the sticker thumbnail, if it exists"
			},
			{
				"name": "sticker_url",
				"type": "string",
				"description": "The URL of the WEBP, TGS, or WEBM sticker (sticker file size must not exceed 5MB)"
			},
			{
				"name": "sticker_width",
				"type": "int32",
				"description": "Width of the sticker"
			},
			{
				"name": "sticker_height",
				"type": "int32",
				"description": "Height of the sticker"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null"
			},
			{
				"name": "input_message_content",
				"type": "InputMessageContent",
				"description": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageSticker, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact"
			}
		],
		"description": "Represents a link to a WEBP, TGS, or WEBM sticker",
		"inheritance": "InputInlineQueryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputInlineQueryResultVenue",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the query result"
			},
			{
				"name": "venue",
				"type": "venue",
				"description": "Venue result"
			},
			{
				"name": "thumbnail_url",
				"type": "string",
				"description": "URL of the result thumbnail, if it exists"
			},
			{
				"name": "thumbnail_width",
				"type": "int32",
				"description": "Thumbnail width, if known"
			},
			{
				"name": "thumbnail_height",
				"type": "int32",
				"description": "Thumbnail height, if known"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null"
			},
			{
				"name": "input_message_content",
				"type": "InputMessageContent",
				"description": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact"
			}
		],
		"description": "Represents information about a venue",
		"inheritance": "InputInlineQueryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputInlineQueryResultVideo",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the query result"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Title of the result"
			},
			{
				"name": "description",
				"type": "string",
				"description": "A short description of the result, if known"
			},
			{
				"name": "thumbnail_url",
				"type": "string",
				"description": "The URL of the video thumbnail (JPEG), if it exists"
			},
			{
				"name": "video_url",
				"type": "string",
				"description": "URL of the embedded video player or video file"
			},
			{
				"name": "mime_type",
				"type": "string",
				"description": "MIME type of the content of the video URL, only \"text/html\" or \"video/mp4\" are currently supported"
			},
			{
				"name": "video_width",
				"type": "int32",
				"description": "Width of the video"
			},
			{
				"name": "video_height",
				"type": "int32",
				"description": "Height of the video"
			},
			{
				"name": "video_duration",
				"type": "int32",
				"description": "Video duration, in seconds"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null"
			},
			{
				"name": "input_message_content",
				"type": "InputMessageContent",
				"description": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageVideo, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact"
			}
		],
		"description": "Represents a link to a page containing an embedded video player or a video file",
		"inheritance": "InputInlineQueryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputInlineQueryResultVoiceNote",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the query result"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Title of the voice note"
			},
			{
				"name": "voice_note_url",
				"type": "string",
				"description": "The URL of the voice note file"
			},
			{
				"name": "voice_note_duration",
				"type": "int32",
				"description": "Duration of the voice note, in seconds"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null"
			},
			{
				"name": "input_message_content",
				"type": "InputMessageContent",
				"description": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageVoiceNote, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact"
			}
		],
		"description": "Represents a link to an opus-encoded audio file within an OGG container, single channel audio",
		"inheritance": "InputInlineQueryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "InlineQueryResult",
		"methods": null,
		"description": "Represents a single result of an inline query",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inlineQueryResultArticle",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the query result"
			},
			{
				"name": "url",
				"type": "string",
				"description": "URL of the result, if it exists"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Title of the result"
			},
			{
				"name": "description",
				"type": "string",
				"description": "A short description of the result"
			},
			{
				"name": "thumbnail",
				"type": "thumbnail",
				"description": "Result thumbnail in JPEG format; may be null"
			}
		],
		"description": "Represents a link to an article or web page",
		"inheritance": "InlineQueryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inlineQueryResultContact",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the query result"
			},
			{
				"name": "contact",
				"type": "contact",
				"description": "A user contact"
			},
			{
				"name": "thumbnail",
				"type": "thumbnail",
				"description": "Result thumbnail in JPEG format; may be null"
			}
		],
		"description": "Represents a user contact",
		"inheritance": "InlineQueryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inlineQueryResultLocation",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the query result"
			},
			{
				"name": "location",
				"type": "location",
				"description": "Location result"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Title of the result"
			},
			{
				"name": "thumbnail",
				"type": "thumbnail",
				"description": "Result thumbnail in JPEG format; may be null"
			}
		],
		"description": "Represents a point on the map",
		"inheritance": "InlineQueryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inlineQueryResultVenue",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the query result"
			},
			{
				"name": "venue",
				"type": "venue",
				"description": "Venue result"
			},
			{
				"name": "thumbnail",
				"type": "thumbnail",
				"description": "Result thumbnail in JPEG format; may be null"
			}
		],
		"description": "Represents information about a venue",
		"inheritance": "InlineQueryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inlineQueryResultGame",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the query result"
			},
			{
				"name": "game",
				"type": "game",
				"description": "Game result"
			}
		],
		"description": "Represents information about a game",
		"inheritance": "InlineQueryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inlineQueryResultAnimation",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the query result"
			},
			{
				"name": "animation",
				"type": "animation",
				"description": "Animation file"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Animation title"
			}
		],
		"description": "Represents an animation file",
		"inheritance": "InlineQueryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inlineQueryResultAudio",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the query result"
			},
			{
				"name": "audio",
				"type": "audio",
				"description": "Audio file"
			}
		],
		"description": "Represents an audio file",
		"inheritance": "InlineQueryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inlineQueryResultDocument",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the query result"
			},
			{
				"name": "document",
				"type": "document",
				"description": "Document"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Document title"
			},
			{
				"name": "description",
				"type": "string",
				"description": "Document description"
			}
		],
		"description": "Represents a document",
		"inheritance": "InlineQueryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inlineQueryResultPhoto",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the query result"
			},
			{
				"name": "photo",
				"type": "photo",
				"description": "Photo"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Title of the result, if known"
			},
			{
				"name": "description",
				"type": "string",
				"description": "A short description of the result, if known"
			}
		],
		"description": "Represents a photo",
		"inheritance": "InlineQueryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inlineQueryResultSticker",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the query result"
			},
			{
				"name": "sticker",
				"type": "sticker",
				"description": "Sticker"
			}
		],
		"description": "Represents a sticker",
		"inheritance": "InlineQueryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inlineQueryResultVideo",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the query result"
			},
			{
				"name": "video",
				"type": "video",
				"description": "Video"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Title of the video"
			},
			{
				"name": "description",
				"type": "string",
				"description": "Description of the video"
			}
		],
		"description": "Represents a video",
		"inheritance": "InlineQueryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inlineQueryResultVoiceNote",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier of the query result"
			},
			{
				"name": "voice_note",
				"type": "voiceNote",
				"description": "Voice note"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Title of the voice note"
			}
		],
		"description": "Represents a voice note",
		"inheritance": "InlineQueryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "InlineQueryResultsButtonType",
		"methods": null,
		"description": "Represents type of button in results of inline query",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inlineQueryResultsButtonTypeStartBot",
		"methods": [
			{
				"name": "parameter",
				"type": "string",
				"description": "The parameter for the bot start message"
			}
		],
		"description": "Describes the button that opens a private chat with the bot and sends a start message to the bot with the given parameter",
		"inheritance": "InlineQueryResultsButtonType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inlineQueryResultsButtonTypeWebApp",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "An HTTP URL to pass to getWebAppUrl"
			}
		],
		"description": "Describes the button that opens a Web App by calling getWebAppUrl",
		"inheritance": "InlineQueryResultsButtonType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inlineQueryResultsButton",
		"methods": [
			{
				"name": "text",
				"type": "string",
				"description": "The text of the button"
			},
			{
				"name": "type",
				"type": "InlineQueryResultsButtonType",
				"description": "Type of the button"
			}
		],
		"description": "Represents a button to be shown above inline query results",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inlineQueryResults",
		"methods": [
			{
				"name": "inline_query_id",
				"type": "int64",
				"description": "Unique identifier of the inline query"
			},
			{
				"name": "button",
				"type": "inlineQueryResultsButton",
				"description": "Button to be shown above inline query results; may be null"
			},
			{
				"name": "results",
				"type": "vector<InlineQueryResult>",
				"description": "Results of the query"
			},
			{
				"name": "next_offset",
				"type": "string",
				"description": "The offset for the next request. If empty, then there are no more results"
			}
		],
		"description": "Represents the results of the inline query. Use sendInlineQueryResultMessage to send the result of the query",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "preparedInlineMessageId",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique identifier for the message"
			},
			{
				"name": "expiration_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the message can't be used anymore"
			}
		],
		"description": "Represents an inline message that can be sent via the bot",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "preparedInlineMessage",
		"methods": [
			{
				"name": "inline_query_id",
				"type": "int64",
				"description": "Unique identifier of the inline query to pass to sendInlineQueryResultMessage"
			},
			{
				"name": "result",
				"type": "InlineQueryResult",
				"description": "Resulted inline message of the query"
			},
			{
				"name": "chat_types",
				"type": "targetChatTypes",
				"description": "Types of the chats to which the message can be sent"
			}
		],
		"description": "Represents a ready to send inline message. Use sendInlineQueryResultMessage to send the message",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "CallbackQueryPayload",
		"methods": null,
		"description": "Represents a payload of a callback query",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callbackQueryPayloadData",
		"methods": [
			{
				"name": "data",
				"type": "bytes",
				"description": "Data that was attached to the callback button"
			}
		],
		"description": "The payload for a general callback button",
		"inheritance": "CallbackQueryPayload",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callbackQueryPayloadDataWithPassword",
		"methods": [
			{
				"name": "password",
				"type": "string",
				"description": "The 2-step verification password for the current user"
			},
			{
				"name": "data",
				"type": "bytes",
				"description": "Data that was attached to the callback button"
			}
		],
		"description": "The payload for a callback button requiring password",
		"inheritance": "CallbackQueryPayload",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callbackQueryPayloadGame",
		"methods": [
			{
				"name": "game_short_name",
				"type": "string",
				"description": "A short name of the game that was attached to the callback button"
			}
		],
		"description": "The payload for a game callback button",
		"inheritance": "CallbackQueryPayload",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "callbackQueryAnswer",
		"methods": [
			{
				"name": "text",
				"type": "string",
				"description": "Text of the answer"
			},
			{
				"name": "show_alert",
				"type": "Bool",
				"description": "True, if an alert must be shown to the user instead of a toast notification"
			},
			{
				"name": "url",
				"type": "string",
				"description": "URL to be opened"
			}
		],
		"description": "Contains a bot's answer to a callback query",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "customRequestResult",
		"methods": [
			{
				"name": "result",
				"type": "string",
				"description": "A JSON-serialized result"
			}
		],
		"description": "Contains the result of a custom request",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "gameHighScore",
		"methods": [
			{
				"name": "position",
				"type": "int32",
				"description": "Position in the high score table"
			},
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			},
			{
				"name": "score",
				"type": "int32",
				"description": "User score"
			}
		],
		"description": "Contains one row of the game high score table",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "gameHighScores",
		"methods": [
			{
				"name": "scores",
				"type": "vector<gameHighScore>",
				"description": "A list of game high scores"
			}
		],
		"description": "Contains a list of game high scores",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ChatEventAction",
		"methods": null,
		"description": "Represents a chat event",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventMessageEdited",
		"methods": [
			{
				"name": "old_message",
				"type": "message",
				"description": "The original message before the edit"
			},
			{
				"name": "new_message",
				"type": "message",
				"description": "The message after it was edited"
			}
		],
		"description": "A message was edited",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventMessageDeleted",
		"methods": [
			{
				"name": "message",
				"type": "message",
				"description": "Deleted message"
			},
			{
				"name": "can_report_anti_spam_false_positive",
				"type": "Bool",
				"description": "True, if the message deletion can be reported via reportSupergroupAntiSpamFalsePositive"
			}
		],
		"description": "A message was deleted",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventMessagePinned",
		"methods": [
			{
				"name": "message",
				"type": "message",
				"description": "Pinned message"
			}
		],
		"description": "A message was pinned",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventMessageUnpinned",
		"methods": [
			{
				"name": "message",
				"type": "message",
				"description": "Unpinned message"
			}
		],
		"description": "A message was unpinned",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventPollStopped",
		"methods": [
			{
				"name": "message",
				"type": "message",
				"description": "The message with the poll"
			}
		],
		"description": "A poll in a message was stopped",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventMemberJoined",
		"methods": null,
		"description": "A new member joined the chat",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventMemberJoinedByInviteLink",
		"methods": [
			{
				"name": "invite_link",
				"type": "chatInviteLink",
				"description": "Invite link used to join the chat"
			},
			{
				"name": "via_chat_folder_invite_link",
				"type": "Bool",
				"description": "True, if the user has joined the chat using an invite link for a chat folder"
			}
		],
		"description": "A new member joined the chat via an invite link",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventMemberJoinedByRequest",
		"methods": [
			{
				"name": "approver_user_id",
				"type": "int53",
				"description": "User identifier of the chat administrator, approved user join request"
			},
			{
				"name": "invite_link",
				"type": "chatInviteLink",
				"description": "Invite link used to join the chat; may be null"
			}
		],
		"description": "A new member was accepted to the chat by an administrator",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventMemberInvited",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "New member user identifier"
			},
			{
				"name": "status",
				"type": "ChatMemberStatus",
				"description": "New member status"
			}
		],
		"description": "A new chat member was invited",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventMemberLeft",
		"methods": null,
		"description": "A member left the chat",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventMemberPromoted",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Affected chat member user identifier"
			},
			{
				"name": "old_status",
				"type": "ChatMemberStatus",
				"description": "Previous status of the chat member"
			},
			{
				"name": "new_status",
				"type": "ChatMemberStatus",
				"description": "New status of the chat member"
			}
		],
		"description": "A chat member has gained/lost administrator status, or the list of their administrator privileges has changed",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventMemberRestricted",
		"methods": [
			{
				"name": "member_id",
				"type": "MessageSender",
				"description": "Affected chat member identifier"
			},
			{
				"name": "old_status",
				"type": "ChatMemberStatus",
				"description": "Previous status of the chat member"
			},
			{
				"name": "new_status",
				"type": "ChatMemberStatus",
				"description": "New status of the chat member"
			}
		],
		"description": "A chat member was restricted/unrestricted or banned/unbanned, or the list of their restrictions has changed",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventMemberSubscriptionExtended",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Affected chat member user identifier"
			},
			{
				"name": "old_status",
				"type": "ChatMemberStatus",
				"description": "Previous status of the chat member"
			},
			{
				"name": "new_status",
				"type": "ChatMemberStatus",
				"description": "New status of the chat member"
			}
		],
		"description": "A chat member extended their subscription to the chat",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventAvailableReactionsChanged",
		"methods": [
			{
				"name": "old_available_reactions",
				"type": "ChatAvailableReactions",
				"description": "Previous chat available reactions"
			},
			{
				"name": "new_available_reactions",
				"type": "ChatAvailableReactions",
				"description": "New chat available reactions"
			}
		],
		"description": "The chat available reactions were changed",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventBackgroundChanged",
		"methods": [
			{
				"name": "old_background",
				"type": "chatBackground",
				"description": "Previous background; may be null if none"
			},
			{
				"name": "new_background",
				"type": "chatBackground",
				"description": "New background; may be null if none"
			}
		],
		"description": "The chat background was changed",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventDescriptionChanged",
		"methods": [
			{
				"name": "old_description",
				"type": "string",
				"description": "Previous chat description"
			},
			{
				"name": "new_description",
				"type": "string",
				"description": "New chat description"
			}
		],
		"description": "The chat description was changed",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventEmojiStatusChanged",
		"methods": [
			{
				"name": "old_emoji_status",
				"type": "emojiStatus",
				"description": "Previous emoji status; may be null if none"
			},
			{
				"name": "new_emoji_status",
				"type": "emojiStatus",
				"description": "New emoji status; may be null if none"
			}
		],
		"description": "The chat emoji status was changed",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventLinkedChatChanged",
		"methods": [
			{
				"name": "old_linked_chat_id",
				"type": "int53",
				"description": "Previous supergroup linked chat identifier"
			},
			{
				"name": "new_linked_chat_id",
				"type": "int53",
				"description": "New supergroup linked chat identifier"
			}
		],
		"description": "The linked chat of a supergroup was changed",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventLocationChanged",
		"methods": [
			{
				"name": "old_location",
				"type": "chatLocation",
				"description": "Previous location; may be null"
			},
			{
				"name": "new_location",
				"type": "chatLocation",
				"description": "New location; may be null"
			}
		],
		"description": "The supergroup location was changed",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventMessageAutoDeleteTimeChanged",
		"methods": [
			{
				"name": "old_message_auto_delete_time",
				"type": "int32",
				"description": "Previous value of message_auto_delete_time"
			},
			{
				"name": "new_message_auto_delete_time",
				"type": "int32",
				"description": "New value of message_auto_delete_time"
			}
		],
		"description": "The message auto-delete timer was changed",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventPermissionsChanged",
		"methods": [
			{
				"name": "old_permissions",
				"type": "chatPermissions",
				"description": "Previous chat permissions"
			},
			{
				"name": "new_permissions",
				"type": "chatPermissions",
				"description": "New chat permissions"
			}
		],
		"description": "The chat permissions were changed",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventPhotoChanged",
		"methods": [
			{
				"name": "old_photo",
				"type": "chatPhoto",
				"description": "Previous chat photo value; may be null"
			},
			{
				"name": "new_photo",
				"type": "chatPhoto",
				"description": "New chat photo value; may be null"
			}
		],
		"description": "The chat photo was changed",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventSlowModeDelayChanged",
		"methods": [
			{
				"name": "old_slow_mode_delay",
				"type": "int32",
				"description": "Previous value of slow_mode_delay, in seconds"
			},
			{
				"name": "new_slow_mode_delay",
				"type": "int32",
				"description": "New value of slow_mode_delay, in seconds"
			}
		],
		"description": "The slow_mode_delay setting of a supergroup was changed",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventStickerSetChanged",
		"methods": [
			{
				"name": "old_sticker_set_id",
				"type": "int64",
				"description": "Previous identifier of the chat sticker set; 0 if none"
			},
			{
				"name": "new_sticker_set_id",
				"type": "int64",
				"description": "New identifier of the chat sticker set; 0 if none"
			}
		],
		"description": "The supergroup sticker set was changed",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventCustomEmojiStickerSetChanged",
		"methods": [
			{
				"name": "old_sticker_set_id",
				"type": "int64",
				"description": "Previous identifier of the chat sticker set; 0 if none"
			},
			{
				"name": "new_sticker_set_id",
				"type": "int64",
				"description": "New identifier of the chat sticker set; 0 if none"
			}
		],
		"description": "The supergroup sticker set with allowed custom emoji was changed",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventTitleChanged",
		"methods": [
			{
				"name": "old_title",
				"type": "string",
				"description": "Previous chat title"
			},
			{
				"name": "new_title",
				"type": "string",
				"description": "New chat title"
			}
		],
		"description": "The chat title was changed",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventUsernameChanged",
		"methods": [
			{
				"name": "old_username",
				"type": "string",
				"description": "Previous chat username"
			},
			{
				"name": "new_username",
				"type": "string",
				"description": "New chat username"
			}
		],
		"description": "The chat editable username was changed",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventActiveUsernamesChanged",
		"methods": [
			{
				"name": "old_usernames",
				"type": "vector<string>",
				"description": "Previous list of active usernames"
			},
			{
				"name": "new_usernames",
				"type": "vector<string>",
				"description": "New list of active usernames"
			}
		],
		"description": "The chat active usernames were changed",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventAccentColorChanged",
		"methods": [
			{
				"name": "old_accent_color_id",
				"type": "int32",
				"description": "Previous identifier of chat accent color"
			},
			{
				"name": "old_background_custom_emoji_id",
				"type": "int64",
				"description": "Previous identifier of the custom emoji; 0 if none"
			},
			{
				"name": "new_accent_color_id",
				"type": "int32",
				"description": "New identifier of chat accent color"
			},
			{
				"name": "new_background_custom_emoji_id",
				"type": "int64",
				"description": "New identifier of the custom emoji; 0 if none"
			}
		],
		"description": "The chat accent color or background custom emoji were changed",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventProfileAccentColorChanged",
		"methods": [
			{
				"name": "old_profile_accent_color_id",
				"type": "int32",
				"description": "Previous identifier of chat's profile accent color; -1 if none"
			},
			{
				"name": "old_profile_background_custom_emoji_id",
				"type": "int64",
				"description": "Previous identifier of the custom emoji; 0 if none"
			},
			{
				"name": "new_profile_accent_color_id",
				"type": "int32",
				"description": "New identifier of chat's profile accent color; -1 if none"
			},
			{
				"name": "new_profile_background_custom_emoji_id",
				"type": "int64",
				"description": "New identifier of the custom emoji; 0 if none"
			}
		],
		"description": "The chat's profile accent color or profile background custom emoji were changed",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventHasProtectedContentToggled",
		"methods": [
			{
				"name": "has_protected_content",
				"type": "Bool",
				"description": "New value of has_protected_content"
			}
		],
		"description": "The has_protected_content setting of a channel was toggled",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventInvitesToggled",
		"methods": [
			{
				"name": "can_invite_users",
				"type": "Bool",
				"description": "New value of can_invite_users permission"
			}
		],
		"description": "The can_invite_users permission of a supergroup chat was toggled",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventIsAllHistoryAvailableToggled",
		"methods": [
			{
				"name": "is_all_history_available",
				"type": "Bool",
				"description": "New value of is_all_history_available"
			}
		],
		"description": "The is_all_history_available setting of a supergroup was toggled",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventHasAggressiveAntiSpamEnabledToggled",
		"methods": [
			{
				"name": "has_aggressive_anti_spam_enabled",
				"type": "Bool",
				"description": "New value of has_aggressive_anti_spam_enabled"
			}
		],
		"description": "The has_aggressive_anti_spam_enabled setting of a supergroup was toggled",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventSignMessagesToggled",
		"methods": [
			{
				"name": "sign_messages",
				"type": "Bool",
				"description": "New value of sign_messages"
			}
		],
		"description": "The sign_messages setting of a channel was toggled",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventShowMessageSenderToggled",
		"methods": [
			{
				"name": "show_message_sender",
				"type": "Bool",
				"description": "New value of show_message_sender"
			}
		],
		"description": "The show_message_sender setting of a channel was toggled",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventInviteLinkEdited",
		"methods": [
			{
				"name": "old_invite_link",
				"type": "chatInviteLink",
				"description": "Previous information about the invite link"
			},
			{
				"name": "new_invite_link",
				"type": "chatInviteLink",
				"description": "New information about the invite link"
			}
		],
		"description": "A chat invite link was edited",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventInviteLinkRevoked",
		"methods": [
			{
				"name": "invite_link",
				"type": "chatInviteLink",
				"description": "The invite link"
			}
		],
		"description": "A chat invite link was revoked",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventInviteLinkDeleted",
		"methods": [
			{
				"name": "invite_link",
				"type": "chatInviteLink",
				"description": "The invite link"
			}
		],
		"description": "A revoked chat invite link was deleted",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventVideoChatCreated",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Identifier of the video chat. The video chat can be received through the method getGroupCall"
			}
		],
		"description": "A video chat was created",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventVideoChatEnded",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Identifier of the video chat. The video chat can be received through the method getGroupCall"
			}
		],
		"description": "A video chat was ended",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventVideoChatMuteNewParticipantsToggled",
		"methods": [
			{
				"name": "mute_new_participants",
				"type": "Bool",
				"description": "New value of the mute_new_participants setting"
			}
		],
		"description": "The mute_new_participants setting of a video chat was toggled",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventVideoChatParticipantIsMutedToggled",
		"methods": [
			{
				"name": "participant_id",
				"type": "MessageSender",
				"description": "Identifier of the affected group call participant"
			},
			{
				"name": "is_muted",
				"type": "Bool",
				"description": "New value of is_muted"
			}
		],
		"description": "A video chat participant was muted or unmuted",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventVideoChatParticipantVolumeLevelChanged",
		"methods": [
			{
				"name": "participant_id",
				"type": "MessageSender",
				"description": "Identifier of the affected group call participant"
			},
			{
				"name": "volume_level",
				"type": "int32",
				"description": "New value of volume_level; 1-20000 in hundreds of percents"
			}
		],
		"description": "A video chat participant volume level was changed",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventIsForumToggled",
		"methods": [
			{
				"name": "is_forum",
				"type": "Bool",
				"description": "New value of is_forum"
			}
		],
		"description": "The is_forum setting of a channel was toggled",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventForumTopicCreated",
		"methods": [
			{
				"name": "topic_info",
				"type": "forumTopicInfo",
				"description": "Information about the topic"
			}
		],
		"description": "A new forum topic was created",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventForumTopicEdited",
		"methods": [
			{
				"name": "old_topic_info",
				"type": "forumTopicInfo",
				"description": "Old information about the topic"
			},
			{
				"name": "new_topic_info",
				"type": "forumTopicInfo",
				"description": "New information about the topic"
			}
		],
		"description": "A forum topic was edited",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventForumTopicToggleIsClosed",
		"methods": [
			{
				"name": "topic_info",
				"type": "forumTopicInfo",
				"description": "New information about the topic"
			}
		],
		"description": "A forum topic was closed or reopened",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventForumTopicToggleIsHidden",
		"methods": [
			{
				"name": "topic_info",
				"type": "forumTopicInfo",
				"description": "New information about the topic"
			}
		],
		"description": "The General forum topic was hidden or unhidden",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventForumTopicDeleted",
		"methods": [
			{
				"name": "topic_info",
				"type": "forumTopicInfo",
				"description": "Information about the topic"
			}
		],
		"description": "A forum topic was deleted",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventForumTopicPinned",
		"methods": [
			{
				"name": "old_topic_info",
				"type": "forumTopicInfo",
				"description": "Information about the old pinned topic; may be null"
			},
			{
				"name": "new_topic_info",
				"type": "forumTopicInfo",
				"description": "Information about the new pinned topic; may be null"
			}
		],
		"description": "A pinned forum topic was changed",
		"inheritance": "ChatEventAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEvent",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "Chat event identifier"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the event happened"
			},
			{
				"name": "member_id",
				"type": "MessageSender",
				"description": "Identifier of the user or chat who performed the action"
			},
			{
				"name": "action",
				"type": "ChatEventAction",
				"description": "The action"
			}
		],
		"description": "Represents a chat event",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEvents",
		"methods": [
			{
				"name": "events",
				"type": "vector<chatEvent>",
				"description": "List of events"
			}
		],
		"description": "Contains a list of chat events",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatEventLogFilters",
		"methods": [
			{
				"name": "message_edits",
				"type": "Bool",
				"description": "True, if message edits need to be returned"
			},
			{
				"name": "message_deletions",
				"type": "Bool",
				"description": "True, if message deletions need to be returned"
			},
			{
				"name": "message_pins",
				"type": "Bool",
				"description": "True, if pin/unpin events need to be returned"
			},
			{
				"name": "member_joins",
				"type": "Bool",
				"description": "True, if members joining events need to be returned"
			},
			{
				"name": "member_leaves",
				"type": "Bool",
				"description": "True, if members leaving events need to be returned"
			},
			{
				"name": "member_invites",
				"type": "Bool",
				"description": "True, if invited member events need to be returned"
			},
			{
				"name": "member_promotions",
				"type": "Bool",
				"description": "True, if member promotion/demotion events need to be returned"
			},
			{
				"name": "member_restrictions",
				"type": "Bool",
				"description": "True, if member restricted/unrestricted/banned/unbanned events need to be returned"
			},
			{
				"name": "info_changes",
				"type": "Bool",
				"description": "True, if changes in chat information need to be returned"
			},
			{
				"name": "setting_changes",
				"type": "Bool",
				"description": "True, if changes in chat settings need to be returned"
			},
			{
				"name": "invite_link_changes",
				"type": "Bool",
				"description": "True, if changes to invite links need to be returned"
			},
			{
				"name": "video_chat_changes",
				"type": "Bool",
				"description": "True, if video chat actions need to be returned"
			},
			{
				"name": "forum_changes",
				"type": "Bool",
				"description": "True, if forum-related actions need to be returned"
			},
			{
				"name": "subscription_extensions",
				"type": "Bool",
				"description": "True, if subscription extensions need to be returned"
			}
		],
		"description": "Represents a set of filters used to obtain a chat event log",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "LanguagePackStringValue",
		"methods": null,
		"description": "Represents the value of a string in a language pack",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "languagePackStringValueOrdinary",
		"methods": [
			{
				"name": "value",
				"type": "string",
				"description": "String value"
			}
		],
		"description": "An ordinary language pack string",
		"inheritance": "LanguagePackStringValue",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "languagePackStringValuePluralized",
		"methods": [
			{
				"name": "zero_value",
				"type": "string",
				"description": "Value for zero objects"
			},
			{
				"name": "one_value",
				"type": "string",
				"description": "Value for one object"
			},
			{
				"name": "two_value",
				"type": "string",
				"description": "Value for two objects"
			},
			{
				"name": "few_value",
				"type": "string",
				"description": "Value for few objects"
			},
			{
				"name": "many_value",
				"type": "string",
				"description": "Value for many objects"
			},
			{
				"name": "other_value",
				"type": "string",
				"description": "Default value"
			}
		],
		"description": "A language pack string which has different forms based on the number of some object it mentions. See https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html for more information",
		"inheritance": "LanguagePackStringValue",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "languagePackStringValueDeleted",
		"methods": null,
		"description": "A deleted language pack string, the value must be taken from the built-in English language pack",
		"inheritance": "LanguagePackStringValue",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "languagePackString",
		"methods": [
			{
				"name": "key",
				"type": "string",
				"description": "String key"
			},
			{
				"name": "value",
				"type": "LanguagePackStringValue",
				"description": "String value; pass null if the string needs to be taken from the built-in English language pack"
			}
		],
		"description": "Represents one language pack string",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "languagePackStrings",
		"methods": [
			{
				"name": "strings",
				"type": "vector<languagePackString>",
				"description": "A list of language pack strings"
			}
		],
		"description": "Contains a list of language pack strings",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "languagePackInfo",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique language pack identifier"
			},
			{
				"name": "base_language_pack_id",
				"type": "string",
				"description": "Identifier of a base language pack; may be empty. If a string is missed in the language pack, then it must be fetched from base language pack. Unsupported in custom language packs"
			},
			{
				"name": "name",
				"type": "string",
				"description": "Language name"
			},
			{
				"name": "native_name",
				"type": "string",
				"description": "Name of the language in that language"
			},
			{
				"name": "plural_code",
				"type": "string",
				"description": "A language code to be used to apply plural forms. See https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html for more information"
			},
			{
				"name": "is_official",
				"type": "Bool",
				"description": "True, if the language pack is official"
			},
			{
				"name": "is_rtl",
				"type": "Bool",
				"description": "True, if the language pack strings are RTL"
			},
			{
				"name": "is_beta",
				"type": "Bool",
				"description": "True, if the language pack is a beta language pack"
			},
			{
				"name": "is_installed",
				"type": "Bool",
				"description": "True, if the language pack is installed by the current user"
			},
			{
				"name": "total_string_count",
				"type": "int32",
				"description": "Total number of non-deleted strings from the language pack"
			},
			{
				"name": "translated_string_count",
				"type": "int32",
				"description": "Total number of translated strings from the language pack"
			},
			{
				"name": "local_string_count",
				"type": "int32",
				"description": "Total number of non-deleted strings from the language pack available locally"
			},
			{
				"name": "translation_url",
				"type": "string",
				"description": "Link to language translation interface; empty for custom local language packs"
			}
		],
		"description": "Contains information about a language pack",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "localizationTargetInfo",
		"methods": [
			{
				"name": "language_packs",
				"type": "vector<languagePackInfo>",
				"description": "List of available language packs for this application"
			}
		],
		"description": "Contains information about the current localization target",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "PremiumLimitType",
		"methods": null,
		"description": "Describes type of limit, increased for Premium users",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumLimitTypeSupergroupCount",
		"methods": null,
		"description": "The maximum number of joined supergroups and channels",
		"inheritance": "PremiumLimitType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumLimitTypePinnedChatCount",
		"methods": null,
		"description": "The maximum number of pinned chats in the main chat list",
		"inheritance": "PremiumLimitType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumLimitTypeCreatedPublicChatCount",
		"methods": null,
		"description": "The maximum number of created public chats",
		"inheritance": "PremiumLimitType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumLimitTypeSavedAnimationCount",
		"methods": null,
		"description": "The maximum number of saved animations",
		"inheritance": "PremiumLimitType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumLimitTypeFavoriteStickerCount",
		"methods": null,
		"description": "The maximum number of favorite stickers",
		"inheritance": "PremiumLimitType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumLimitTypeChatFolderCount",
		"methods": null,
		"description": "The maximum number of chat folders",
		"inheritance": "PremiumLimitType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumLimitTypeChatFolderChosenChatCount",
		"methods": null,
		"description": "The maximum number of pinned and always included, or always excluded chats in a chat folder",
		"inheritance": "PremiumLimitType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumLimitTypePinnedArchivedChatCount",
		"methods": null,
		"description": "The maximum number of pinned chats in the archive chat list",
		"inheritance": "PremiumLimitType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumLimitTypePinnedSavedMessagesTopicCount",
		"methods": null,
		"description": "The maximum number of pinned Saved Messages topics",
		"inheritance": "PremiumLimitType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumLimitTypeCaptionLength",
		"methods": null,
		"description": "The maximum length of sent media caption",
		"inheritance": "PremiumLimitType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumLimitTypeBioLength",
		"methods": null,
		"description": "The maximum length of the user's bio",
		"inheritance": "PremiumLimitType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumLimitTypeChatFolderInviteLinkCount",
		"methods": null,
		"description": "The maximum number of invite links for a chat folder",
		"inheritance": "PremiumLimitType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumLimitTypeShareableChatFolderCount",
		"methods": null,
		"description": "The maximum number of added shareable chat folders",
		"inheritance": "PremiumLimitType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumLimitTypeActiveStoryCount",
		"methods": null,
		"description": "The maximum number of active stories",
		"inheritance": "PremiumLimitType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumLimitTypeWeeklySentStoryCount",
		"methods": null,
		"description": "The maximum number of stories sent per week",
		"inheritance": "PremiumLimitType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumLimitTypeMonthlySentStoryCount",
		"methods": null,
		"description": "The maximum number of stories sent per month",
		"inheritance": "PremiumLimitType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumLimitTypeStoryCaptionLength",
		"methods": null,
		"description": "The maximum length of captions of sent stories",
		"inheritance": "PremiumLimitType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumLimitTypeStorySuggestedReactionAreaCount",
		"methods": null,
		"description": "The maximum number of suggested reaction areas on a story",
		"inheritance": "PremiumLimitType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumLimitTypeSimilarChatCount",
		"methods": null,
		"description": "The maximum number of received similar chats",
		"inheritance": "PremiumLimitType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "PremiumFeature",
		"methods": null,
		"description": "Describes a feature available to Premium users",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumFeatureIncreasedLimits",
		"methods": null,
		"description": "Increased limits",
		"inheritance": "PremiumFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumFeatureIncreasedUploadFileSize",
		"methods": null,
		"description": "Increased maximum upload file size",
		"inheritance": "PremiumFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumFeatureImprovedDownloadSpeed",
		"methods": null,
		"description": "Improved download speed",
		"inheritance": "PremiumFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumFeatureVoiceRecognition",
		"methods": null,
		"description": "The ability to convert voice notes to text",
		"inheritance": "PremiumFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumFeatureDisabledAds",
		"methods": null,
		"description": "Disabled ads",
		"inheritance": "PremiumFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumFeatureUniqueReactions",
		"methods": null,
		"description": "Allowed to use more reactions",
		"inheritance": "PremiumFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumFeatureUniqueStickers",
		"methods": null,
		"description": "Allowed to use premium stickers with unique effects",
		"inheritance": "PremiumFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumFeatureCustomEmoji",
		"methods": null,
		"description": "Allowed to use custom emoji stickers in message texts and captions",
		"inheritance": "PremiumFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumFeatureAdvancedChatManagement",
		"methods": null,
		"description": "Ability to change position of the main chat list, archive and mute all new chats from non-contacts, and completely disable notifications about the user's contacts joined Telegram",
		"inheritance": "PremiumFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumFeatureProfileBadge",
		"methods": null,
		"description": "A badge in the user's profile",
		"inheritance": "PremiumFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumFeatureEmojiStatus",
		"methods": null,
		"description": "The ability to show an emoji status along with the user's name",
		"inheritance": "PremiumFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumFeatureAnimatedProfilePhoto",
		"methods": null,
		"description": "Profile photo animation on message and chat screens",
		"inheritance": "PremiumFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumFeatureForumTopicIcon",
		"methods": null,
		"description": "The ability to set a custom emoji as a forum topic icon",
		"inheritance": "PremiumFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumFeatureAppIcons",
		"methods": null,
		"description": "Allowed to set a premium application icons",
		"inheritance": "PremiumFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumFeatureRealTimeChatTranslation",
		"methods": null,
		"description": "Allowed to translate chat messages real-time",
		"inheritance": "PremiumFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumFeatureUpgradedStories",
		"methods": null,
		"description": "Allowed to use many additional features for stories",
		"inheritance": "PremiumFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumFeatureChatBoost",
		"methods": null,
		"description": "The ability to boost chats",
		"inheritance": "PremiumFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumFeatureAccentColor",
		"methods": null,
		"description": "The ability to choose accent color for replies and user profile",
		"inheritance": "PremiumFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumFeatureBackgroundForBoth",
		"methods": null,
		"description": "The ability to set private chat background for both users",
		"inheritance": "PremiumFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumFeatureSavedMessagesTags",
		"methods": null,
		"description": "The ability to use tags in Saved Messages",
		"inheritance": "PremiumFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumFeatureMessagePrivacy",
		"methods": null,
		"description": "The ability to disallow incoming voice and video note messages in private chats using setUserPrivacySettingRules with userPrivacySettingAllowPrivateVoiceAndVideoNoteMessages and to restrict incoming messages from non-contacts using setNewChatPrivacySettings",
		"inheritance": "PremiumFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumFeatureLastSeenTimes",
		"methods": null,
		"description": "The ability to view last seen and read times of other users even they can't view last seen or read time for the current user",
		"inheritance": "PremiumFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumFeatureBusiness",
		"methods": null,
		"description": "The ability to use Business features",
		"inheritance": "PremiumFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumFeatureMessageEffects",
		"methods": null,
		"description": "The ability to use all available message effects",
		"inheritance": "PremiumFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "BusinessFeature",
		"methods": null,
		"description": "Describes a feature available to Business user accounts",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessFeatureLocation",
		"methods": null,
		"description": "The ability to set location",
		"inheritance": "BusinessFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessFeatureOpeningHours",
		"methods": null,
		"description": "The ability to set opening hours",
		"inheritance": "BusinessFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessFeatureQuickReplies",
		"methods": null,
		"description": "The ability to use quick replies",
		"inheritance": "BusinessFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessFeatureGreetingMessage",
		"methods": null,
		"description": "The ability to set up a greeting message",
		"inheritance": "BusinessFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessFeatureAwayMessage",
		"methods": null,
		"description": "The ability to set up an away message",
		"inheritance": "BusinessFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessFeatureAccountLinks",
		"methods": null,
		"description": "The ability to create links to the business account with predefined message text",
		"inheritance": "BusinessFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessFeatureStartPage",
		"methods": null,
		"description": "The ability to customize start page",
		"inheritance": "BusinessFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessFeatureBots",
		"methods": null,
		"description": "The ability to connect a bot to the account",
		"inheritance": "BusinessFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessFeatureEmojiStatus",
		"methods": null,
		"description": "The ability to show an emoji status along with the business name",
		"inheritance": "BusinessFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessFeatureChatFolderTags",
		"methods": null,
		"description": "The ability to display folder names for each chat in the chat list",
		"inheritance": "BusinessFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessFeatureUpgradedStories",
		"methods": null,
		"description": "Allowed to use many additional features for stories",
		"inheritance": "BusinessFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "PremiumStoryFeature",
		"methods": null,
		"description": "Describes a story feature available to Premium users",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumStoryFeaturePriorityOrder",
		"methods": null,
		"description": "Stories of the current user are displayed before stories of non-Premium contacts, supergroups, and channels",
		"inheritance": "PremiumStoryFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumStoryFeatureStealthMode",
		"methods": null,
		"description": "The ability to hide the fact that the user viewed other's stories",
		"inheritance": "PremiumStoryFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumStoryFeaturePermanentViewsHistory",
		"methods": null,
		"description": "The ability to check who opened the current user's stories after they expire",
		"inheritance": "PremiumStoryFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumStoryFeatureCustomExpirationDuration",
		"methods": null,
		"description": "The ability to set custom expiration duration for stories",
		"inheritance": "PremiumStoryFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumStoryFeatureSaveStories",
		"methods": null,
		"description": "The ability to save other's unprotected stories",
		"inheritance": "PremiumStoryFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumStoryFeatureLinksAndFormatting",
		"methods": null,
		"description": "The ability to use links and formatting in story caption, and use inputStoryAreaTypeLink areas",
		"inheritance": "PremiumStoryFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumStoryFeatureVideoQuality",
		"methods": null,
		"description": "The ability to choose better quality for viewed stories",
		"inheritance": "PremiumStoryFeature",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumLimit",
		"methods": [
			{
				"name": "type",
				"type": "PremiumLimitType",
				"description": "The type of the limit"
			},
			{
				"name": "default_value",
				"type": "int32",
				"description": "Default value of the limit"
			},
			{
				"name": "premium_value",
				"type": "int32",
				"description": "Value of the limit for Premium users"
			}
		],
		"description": "Contains information about a limit, increased for Premium users",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumFeatures",
		"methods": [
			{
				"name": "features",
				"type": "vector<PremiumFeature>",
				"description": "The list of available features"
			},
			{
				"name": "limits",
				"type": "vector<premiumLimit>",
				"description": "The list of limits, increased for Premium users"
			},
			{
				"name": "payment_link",
				"type": "InternalLinkType",
				"description": "An internal link to be opened to pay for Telegram Premium if store payment isn't possible; may be null if direct payment isn't available"
			}
		],
		"description": "Contains information about features, available to Premium users",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessFeatures",
		"methods": [
			{
				"name": "features",
				"type": "vector<BusinessFeature>",
				"description": "The list of available business features"
			}
		],
		"description": "Contains information about features, available to Business user accounts",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "PremiumSource",
		"methods": null,
		"description": "Describes a source from which the Premium features screen is opened",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumSourceLimitExceeded",
		"methods": [
			{
				"name": "limit_type",
				"type": "PremiumLimitType",
				"description": "Type of the exceeded limit"
			}
		],
		"description": "A limit was exceeded",
		"inheritance": "PremiumSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumSourceFeature",
		"methods": [
			{
				"name": "feature",
				"type": "PremiumFeature",
				"description": "The used feature"
			}
		],
		"description": "A user tried to use a Premium feature",
		"inheritance": "PremiumSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumSourceBusinessFeature",
		"methods": [
			{
				"name": "feature",
				"type": "BusinessFeature",
				"description": "The used feature; pass null if none specific feature was used"
			}
		],
		"description": "A user tried to use a Business feature",
		"inheritance": "PremiumSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumSourceStoryFeature",
		"methods": [
			{
				"name": "feature",
				"type": "PremiumStoryFeature",
				"description": "The used feature"
			}
		],
		"description": "A user tried to use a Premium story feature",
		"inheritance": "PremiumSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumSourceLink",
		"methods": [
			{
				"name": "referrer",
				"type": "string",
				"description": "The referrer from the link"
			}
		],
		"description": "A user opened an internal link of the type internalLinkTypePremiumFeatures",
		"inheritance": "PremiumSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumSourceSettings",
		"methods": null,
		"description": "A user opened the Premium features screen from settings",
		"inheritance": "PremiumSource",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumFeaturePromotionAnimation",
		"methods": [
			{
				"name": "feature",
				"type": "PremiumFeature",
				"description": "Premium feature"
			},
			{
				"name": "animation",
				"type": "animation",
				"description": "Promotion animation for the feature"
			}
		],
		"description": "Describes a promotion animation for a Premium feature",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "businessFeaturePromotionAnimation",
		"methods": [
			{
				"name": "feature",
				"type": "BusinessFeature",
				"description": "Business feature"
			},
			{
				"name": "animation",
				"type": "animation",
				"description": "Promotion animation for the feature"
			}
		],
		"description": "Describes a promotion animation for a Business feature",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "premiumState",
		"methods": [
			{
				"name": "state",
				"type": "formattedText",
				"description": "Text description of the state of the current Premium subscription; may be empty if the current user has no Telegram Premium subscription"
			},
			{
				"name": "payment_options",
				"type": "vector<premiumStatePaymentOption>",
				"description": "The list of available options for buying Telegram Premium"
			},
			{
				"name": "animations",
				"type": "vector<premiumFeaturePromotionAnimation>",
				"description": "The list of available promotion animations for Premium features"
			},
			{
				"name": "business_animations",
				"type": "vector<businessFeaturePromotionAnimation>",
				"description": "The list of available promotion animations for Business features"
			}
		],
		"description": "Contains state of Telegram Premium subscription and promotion videos for Premium features",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "StorePaymentPurpose",
		"methods": null,
		"description": "Describes a purpose of an in-store payment",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storePaymentPurposePremiumSubscription",
		"methods": [
			{
				"name": "is_restore",
				"type": "Bool",
				"description": "Pass true if this is a restore of a Telegram Premium purchase; only for App Store"
			},
			{
				"name": "is_upgrade",
				"type": "Bool",
				"description": "Pass true if this is an upgrade from a monthly subscription to early subscription; only for App Store"
			}
		],
		"description": "The user subscribing to Telegram Premium",
		"inheritance": "StorePaymentPurpose",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storePaymentPurposePremiumGift",
		"methods": [
			{
				"name": "currency",
				"type": "string",
				"description": "ISO 4217 currency code of the payment currency"
			},
			{
				"name": "amount",
				"type": "int53",
				"description": "Paid amount, in the smallest units of the currency"
			},
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifiers of the user which will receive Telegram Premium"
			},
			{
				"name": "text",
				"type": "formattedText",
				"description": "Text to show along with the gift codes; 0-getOption(\"gift_text_length_max\") characters. Only Bold, Italic, Underline, Strikethrough, Spoiler, and CustomEmoji entities are allowed"
			}
		],
		"description": "The user gifting Telegram Premium to another user",
		"inheritance": "StorePaymentPurpose",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storePaymentPurposePremiumGiftCodes",
		"methods": [
			{
				"name": "boosted_chat_id",
				"type": "int53",
				"description": "Identifier of the supergroup or channel chat, which will be automatically boosted by the users for duration of the Premium subscription and which is administered by the user"
			},
			{
				"name": "currency",
				"type": "string",
				"description": "ISO 4217 currency code of the payment currency"
			},
			{
				"name": "amount",
				"type": "int53",
				"description": "Paid amount, in the smallest units of the currency"
			},
			{
				"name": "user_ids",
				"type": "vector<int53>",
				"description": "Identifiers of the users which can activate the gift codes"
			},
			{
				"name": "text",
				"type": "formattedText",
				"description": "Text to show along with the gift codes; 0-getOption(\"gift_text_length_max\") characters. Only Bold, Italic, Underline, Strikethrough, Spoiler, and CustomEmoji entities are allowed"
			}
		],
		"description": "The user boosting a chat by creating Telegram Premium gift codes for other users",
		"inheritance": "StorePaymentPurpose",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storePaymentPurposePremiumGiveaway",
		"methods": [
			{
				"name": "parameters",
				"type": "giveawayParameters",
				"description": "Giveaway parameters"
			},
			{
				"name": "currency",
				"type": "string",
				"description": "ISO 4217 currency code of the payment currency"
			},
			{
				"name": "amount",
				"type": "int53",
				"description": "Paid amount, in the smallest units of the currency"
			}
		],
		"description": "The user creating a Telegram Premium giveaway",
		"inheritance": "StorePaymentPurpose",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storePaymentPurposeStarGiveaway",
		"methods": [
			{
				"name": "parameters",
				"type": "giveawayParameters",
				"description": "Giveaway parameters"
			},
			{
				"name": "currency",
				"type": "string",
				"description": "ISO 4217 currency code of the payment currency"
			},
			{
				"name": "amount",
				"type": "int53",
				"description": "Paid amount, in the smallest units of the currency"
			},
			{
				"name": "winner_count",
				"type": "int32",
				"description": "The number of users to receive Telegram Stars"
			},
			{
				"name": "star_count",
				"type": "int53",
				"description": "The number of Telegram Stars to be distributed through the giveaway"
			}
		],
		"description": "The user creating a Telegram Star giveaway",
		"inheritance": "StorePaymentPurpose",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storePaymentPurposeStars",
		"methods": [
			{
				"name": "currency",
				"type": "string",
				"description": "ISO 4217 currency code of the payment currency"
			},
			{
				"name": "amount",
				"type": "int53",
				"description": "Paid amount, in the smallest units of the currency"
			},
			{
				"name": "star_count",
				"type": "int53",
				"description": "Number of bought Telegram Stars"
			}
		],
		"description": "The user buying Telegram Stars",
		"inheritance": "StorePaymentPurpose",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storePaymentPurposeGiftedStars",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user to which Telegram Stars are gifted"
			},
			{
				"name": "currency",
				"type": "string",
				"description": "ISO 4217 currency code of the payment currency"
			},
			{
				"name": "amount",
				"type": "int53",
				"description": "Paid amount, in the smallest units of the currency"
			},
			{
				"name": "star_count",
				"type": "int53",
				"description": "Number of bought Telegram Stars"
			}
		],
		"description": "The user buying Telegram Stars for other users",
		"inheritance": "StorePaymentPurpose",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "TelegramPaymentPurpose",
		"methods": null,
		"description": "Describes a purpose of a payment toward Telegram",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "telegramPaymentPurposePremiumGift",
		"methods": [
			{
				"name": "currency",
				"type": "string",
				"description": "ISO 4217 currency code of the payment currency"
			},
			{
				"name": "amount",
				"type": "int53",
				"description": "Paid amount, in the smallest units of the currency"
			},
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user which will receive Telegram Premium"
			},
			{
				"name": "month_count",
				"type": "int32",
				"description": "Number of months the Telegram Premium subscription will be active for the user"
			},
			{
				"name": "text",
				"type": "formattedText",
				"description": "Text to show to the user receiving Telegram Premium; 0-getOption(\"gift_text_length_max\") characters. Only Bold, Italic, Underline, Strikethrough, Spoiler, and CustomEmoji entities are allowed"
			}
		],
		"description": "The user gifting Telegram Premium to another user",
		"inheritance": "TelegramPaymentPurpose",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "telegramPaymentPurposePremiumGiftCodes",
		"methods": [
			{
				"name": "boosted_chat_id",
				"type": "int53",
				"description": "Identifier of the supergroup or channel chat, which will be automatically boosted by the users for duration of the Premium subscription and which is administered by the user"
			},
			{
				"name": "currency",
				"type": "string",
				"description": "ISO 4217 currency code of the payment currency"
			},
			{
				"name": "amount",
				"type": "int53",
				"description": "Paid amount, in the smallest units of the currency"
			},
			{
				"name": "user_ids",
				"type": "vector<int53>",
				"description": "Identifiers of the users which can activate the gift codes"
			},
			{
				"name": "month_count",
				"type": "int32",
				"description": "Number of months the Telegram Premium subscription will be active for the users"
			},
			{
				"name": "text",
				"type": "formattedText",
				"description": "Text to show along with the gift codes; 0-getOption(\"gift_text_length_max\") characters. Only Bold, Italic, Underline, Strikethrough, Spoiler, and CustomEmoji entities are allowed"
			}
		],
		"description": "The user boosting a chat by creating Telegram Premium gift codes for other users",
		"inheritance": "TelegramPaymentPurpose",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "telegramPaymentPurposePremiumGiveaway",
		"methods": [
			{
				"name": "parameters",
				"type": "giveawayParameters",
				"description": "Giveaway parameters"
			},
			{
				"name": "currency",
				"type": "string",
				"description": "ISO 4217 currency code of the payment currency"
			},
			{
				"name": "amount",
				"type": "int53",
				"description": "Paid amount, in the smallest units of the currency"
			},
			{
				"name": "winner_count",
				"type": "int32",
				"description": "Number of users which will be able to activate the gift codes"
			},
			{
				"name": "month_count",
				"type": "int32",
				"description": "Number of months the Telegram Premium subscription will be active for the users"
			}
		],
		"description": "The user creating a Telegram Premium giveaway",
		"inheritance": "TelegramPaymentPurpose",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "telegramPaymentPurposeStars",
		"methods": [
			{
				"name": "currency",
				"type": "string",
				"description": "ISO 4217 currency code of the payment currency"
			},
			{
				"name": "amount",
				"type": "int53",
				"description": "Paid amount, in the smallest units of the currency"
			},
			{
				"name": "star_count",
				"type": "int53",
				"description": "Number of bought Telegram Stars"
			}
		],
		"description": "The user buying Telegram Stars",
		"inheritance": "TelegramPaymentPurpose",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "telegramPaymentPurposeGiftedStars",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user to which Telegram Stars are gifted"
			},
			{
				"name": "currency",
				"type": "string",
				"description": "ISO 4217 currency code of the payment currency"
			},
			{
				"name": "amount",
				"type": "int53",
				"description": "Paid amount, in the smallest units of the currency"
			},
			{
				"name": "star_count",
				"type": "int53",
				"description": "Number of bought Telegram Stars"
			}
		],
		"description": "The user buying Telegram Stars for other users",
		"inheritance": "TelegramPaymentPurpose",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "telegramPaymentPurposeStarGiveaway",
		"methods": [
			{
				"name": "parameters",
				"type": "giveawayParameters",
				"description": "Giveaway parameters"
			},
			{
				"name": "currency",
				"type": "string",
				"description": "ISO 4217 currency code of the payment currency"
			},
			{
				"name": "amount",
				"type": "int53",
				"description": "Paid amount, in the smallest units of the currency"
			},
			{
				"name": "winner_count",
				"type": "int32",
				"description": "The number of users to receive Telegram Stars"
			},
			{
				"name": "star_count",
				"type": "int53",
				"description": "The number of Telegram Stars to be distributed through the giveaway"
			}
		],
		"description": "The user creating a Telegram Star giveaway",
		"inheritance": "TelegramPaymentPurpose",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "telegramPaymentPurposeJoinChat",
		"methods": [
			{
				"name": "invite_link",
				"type": "string",
				"description": "Invite link to use"
			}
		],
		"description": "The user joins a chat and subscribes to regular payments in Telegram Stars",
		"inheritance": "TelegramPaymentPurpose",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "DeviceToken",
		"methods": null,
		"description": "Represents a data needed to subscribe for push notifications through registerDevice method.",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "deviceTokenFirebaseCloudMessaging",
		"methods": [
			{
				"name": "token",
				"type": "string",
				"description": "Device registration token; may be empty to deregister a device"
			},
			{
				"name": "encrypt",
				"type": "Bool",
				"description": "True, if push notifications must be additionally encrypted"
			}
		],
		"description": "A token for Firebase Cloud Messaging",
		"inheritance": "DeviceToken",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "deviceTokenApplePush",
		"methods": [
			{
				"name": "device_token",
				"type": "string",
				"description": "Device token; may be empty to deregister a device"
			},
			{
				"name": "is_app_sandbox",
				"type": "Bool",
				"description": "True, if App Sandbox is enabled"
			}
		],
		"description": "A token for Apple Push Notification service",
		"inheritance": "DeviceToken",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "deviceTokenApplePushVoIP",
		"methods": [
			{
				"name": "device_token",
				"type": "string",
				"description": "Device token; may be empty to deregister a device"
			},
			{
				"name": "is_app_sandbox",
				"type": "Bool",
				"description": "True, if App Sandbox is enabled"
			},
			{
				"name": "encrypt",
				"type": "Bool",
				"description": "True, if push notifications must be additionally encrypted"
			}
		],
		"description": "A token for Apple Push Notification service VoIP notifications",
		"inheritance": "DeviceToken",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "deviceTokenWindowsPush",
		"methods": [
			{
				"name": "access_token",
				"type": "string",
				"description": "The access token that will be used to send notifications; may be empty to deregister a device"
			}
		],
		"description": "A token for Windows Push Notification Services",
		"inheritance": "DeviceToken",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "deviceTokenMicrosoftPush",
		"methods": [
			{
				"name": "channel_uri",
				"type": "string",
				"description": "Push notification channel URI; may be empty to deregister a device"
			}
		],
		"description": "A token for Microsoft Push Notification Service",
		"inheritance": "DeviceToken",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "deviceTokenMicrosoftPushVoIP",
		"methods": [
			{
				"name": "channel_uri",
				"type": "string",
				"description": "Push notification channel URI; may be empty to deregister a device"
			}
		],
		"description": "A token for Microsoft Push Notification Service VoIP channel",
		"inheritance": "DeviceToken",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "deviceTokenWebPush",
		"methods": [
			{
				"name": "endpoint",
				"type": "string",
				"description": "Absolute URL exposed by the push service where the application server can send push messages; may be empty to deregister a device"
			},
			{
				"name": "p256dh_base64url",
				"type": "string",
				"description": "Base64url-encoded P-256 elliptic curve Diffie-Hellman public key"
			},
			{
				"name": "auth_base64url",
				"type": "string",
				"description": "Base64url-encoded authentication secret"
			}
		],
		"description": "A token for web Push API",
		"inheritance": "DeviceToken",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "deviceTokenSimplePush",
		"methods": [
			{
				"name": "endpoint",
				"type": "string",
				"description": "Absolute URL exposed by the push service where the application server can send push messages; may be empty to deregister a device"
			}
		],
		"description": "A token for Simple Push API for Firefox OS",
		"inheritance": "DeviceToken",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "deviceTokenUbuntuPush",
		"methods": [
			{
				"name": "token",
				"type": "string",
				"description": "Token; may be empty to deregister a device"
			}
		],
		"description": "A token for Ubuntu Push Client service",
		"inheritance": "DeviceToken",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "deviceTokenBlackBerryPush",
		"methods": [
			{
				"name": "token",
				"type": "string",
				"description": "Token; may be empty to deregister a device"
			}
		],
		"description": "A token for BlackBerry Push Service",
		"inheritance": "DeviceToken",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "deviceTokenTizenPush",
		"methods": [
			{
				"name": "reg_id",
				"type": "string",
				"description": "Push service registration identifier; may be empty to deregister a device"
			}
		],
		"description": "A token for Tizen Push Service",
		"inheritance": "DeviceToken",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "deviceTokenHuaweiPush",
		"methods": [
			{
				"name": "token",
				"type": "string",
				"description": "Device registration token; may be empty to deregister a device"
			},
			{
				"name": "encrypt",
				"type": "Bool",
				"description": "True, if push notifications must be additionally encrypted"
			}
		],
		"description": "A token for HUAWEI Push Service",
		"inheritance": "DeviceToken",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushReceiverId",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "The globally unique identifier of push notification subscription"
			}
		],
		"description": "Contains a globally unique push receiver identifier, which can be used to identify which account has received a push notification",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "BackgroundFill",
		"methods": null,
		"description": "Describes a fill of a background",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "backgroundFillSolid",
		"methods": [
			{
				"name": "color",
				"type": "int32",
				"description": "A color of the background in the RGB format"
			}
		],
		"description": "Describes a solid fill of a background",
		"inheritance": "BackgroundFill",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "backgroundFillGradient",
		"methods": [
			{
				"name": "top_color",
				"type": "int32",
				"description": "A top color of the background in the RGB format"
			},
			{
				"name": "bottom_color",
				"type": "int32",
				"description": "A bottom color of the background in the RGB format"
			},
			{
				"name": "rotation_angle",
				"type": "int32",
				"description": "Clockwise rotation angle of the gradient, in degrees; 0-359. Must always be divisible by 45"
			}
		],
		"description": "Describes a gradient fill of a background",
		"inheritance": "BackgroundFill",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "backgroundFillFreeformGradient",
		"methods": [
			{
				"name": "colors",
				"type": "vector<int32>",
				"description": "A list of 3 or 4 colors of the freeform gradient in the RGB format"
			}
		],
		"description": "Describes a freeform gradient fill of a background",
		"inheritance": "BackgroundFill",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "BackgroundType",
		"methods": null,
		"description": "Describes the type of background",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "backgroundTypeWallpaper",
		"methods": [
			{
				"name": "is_blurred",
				"type": "Bool",
				"description": "True, if the wallpaper must be downscaled to fit in 450x450 square and then box-blurred with radius 12"
			},
			{
				"name": "is_moving",
				"type": "Bool",
				"description": "True, if the background needs to be slightly moved when device is tilted"
			}
		],
		"description": "A wallpaper in JPEG format",
		"inheritance": "BackgroundType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "backgroundTypePattern",
		"methods": [
			{
				"name": "fill",
				"type": "BackgroundFill",
				"description": "Fill of the background"
			},
			{
				"name": "intensity",
				"type": "int32",
				"description": "Intensity of the pattern when it is shown above the filled background; 0-100"
			},
			{
				"name": "is_inverted",
				"type": "Bool",
				"description": "True, if the background fill must be applied only to the pattern itself. All other pixels are black in this case. For dark themes only"
			},
			{
				"name": "is_moving",
				"type": "Bool",
				"description": "True, if the background needs to be slightly moved when device is tilted"
			}
		],
		"description": "A PNG or TGV (gzipped subset of SVG with MIME type \"application/x-tgwallpattern\") pattern to be combined with the background fill chosen by the user",
		"inheritance": "BackgroundType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "backgroundTypeFill",
		"methods": [
			{
				"name": "fill",
				"type": "BackgroundFill",
				"description": "The background fill"
			}
		],
		"description": "A filled background",
		"inheritance": "BackgroundType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "backgroundTypeChatTheme",
		"methods": [
			{
				"name": "theme_name",
				"type": "string",
				"description": "Name of the chat theme"
			}
		],
		"description": "A background from a chat theme; can be used only as a chat background in channels",
		"inheritance": "BackgroundType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "InputBackground",
		"methods": null,
		"description": "Contains information about background to set",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputBackgroundLocal",
		"methods": [
			{
				"name": "background",
				"type": "InputFile",
				"description": "Background file to use. Only inputFileLocal and inputFileGenerated are supported. The file must be in JPEG format for wallpapers and in PNG format for patterns"
			}
		],
		"description": "A background from a local file",
		"inheritance": "InputBackground",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputBackgroundRemote",
		"methods": [
			{
				"name": "background_id",
				"type": "int64",
				"description": "The background identifier"
			}
		],
		"description": "A background from the server",
		"inheritance": "InputBackground",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputBackgroundPrevious",
		"methods": [
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message with the background"
			}
		],
		"description": "A background previously set in the chat; for chat backgrounds only",
		"inheritance": "InputBackground",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatTheme",
		"methods": [
			{
				"name": "name",
				"type": "string",
				"description": "Theme name"
			},
			{
				"name": "light_settings",
				"type": "themeSettings",
				"description": "Theme settings for a light chat theme"
			},
			{
				"name": "dark_settings",
				"type": "themeSettings",
				"description": "Theme settings for a dark chat theme"
			}
		],
		"description": "Describes a chat theme",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "timeZone",
		"methods": [
			{
				"name": "id",
				"type": "string",
				"description": "Unique time zone identifier"
			},
			{
				"name": "name",
				"type": "string",
				"description": "Time zone name"
			},
			{
				"name": "utc_time_offset",
				"type": "int32",
				"description": "Current UTC time offset for the time zone"
			}
		],
		"description": "Describes a time zone",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "timeZones",
		"methods": [
			{
				"name": "time_zones",
				"type": "vector<timeZone>",
				"description": "A list of time zones"
			}
		],
		"description": "Contains a list of time zones",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "hashtags",
		"methods": [
			{
				"name": "hashtags",
				"type": "vector<string>",
				"description": "A list of hashtags"
			}
		],
		"description": "Contains a list of hashtags",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "CanSendStoryResult",
		"methods": null,
		"description": "Represents result of checking whether the current user can send a story in the specific chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "canSendStoryResultOk",
		"methods": null,
		"description": "A story can be sent",
		"inheritance": "CanSendStoryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "canSendStoryResultPremiumNeeded",
		"methods": null,
		"description": "The user must subscribe to Telegram Premium to be able to post stories",
		"inheritance": "CanSendStoryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "canSendStoryResultBoostNeeded",
		"methods": null,
		"description": "The chat must be boosted first by Telegram Premium subscribers to post more stories. Call getChatBoostStatus to get current boost status of the chat",
		"inheritance": "CanSendStoryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "canSendStoryResultActiveStoryLimitExceeded",
		"methods": null,
		"description": "The limit for the number of active stories exceeded. The user can buy Telegram Premium, delete an active story, or wait for the oldest story to expire",
		"inheritance": "CanSendStoryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "canSendStoryResultWeeklyLimitExceeded",
		"methods": [
			{
				"name": "retry_after",
				"type": "int32",
				"description": "Time left before the user can send the next story"
			}
		],
		"description": "The weekly limit for the number of posted stories exceeded. The user needs to buy Telegram Premium or wait specified time",
		"inheritance": "CanSendStoryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "canSendStoryResultMonthlyLimitExceeded",
		"methods": [
			{
				"name": "retry_after",
				"type": "int32",
				"description": "Time left before the user can send the next story"
			}
		],
		"description": "The monthly limit for the number of posted stories exceeded. The user needs to buy Telegram Premium or wait specified time",
		"inheritance": "CanSendStoryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "CanTransferOwnershipResult",
		"methods": null,
		"description": "Represents result of checking whether the current session can be used to transfer a chat ownership to another user",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "canTransferOwnershipResultOk",
		"methods": null,
		"description": "The session can be used",
		"inheritance": "CanTransferOwnershipResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "canTransferOwnershipResultPasswordNeeded",
		"methods": null,
		"description": "The 2-step verification needs to be enabled first",
		"inheritance": "CanTransferOwnershipResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "canTransferOwnershipResultPasswordTooFresh",
		"methods": [
			{
				"name": "retry_after",
				"type": "int32",
				"description": "Time left before the session can be used to transfer ownership of a chat, in seconds"
			}
		],
		"description": "The 2-step verification was enabled recently, user needs to wait",
		"inheritance": "CanTransferOwnershipResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "canTransferOwnershipResultSessionTooFresh",
		"methods": [
			{
				"name": "retry_after",
				"type": "int32",
				"description": "Time left before the session can be used to transfer ownership of a chat, in seconds"
			}
		],
		"description": "The session was created recently, user needs to wait",
		"inheritance": "CanTransferOwnershipResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "CheckChatUsernameResult",
		"methods": null,
		"description": "Represents result of checking whether a username can be set for a chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "checkChatUsernameResultOk",
		"methods": null,
		"description": "The username can be set",
		"inheritance": "CheckChatUsernameResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "checkChatUsernameResultUsernameInvalid",
		"methods": null,
		"description": "The username is invalid",
		"inheritance": "CheckChatUsernameResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "checkChatUsernameResultUsernameOccupied",
		"methods": null,
		"description": "The username is occupied",
		"inheritance": "CheckChatUsernameResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "checkChatUsernameResultUsernamePurchasable",
		"methods": null,
		"description": "The username can be purchased at https://fragment.com. Information about the username can be received using getCollectibleItemInfo",
		"inheritance": "CheckChatUsernameResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "checkChatUsernameResultPublicChatsTooMany",
		"methods": null,
		"description": "The user has too many chats with username, one of them must be made private first",
		"inheritance": "CheckChatUsernameResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "checkChatUsernameResultPublicGroupsUnavailable",
		"methods": null,
		"description": "The user can't be a member of a public supergroup",
		"inheritance": "CheckChatUsernameResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "CheckStickerSetNameResult",
		"methods": null,
		"description": "Represents result of checking whether a name can be used for a new sticker set",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "checkStickerSetNameResultOk",
		"methods": null,
		"description": "The name can be set",
		"inheritance": "CheckStickerSetNameResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "checkStickerSetNameResultNameInvalid",
		"methods": null,
		"description": "The name is invalid",
		"inheritance": "CheckStickerSetNameResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "checkStickerSetNameResultNameOccupied",
		"methods": null,
		"description": "The name is occupied",
		"inheritance": "CheckStickerSetNameResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ResetPasswordResult",
		"methods": null,
		"description": "Represents result of 2-step verification password reset",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "resetPasswordResultOk",
		"methods": null,
		"description": "The password was reset",
		"inheritance": "ResetPasswordResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "resetPasswordResultPending",
		"methods": [
			{
				"name": "pending_reset_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) after which the password can be reset immediately using resetPassword"
			}
		],
		"description": "The password reset request is pending",
		"inheritance": "ResetPasswordResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "resetPasswordResultDeclined",
		"methods": [
			{
				"name": "retry_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the password reset can be retried"
			}
		],
		"description": "The password reset request was declined",
		"inheritance": "ResetPasswordResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "MessageFileType",
		"methods": null,
		"description": "Contains information about a file with messages exported from another app",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageFileTypePrivate",
		"methods": [
			{
				"name": "name",
				"type": "string",
				"description": "Name of the other party; may be empty if unrecognized"
			}
		],
		"description": "The messages were exported from a private chat",
		"inheritance": "MessageFileType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageFileTypeGroup",
		"methods": [
			{
				"name": "title",
				"type": "string",
				"description": "Title of the group chat; may be empty if unrecognized"
			}
		],
		"description": "The messages were exported from a group chat",
		"inheritance": "MessageFileType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageFileTypeUnknown",
		"methods": null,
		"description": "The messages were exported from a chat of unknown type",
		"inheritance": "MessageFileType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "PushMessageContent",
		"methods": null,
		"description": "Contains content of a push message notification",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentHidden",
		"methods": [
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "True, if the message is a pinned message with the specified content"
			}
		],
		"description": "A general message with hidden content",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentAnimation",
		"methods": [
			{
				"name": "animation",
				"type": "animation",
				"description": "Message content; may be null"
			},
			{
				"name": "caption",
				"type": "string",
				"description": "Animation caption"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "True, if the message is a pinned message with the specified content"
			}
		],
		"description": "An animation message (GIF-style).",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentAudio",
		"methods": [
			{
				"name": "audio",
				"type": "audio",
				"description": "Message content; may be null"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "True, if the message is a pinned message with the specified content"
			}
		],
		"description": "An audio message",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentContact",
		"methods": [
			{
				"name": "name",
				"type": "string",
				"description": "Contact's name"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "True, if the message is a pinned message with the specified content"
			}
		],
		"description": "A message with a user contact",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentContactRegistered",
		"methods": null,
		"description": "A contact has registered with Telegram",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentDocument",
		"methods": [
			{
				"name": "document",
				"type": "document",
				"description": "Message content; may be null"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "True, if the message is a pinned message with the specified content"
			}
		],
		"description": "A document message (a general file)",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentGame",
		"methods": [
			{
				"name": "title",
				"type": "string",
				"description": "Game title, empty for pinned game message"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "True, if the message is a pinned message with the specified content"
			}
		],
		"description": "A message with a game",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentGameScore",
		"methods": [
			{
				"name": "title",
				"type": "string",
				"description": "Game title, empty for pinned message"
			},
			{
				"name": "score",
				"type": "int32",
				"description": "New score, 0 for pinned message"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "True, if the message is a pinned message with the specified content"
			}
		],
		"description": "A new high score was achieved in a game",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentInvoice",
		"methods": [
			{
				"name": "price",
				"type": "string",
				"description": "Product price"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "True, if the message is a pinned message with the specified content"
			}
		],
		"description": "A message with an invoice from a bot",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentLocation",
		"methods": [
			{
				"name": "is_live",
				"type": "Bool",
				"description": "True, if the location is live"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "True, if the message is a pinned message with the specified content"
			}
		],
		"description": "A message with a location",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentPaidMedia",
		"methods": [
			{
				"name": "star_count",
				"type": "int53",
				"description": "Number of Telegram Stars needed to buy access to the media in the message; 0 for pinned message"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "True, if the message is a pinned message with the specified content"
			}
		],
		"description": "A message with paid media",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentPhoto",
		"methods": [
			{
				"name": "photo",
				"type": "photo",
				"description": "Message content; may be null"
			},
			{
				"name": "caption",
				"type": "string",
				"description": "Photo caption"
			},
			{
				"name": "is_secret",
				"type": "Bool",
				"description": "True, if the photo is secret"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "True, if the message is a pinned message with the specified content"
			}
		],
		"description": "A photo message",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentPoll",
		"methods": [
			{
				"name": "question",
				"type": "string",
				"description": "Poll question"
			},
			{
				"name": "is_regular",
				"type": "Bool",
				"description": "True, if the poll is regular and not in quiz mode"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "True, if the message is a pinned message with the specified content"
			}
		],
		"description": "A message with a poll",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentPremiumGiftCode",
		"methods": [
			{
				"name": "month_count",
				"type": "int32",
				"description": "Number of months the Telegram Premium subscription will be active after code activation"
			}
		],
		"description": "A message with a Telegram Premium gift code created for the user",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentGiveaway",
		"methods": [
			{
				"name": "winner_count",
				"type": "int32",
				"description": "Number of users which will receive giveaway prizes; 0 for pinned message"
			},
			{
				"name": "prize",
				"type": "GiveawayPrize",
				"description": "Prize of the giveaway; may be null for pinned message"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "True, if the message is a pinned message with the specified content"
			}
		],
		"description": "A message with a giveaway",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentGift",
		"methods": [
			{
				"name": "star_count",
				"type": "int53",
				"description": "Number of Telegram Stars that sender paid for the gift"
			}
		],
		"description": "A message with a gift",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentUpgradedGift",
		"methods": [
			{
				"name": "is_upgrade",
				"type": "Bool",
				"description": "True, if the gift was obtained by upgrading of a previously received gift; otherwise, this is a transferred gift"
			}
		],
		"description": "A message with an upgraded gift",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentScreenshotTaken",
		"methods": null,
		"description": "A screenshot of a message in the chat has been taken",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentSticker",
		"methods": [
			{
				"name": "sticker",
				"type": "sticker",
				"description": "Message content; may be null"
			},
			{
				"name": "emoji",
				"type": "string",
				"description": "Emoji corresponding to the sticker; may be empty"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "True, if the message is a pinned message with the specified content"
			}
		],
		"description": "A message with a sticker",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentStory",
		"methods": [
			{
				"name": "is_mention",
				"type": "Bool",
				"description": "True, if the user was mentioned in the story"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "True, if the message is a pinned message with the specified content"
			}
		],
		"description": "A message with a story",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentText",
		"methods": [
			{
				"name": "text",
				"type": "string",
				"description": "Message text"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "True, if the message is a pinned message with the specified content"
			}
		],
		"description": "A text message",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentVideo",
		"methods": [
			{
				"name": "video",
				"type": "video",
				"description": "Message content; may be null"
			},
			{
				"name": "caption",
				"type": "string",
				"description": "Video caption"
			},
			{
				"name": "is_secret",
				"type": "Bool",
				"description": "True, if the video is secret"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "True, if the message is a pinned message with the specified content"
			}
		],
		"description": "A video message",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentVideoNote",
		"methods": [
			{
				"name": "video_note",
				"type": "videoNote",
				"description": "Message content; may be null"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "True, if the message is a pinned message with the specified content"
			}
		],
		"description": "A video note message",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentVoiceNote",
		"methods": [
			{
				"name": "voice_note",
				"type": "voiceNote",
				"description": "Message content; may be null"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "True, if the message is a pinned message with the specified content"
			}
		],
		"description": "A voice note message",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentBasicGroupChatCreate",
		"methods": null,
		"description": "A newly created basic group",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentVideoChatStarted",
		"methods": null,
		"description": "A video chat or live stream was started",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentVideoChatEnded",
		"methods": null,
		"description": "A video chat or live stream has ended",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentInviteVideoChatParticipants",
		"methods": [
			{
				"name": "is_current_user",
				"type": "Bool",
				"description": "True, if the current user was invited to the video chat or the live stream"
			}
		],
		"description": "An invitation of participants to a video chat or live stream",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentChatAddMembers",
		"methods": [
			{
				"name": "member_name",
				"type": "string",
				"description": "Name of the added member"
			},
			{
				"name": "is_current_user",
				"type": "Bool",
				"description": "True, if the current user was added to the group"
			},
			{
				"name": "is_returned",
				"type": "Bool",
				"description": "True, if the user has returned to the group themselves"
			}
		],
		"description": "New chat members were invited to a group",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentChatChangePhoto",
		"methods": null,
		"description": "A chat photo was edited",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentChatChangeTitle",
		"methods": [
			{
				"name": "title",
				"type": "string",
				"description": "New chat title"
			}
		],
		"description": "A chat title was edited",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentChatSetBackground",
		"methods": [
			{
				"name": "is_same",
				"type": "Bool",
				"description": "True, if the set background is the same as the background of the current user"
			}
		],
		"description": "A chat background was edited",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentChatSetTheme",
		"methods": [
			{
				"name": "theme_name",
				"type": "string",
				"description": "If non-empty, name of a new theme, set for the chat. Otherwise, the chat theme was reset to the default one"
			}
		],
		"description": "A chat theme was edited",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentChatDeleteMember",
		"methods": [
			{
				"name": "member_name",
				"type": "string",
				"description": "Name of the deleted member"
			},
			{
				"name": "is_current_user",
				"type": "Bool",
				"description": "True, if the current user was deleted from the group"
			},
			{
				"name": "is_left",
				"type": "Bool",
				"description": "True, if the user has left the group themselves"
			}
		],
		"description": "A chat member was deleted",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentChatJoinByLink",
		"methods": null,
		"description": "A new member joined the chat via an invite link",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentChatJoinByRequest",
		"methods": null,
		"description": "A new member was accepted to the chat by an administrator",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentRecurringPayment",
		"methods": [
			{
				"name": "amount",
				"type": "string",
				"description": "The paid amount"
			}
		],
		"description": "A new recurring payment was made by the current user",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentSuggestProfilePhoto",
		"methods": null,
		"description": "A profile photo was suggested to the user",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentProximityAlertTriggered",
		"methods": [
			{
				"name": "distance",
				"type": "int32",
				"description": "The distance to the user"
			}
		],
		"description": "A user in the chat came within proximity alert range from the current user",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentMessageForwards",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "Number of forwarded messages"
			}
		],
		"description": "A forwarded messages",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "pushMessageContentMediaAlbum",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "Number of messages in the album"
			},
			{
				"name": "has_photos",
				"type": "Bool",
				"description": "True, if the album has at least one photo"
			},
			{
				"name": "has_videos",
				"type": "Bool",
				"description": "True, if the album has at least one video file"
			},
			{
				"name": "has_audios",
				"type": "Bool",
				"description": "True, if the album has at least one audio file"
			},
			{
				"name": "has_documents",
				"type": "Bool",
				"description": "True, if the album has at least one document"
			}
		],
		"description": "A media album",
		"inheritance": "PushMessageContent",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "NotificationType",
		"methods": null,
		"description": "Contains detailed information about a notification",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "notificationTypeNewMessage",
		"methods": [
			{
				"name": "message",
				"type": "message",
				"description": "The message"
			},
			{
				"name": "show_preview",
				"type": "Bool",
				"description": "True, if message content must be displayed in notifications"
			}
		],
		"description": "New message was received",
		"inheritance": "NotificationType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "notificationTypeNewSecretChat",
		"methods": null,
		"description": "New secret chat was created",
		"inheritance": "NotificationType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "notificationTypeNewCall",
		"methods": [
			{
				"name": "call_id",
				"type": "int32",
				"description": "Call identifier"
			}
		],
		"description": "New call was received",
		"inheritance": "NotificationType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "notificationTypeNewPushMessage",
		"methods": [
			{
				"name": "message_id",
				"type": "int53",
				"description": "The message identifier. The message will not be available in the chat history, but the identifier can be used in viewMessages, or as a message to be replied in the same chat"
			},
			{
				"name": "sender_id",
				"type": "MessageSender",
				"description": "Identifier of the sender of the message. Corresponding user or chat may be inaccessible"
			},
			{
				"name": "sender_name",
				"type": "string",
				"description": "Name of the sender"
			},
			{
				"name": "is_outgoing",
				"type": "Bool",
				"description": "True, if the message is outgoing"
			},
			{
				"name": "content",
				"type": "PushMessageContent",
				"description": "Push message content"
			}
		],
		"description": "New message was received through a push notification",
		"inheritance": "NotificationType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "NotificationGroupType",
		"methods": null,
		"description": "Describes the type of notifications in a notification group",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "notificationGroupTypeMessages",
		"methods": null,
		"description": "A group containing notifications of type notificationTypeNewMessage and notificationTypeNewPushMessage with ordinary unread messages",
		"inheritance": "NotificationGroupType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "notificationGroupTypeMentions",
		"methods": null,
		"description": "A group containing notifications of type notificationTypeNewMessage and notificationTypeNewPushMessage with unread mentions of the current user, replies to their messages, or a pinned message",
		"inheritance": "NotificationGroupType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "notificationGroupTypeSecretChat",
		"methods": null,
		"description": "A group containing a notification of type notificationTypeNewSecretChat",
		"inheritance": "NotificationGroupType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "notificationGroupTypeCalls",
		"methods": null,
		"description": "A group containing notifications of type notificationTypeNewCall",
		"inheritance": "NotificationGroupType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "notificationSound",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "Unique identifier of the notification sound"
			},
			{
				"name": "duration",
				"type": "int32",
				"description": "Duration of the sound, in seconds"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the sound was created"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Title of the notification sound"
			},
			{
				"name": "data",
				"type": "string",
				"description": "Arbitrary data, defined while the sound was uploaded"
			},
			{
				"name": "sound",
				"type": "file",
				"description": "File containing the sound"
			}
		],
		"description": "Describes a notification sound in MP3 format",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "notificationSounds",
		"methods": [
			{
				"name": "notification_sounds",
				"type": "vector<notificationSound>",
				"description": "A list of notification sounds"
			}
		],
		"description": "Contains a list of notification sounds",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "notification",
		"methods": [
			{
				"name": "id",
				"type": "int32",
				"description": "Unique persistent identifier of this notification"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Notification date"
			},
			{
				"name": "is_silent",
				"type": "Bool",
				"description": "True, if the notification was explicitly sent without sound"
			},
			{
				"name": "type",
				"type": "NotificationType",
				"description": "Notification type"
			}
		],
		"description": "Contains information about a notification",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "notificationGroup",
		"methods": [
			{
				"name": "id",
				"type": "int32",
				"description": "Unique persistent auto-incremented from 1 identifier of the notification group"
			},
			{
				"name": "type",
				"type": "NotificationGroupType",
				"description": "Type of the group"
			},
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of a chat to which all notifications in the group belong"
			},
			{
				"name": "total_count",
				"type": "int32",
				"description": "Total number of active notifications in the group"
			},
			{
				"name": "notifications",
				"type": "vector<notification>",
				"description": "The list of active notifications"
			}
		],
		"description": "Describes a group of notifications",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "OptionValue",
		"methods": null,
		"description": "Represents the value of an option",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "optionValueBoolean",
		"methods": [
			{
				"name": "value",
				"type": "Bool",
				"description": "The value of the option"
			}
		],
		"description": "Represents a boolean option",
		"inheritance": "OptionValue",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "optionValueEmpty",
		"methods": null,
		"description": "Represents an unknown option or an option which has a default value",
		"inheritance": "OptionValue",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "optionValueInteger",
		"methods": [
			{
				"name": "value",
				"type": "int64",
				"description": "The value of the option"
			}
		],
		"description": "Represents an integer option",
		"inheritance": "OptionValue",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "optionValueString",
		"methods": [
			{
				"name": "value",
				"type": "string",
				"description": "The value of the option"
			}
		],
		"description": "Represents a string option",
		"inheritance": "OptionValue",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "jsonObjectMember",
		"methods": [
			{
				"name": "key",
				"type": "string",
				"description": "Member's key"
			},
			{
				"name": "value",
				"type": "JsonValue",
				"description": "Member's value"
			}
		],
		"description": "Represents one member of a JSON object",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "JsonValue",
		"methods": null,
		"description": "Represents a JSON value",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "jsonValueNull",
		"methods": null,
		"description": "Represents a null JSON value",
		"inheritance": "JsonValue",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "jsonValueBoolean",
		"methods": [
			{
				"name": "value",
				"type": "Bool",
				"description": "The value"
			}
		],
		"description": "Represents a boolean JSON value",
		"inheritance": "JsonValue",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "jsonValueNumber",
		"methods": [
			{
				"name": "value",
				"type": "double",
				"description": "The value"
			}
		],
		"description": "Represents a numeric JSON value",
		"inheritance": "JsonValue",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "jsonValueString",
		"methods": [
			{
				"name": "value",
				"type": "string",
				"description": "The value"
			}
		],
		"description": "Represents a string JSON value",
		"inheritance": "JsonValue",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "jsonValueArray",
		"methods": [
			{
				"name": "values",
				"type": "vector<JsonValue>",
				"description": "The list of array elements"
			}
		],
		"description": "Represents a JSON array",
		"inheritance": "JsonValue",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "jsonValueObject",
		"methods": [
			{
				"name": "members",
				"type": "vector<jsonObjectMember>",
				"description": "The list of object members"
			}
		],
		"description": "Represents a JSON object",
		"inheritance": "JsonValue",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "StoryPrivacySettings",
		"methods": null,
		"description": "Describes privacy settings of a story",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyPrivacySettingsEveryone",
		"methods": [
			{
				"name": "except_user_ids",
				"type": "vector<int53>",
				"description": "Identifiers of the users that can't see the story; always unknown and empty for non-owned stories"
			}
		],
		"description": "The story can be viewed by everyone",
		"inheritance": "StoryPrivacySettings",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyPrivacySettingsContacts",
		"methods": [
			{
				"name": "except_user_ids",
				"type": "vector<int53>",
				"description": "User identifiers of the contacts that can't see the story; always unknown and empty for non-owned stories"
			}
		],
		"description": "The story can be viewed by all contacts except chosen users",
		"inheritance": "StoryPrivacySettings",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyPrivacySettingsCloseFriends",
		"methods": null,
		"description": "The story can be viewed by all close friends",
		"inheritance": "StoryPrivacySettings",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyPrivacySettingsSelectedUsers",
		"methods": [
			{
				"name": "user_ids",
				"type": "vector<int53>",
				"description": "Identifiers of the users; always unknown and empty for non-owned stories"
			}
		],
		"description": "The story can be viewed by certain specified users",
		"inheritance": "StoryPrivacySettings",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "UserPrivacySettingRule",
		"methods": null,
		"description": "Represents a single rule for managing user privacy settings",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userPrivacySettingRuleAllowAll",
		"methods": null,
		"description": "A rule to allow all users to do something",
		"inheritance": "UserPrivacySettingRule",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userPrivacySettingRuleAllowContacts",
		"methods": null,
		"description": "A rule to allow all contacts of the user to do something",
		"inheritance": "UserPrivacySettingRule",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userPrivacySettingRuleAllowBots",
		"methods": null,
		"description": "A rule to allow all bots to do something",
		"inheritance": "UserPrivacySettingRule",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userPrivacySettingRuleAllowPremiumUsers",
		"methods": null,
		"description": "A rule to allow all Premium Users to do something; currently, allowed only for userPrivacySettingAllowChatInvites",
		"inheritance": "UserPrivacySettingRule",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userPrivacySettingRuleAllowUsers",
		"methods": [
			{
				"name": "user_ids",
				"type": "vector<int53>",
				"description": "The user identifiers, total number of users in all rules must not exceed 1000"
			}
		],
		"description": "A rule to allow certain specified users to do something",
		"inheritance": "UserPrivacySettingRule",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userPrivacySettingRuleAllowChatMembers",
		"methods": [
			{
				"name": "chat_ids",
				"type": "vector<int53>",
				"description": "The chat identifiers, total number of chats in all rules must not exceed 20"
			}
		],
		"description": "A rule to allow all members of certain specified basic groups and supergroups to doing something",
		"inheritance": "UserPrivacySettingRule",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userPrivacySettingRuleRestrictAll",
		"methods": null,
		"description": "A rule to restrict all users from doing something",
		"inheritance": "UserPrivacySettingRule",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userPrivacySettingRuleRestrictContacts",
		"methods": null,
		"description": "A rule to restrict all contacts of the user from doing something",
		"inheritance": "UserPrivacySettingRule",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userPrivacySettingRuleRestrictBots",
		"methods": null,
		"description": "A rule to restrict all bots from doing something",
		"inheritance": "UserPrivacySettingRule",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userPrivacySettingRuleRestrictUsers",
		"methods": [
			{
				"name": "user_ids",
				"type": "vector<int53>",
				"description": "The user identifiers, total number of users in all rules must not exceed 1000"
			}
		],
		"description": "A rule to restrict all specified users from doing something",
		"inheritance": "UserPrivacySettingRule",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userPrivacySettingRuleRestrictChatMembers",
		"methods": [
			{
				"name": "chat_ids",
				"type": "vector<int53>",
				"description": "The chat identifiers, total number of chats in all rules must not exceed 20"
			}
		],
		"description": "A rule to restrict all members of specified basic groups and supergroups from doing something",
		"inheritance": "UserPrivacySettingRule",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userPrivacySettingRules",
		"methods": [
			{
				"name": "rules",
				"type": "vector<UserPrivacySettingRule>",
				"description": "A list of rules"
			}
		],
		"description": "A list of privacy rules. Rules are matched in the specified order. The first matched rule defines the privacy setting for a given user. If no rule matches, the action is not allowed",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "UserPrivacySetting",
		"methods": null,
		"description": "Describes available user privacy settings",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userPrivacySettingShowStatus",
		"methods": null,
		"description": "A privacy setting for managing whether the user's online status is visible",
		"inheritance": "UserPrivacySetting",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userPrivacySettingShowProfilePhoto",
		"methods": null,
		"description": "A privacy setting for managing whether the user's profile photo is visible",
		"inheritance": "UserPrivacySetting",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userPrivacySettingShowLinkInForwardedMessages",
		"methods": null,
		"description": "A privacy setting for managing whether a link to the user's account is included in forwarded messages",
		"inheritance": "UserPrivacySetting",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userPrivacySettingShowPhoneNumber",
		"methods": null,
		"description": "A privacy setting for managing whether the user's phone number is visible",
		"inheritance": "UserPrivacySetting",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userPrivacySettingShowBio",
		"methods": null,
		"description": "A privacy setting for managing whether the user's bio is visible",
		"inheritance": "UserPrivacySetting",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userPrivacySettingShowBirthdate",
		"methods": null,
		"description": "A privacy setting for managing whether the user's birthdate is visible",
		"inheritance": "UserPrivacySetting",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userPrivacySettingAllowChatInvites",
		"methods": null,
		"description": "A privacy setting for managing whether the user can be invited to chats",
		"inheritance": "UserPrivacySetting",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userPrivacySettingAllowCalls",
		"methods": null,
		"description": "A privacy setting for managing whether the user can be called",
		"inheritance": "UserPrivacySetting",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userPrivacySettingAllowPeerToPeerCalls",
		"methods": null,
		"description": "A privacy setting for managing whether peer-to-peer connections can be used for calls",
		"inheritance": "UserPrivacySetting",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userPrivacySettingAllowFindingByPhoneNumber",
		"methods": null,
		"description": "A privacy setting for managing whether the user can be found by their phone number. Checked only if the phone number is not known to the other user. Can be set only to \"Allow contacts\" or \"Allow all\"",
		"inheritance": "UserPrivacySetting",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userPrivacySettingAllowPrivateVoiceAndVideoNoteMessages",
		"methods": null,
		"description": "A privacy setting for managing whether the user can receive voice and video messages in private chats; for Telegram Premium users only",
		"inheritance": "UserPrivacySetting",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userPrivacySettingAutosaveGifts",
		"methods": null,
		"description": "A privacy setting for managing whether received gifts are automatically shown on the user's profile page",
		"inheritance": "UserPrivacySetting",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userPrivacySettingAllowUnpaidMessages",
		"methods": null,
		"description": "A privacy setting for managing whether the user can receive messages without additional payment",
		"inheritance": "UserPrivacySetting",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "readDatePrivacySettings",
		"methods": [
			{
				"name": "show_read_date",
				"type": "Bool",
				"description": "True, if message read date is shown to other users in private chats. If false and the current user isn't a Telegram Premium user, then they will not be able to see other's message read date"
			}
		],
		"description": "Contains privacy settings for message read date in private chats. Read dates are always shown to the users that can see online status of the current user regardless of this setting",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "newChatPrivacySettings",
		"methods": [
			{
				"name": "allow_new_chats_from_unknown_users",
				"type": "Bool",
				"description": "True, if non-contacts users are able to write first to the current user. Telegram Premium subscribers are able to write first regardless of this setting"
			},
			{
				"name": "incoming_paid_message_star_count",
				"type": "int53",
				"description": "Number of Telegram Stars that must be paid for every incoming private message by non-contacts; 0-getOption(\"paid_message_star_count_max\"). If positive, then allow_new_chats_from_unknown_users must be true. The current user will receive getOption(\"paid_message_earnings_per_mille\") Telegram Stars for each 1000 Telegram Stars paid for message sending"
			}
		],
		"description": "Contains privacy settings for chats with non-contacts",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "CanSendMessageToUserResult",
		"methods": null,
		"description": "Describes result of canSendMessageToUser",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "canSendMessageToUserResultOk",
		"methods": null,
		"description": "The user can be messaged",
		"inheritance": "CanSendMessageToUserResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "canSendMessageToUserResultUserHasPaidMessages",
		"methods": [
			{
				"name": "outgoing_paid_message_star_count",
				"type": "int53",
				"description": "Number of Telegram Stars that must be paid by the current user for each sent message to the user"
			}
		],
		"description": "The user can be messaged, but the messages are paid",
		"inheritance": "CanSendMessageToUserResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "canSendMessageToUserResultUserIsDeleted",
		"methods": null,
		"description": "The user can't be messaged, because they are deleted or unknown",
		"inheritance": "CanSendMessageToUserResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "canSendMessageToUserResultUserRestrictsNewChats",
		"methods": null,
		"description": "The user can't be messaged, because they restrict new chats with non-contacts",
		"inheritance": "CanSendMessageToUserResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "accountTtl",
		"methods": [
			{
				"name": "days",
				"type": "int32",
				"description": "Number of days of inactivity before the account will be flagged for deletion; 30-730 days"
			}
		],
		"description": "Contains information about the period of inactivity after which the current user's account will automatically be deleted",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageAutoDeleteTime",
		"methods": [
			{
				"name": "time",
				"type": "int32",
				"description": "Message auto-delete time, in seconds. If 0, then messages aren't deleted automatically"
			}
		],
		"description": "Contains default auto-delete timer setting for new chats",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "SessionType",
		"methods": null,
		"description": "Represents the type of session",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "sessionTypeAndroid",
		"methods": null,
		"description": "The session is running on an Android device",
		"inheritance": "SessionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "sessionTypeApple",
		"methods": null,
		"description": "The session is running on a generic Apple device",
		"inheritance": "SessionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "sessionTypeBrave",
		"methods": null,
		"description": "The session is running on the Brave browser",
		"inheritance": "SessionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "sessionTypeChrome",
		"methods": null,
		"description": "The session is running on the Chrome browser",
		"inheritance": "SessionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "sessionTypeEdge",
		"methods": null,
		"description": "The session is running on the Edge browser",
		"inheritance": "SessionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "sessionTypeFirefox",
		"methods": null,
		"description": "The session is running on the Firefox browser",
		"inheritance": "SessionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "sessionTypeIpad",
		"methods": null,
		"description": "The session is running on an iPad device",
		"inheritance": "SessionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "sessionTypeIphone",
		"methods": null,
		"description": "The session is running on an iPhone device",
		"inheritance": "SessionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "sessionTypeLinux",
		"methods": null,
		"description": "The session is running on a Linux device",
		"inheritance": "SessionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "sessionTypeMac",
		"methods": null,
		"description": "The session is running on a Mac device",
		"inheritance": "SessionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "sessionTypeOpera",
		"methods": null,
		"description": "The session is running on the Opera browser",
		"inheritance": "SessionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "sessionTypeSafari",
		"methods": null,
		"description": "The session is running on the Safari browser",
		"inheritance": "SessionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "sessionTypeUbuntu",
		"methods": null,
		"description": "The session is running on an Ubuntu device",
		"inheritance": "SessionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "sessionTypeUnknown",
		"methods": null,
		"description": "The session is running on an unknown type of device",
		"inheritance": "SessionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "sessionTypeVivaldi",
		"methods": null,
		"description": "The session is running on the Vivaldi browser",
		"inheritance": "SessionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "sessionTypeWindows",
		"methods": null,
		"description": "The session is running on a Windows device",
		"inheritance": "SessionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "sessionTypeXbox",
		"methods": null,
		"description": "The session is running on an Xbox console",
		"inheritance": "SessionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "session",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "Session identifier"
			},
			{
				"name": "is_current",
				"type": "Bool",
				"description": "True, if this session is the current session"
			},
			{
				"name": "is_password_pending",
				"type": "Bool",
				"description": "True, if a 2-step verification password is needed to complete authorization of the session"
			},
			{
				"name": "is_unconfirmed",
				"type": "Bool",
				"description": "True, if the session wasn't confirmed from another session"
			},
			{
				"name": "can_accept_secret_chats",
				"type": "Bool",
				"description": "True, if incoming secret chats can be accepted by the session"
			},
			{
				"name": "can_accept_calls",
				"type": "Bool",
				"description": "True, if incoming calls can be accepted by the session"
			},
			{
				"name": "type",
				"type": "SessionType",
				"description": "Session type based on the system and application version, which can be used to display a corresponding icon"
			},
			{
				"name": "api_id",
				"type": "int32",
				"description": "Telegram API identifier, as provided by the application"
			},
			{
				"name": "application_name",
				"type": "string",
				"description": "Name of the application, as provided by the application"
			},
			{
				"name": "application_version",
				"type": "string",
				"description": "The version of the application, as provided by the application"
			},
			{
				"name": "is_official_application",
				"type": "Bool",
				"description": "True, if the application is an official application or uses the api_id of an official application"
			},
			{
				"name": "device_model",
				"type": "string",
				"description": "Model of the device the application has been run or is running on, as provided by the application"
			},
			{
				"name": "platform",
				"type": "string",
				"description": "Operating system the application has been run or is running on, as provided by the application"
			},
			{
				"name": "system_version",
				"type": "string",
				"description": "Version of the operating system the application has been run or is running on, as provided by the application"
			},
			{
				"name": "log_in_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the user has logged in"
			},
			{
				"name": "last_active_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the session was last used"
			},
			{
				"name": "ip_address",
				"type": "string",
				"description": "IP address from which the session was created, in human-readable format"
			},
			{
				"name": "location",
				"type": "string",
				"description": "A human-readable description of the location from which the session was created, based on the IP address"
			}
		],
		"description": "Contains information about one session in a Telegram application used by the current user. Sessions must be shown to the user in the returned order",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "sessions",
		"methods": [
			{
				"name": "sessions",
				"type": "vector<session>",
				"description": "List of sessions"
			},
			{
				"name": "inactive_session_ttl_days",
				"type": "int32",
				"description": "Number of days of inactivity before sessions will automatically be terminated; 1-366 days"
			}
		],
		"description": "Contains a list of sessions",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "unconfirmedSession",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "Session identifier"
			},
			{
				"name": "log_in_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the user has logged in"
			},
			{
				"name": "device_model",
				"type": "string",
				"description": "Model of the device that was used for the session creation, as provided by the application"
			},
			{
				"name": "location",
				"type": "string",
				"description": "A human-readable description of the location from which the session was created, based on the IP address"
			}
		],
		"description": "Contains information about an unconfirmed session",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "connectedWebsite",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "Website identifier"
			},
			{
				"name": "domain_name",
				"type": "string",
				"description": "The domain name of the website"
			},
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "User identifier of a bot linked with the website"
			},
			{
				"name": "browser",
				"type": "string",
				"description": "The version of a browser used to log in"
			},
			{
				"name": "platform",
				"type": "string",
				"description": "Operating system the browser is running on"
			},
			{
				"name": "log_in_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the user was logged in"
			},
			{
				"name": "last_active_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when obtained authorization was last used"
			},
			{
				"name": "ip_address",
				"type": "string",
				"description": "IP address from which the user was logged in, in human-readable format"
			},
			{
				"name": "location",
				"type": "string",
				"description": "Human-readable description of a country and a region from which the user was logged in, based on the IP address"
			}
		],
		"description": "Contains information about one website the current user is logged in with Telegram",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "connectedWebsites",
		"methods": [
			{
				"name": "websites",
				"type": "vector<connectedWebsite>",
				"description": "List of connected websites"
			}
		],
		"description": "Contains a list of websites the current user is logged in with Telegram",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ReportReason",
		"methods": null,
		"description": "Describes the reason why a chat is reported",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reportReasonSpam",
		"methods": null,
		"description": "The chat contains spam messages",
		"inheritance": "ReportReason",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reportReasonViolence",
		"methods": null,
		"description": "The chat promotes violence",
		"inheritance": "ReportReason",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reportReasonPornography",
		"methods": null,
		"description": "The chat contains pornographic messages",
		"inheritance": "ReportReason",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reportReasonChildAbuse",
		"methods": null,
		"description": "The chat has child abuse related content",
		"inheritance": "ReportReason",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reportReasonCopyright",
		"methods": null,
		"description": "The chat contains copyrighted content",
		"inheritance": "ReportReason",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reportReasonUnrelatedLocation",
		"methods": null,
		"description": "The location-based chat is unrelated to its stated location",
		"inheritance": "ReportReason",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reportReasonFake",
		"methods": null,
		"description": "The chat represents a fake account",
		"inheritance": "ReportReason",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reportReasonIllegalDrugs",
		"methods": null,
		"description": "The chat has illegal drugs related content",
		"inheritance": "ReportReason",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reportReasonPersonalDetails",
		"methods": null,
		"description": "The chat contains messages with personal details",
		"inheritance": "ReportReason",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reportReasonCustom",
		"methods": null,
		"description": "A custom reason provided by the user",
		"inheritance": "ReportReason",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ReportChatResult",
		"methods": null,
		"description": "Describes result of chat report",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reportChatResultOk",
		"methods": null,
		"description": "The chat was reported successfully",
		"inheritance": "ReportChatResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reportChatResultOptionRequired",
		"methods": [
			{
				"name": "title",
				"type": "string",
				"description": "Title for the option choice"
			},
			{
				"name": "options",
				"type": "vector<reportOption>",
				"description": "List of available options"
			}
		],
		"description": "The user must choose an option to report the chat and repeat request with the chosen option",
		"inheritance": "ReportChatResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reportChatResultTextRequired",
		"methods": [
			{
				"name": "option_id",
				"type": "bytes",
				"description": "Option identifier for the next reportChat request"
			},
			{
				"name": "is_optional",
				"type": "Bool",
				"description": "True, if the user can skip text adding"
			}
		],
		"description": "The user must add additional text details to the report",
		"inheritance": "ReportChatResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reportChatResultMessagesRequired",
		"methods": null,
		"description": "The user must choose messages to report and repeat the reportChat request with the chosen messages",
		"inheritance": "ReportChatResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ReportStoryResult",
		"methods": null,
		"description": "Describes result of story report",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reportStoryResultOk",
		"methods": null,
		"description": "The story was reported successfully",
		"inheritance": "ReportStoryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reportStoryResultOptionRequired",
		"methods": [
			{
				"name": "title",
				"type": "string",
				"description": "Title for the option choice"
			},
			{
				"name": "options",
				"type": "vector<reportOption>",
				"description": "List of available options"
			}
		],
		"description": "The user must choose an option to report the story and repeat request with the chosen option",
		"inheritance": "ReportStoryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "reportStoryResultTextRequired",
		"methods": [
			{
				"name": "option_id",
				"type": "bytes",
				"description": "Option identifier for the next reportStory request"
			},
			{
				"name": "is_optional",
				"type": "Bool",
				"description": "True, if the user can skip text adding"
			}
		],
		"description": "The user must add additional text details to the report",
		"inheritance": "ReportStoryResult",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "InternalLinkType",
		"methods": null,
		"description": "Describes an internal https://t.me or tg: link, which must be processed by the application in a special way",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeActiveSessions",
		"methods": null,
		"description": "The link is a link to the Devices section of the application. Use getActiveSessions to get the list of active sessions and show them to the user",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeAttachmentMenuBot",
		"methods": [
			{
				"name": "target_chat",
				"type": "TargetChat",
				"description": "Target chat to be opened"
			},
			{
				"name": "bot_username",
				"type": "string",
				"description": "Username of the bot"
			},
			{
				"name": "url",
				"type": "string",
				"description": "URL to be passed to openWebApp"
			}
		],
		"description": "The link is a link to an attachment menu bot to be opened in the specified or a chosen chat. Process given target_chat to open the chat. Then, call searchPublicChat with the given bot username, check that the user is a bot and can be added to attachment menu. Then, use getAttachmentMenuBot to receive information about the bot. If the bot isn't added to attachment menu, then show a disclaimer about Mini Apps being third-party applications, ask the user to accept their Terms of service and confirm adding the bot to side and attachment menu. If the user accept the terms and confirms adding, then use toggleBotIsAddedToAttachmentMenu to add the bot. If the attachment menu bot can't be used in the opened chat, show an error to the user. If the bot is added to attachment menu and can be used in the chat, then use openWebApp with the given URL",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeAuthenticationCode",
		"methods": [
			{
				"name": "code",
				"type": "string",
				"description": "The authentication code"
			}
		],
		"description": "The link contains an authentication code. Call checkAuthenticationCode with the code if the current authorization state is authorizationStateWaitCode",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeBackground",
		"methods": [
			{
				"name": "background_name",
				"type": "string",
				"description": "Name of the background"
			}
		],
		"description": "The link is a link to a background. Call searchBackground with the given background name to process the link. If background is found and the user wants to apply it, then call setDefaultBackground",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeBotAddToChannel",
		"methods": [
			{
				"name": "bot_username",
				"type": "string",
				"description": "Username of the bot"
			},
			{
				"name": "administrator_rights",
				"type": "chatAdministratorRights",
				"description": "Expected administrator rights for the bot"
			}
		],
		"description": "The link is a link to a Telegram bot, which is expected to be added to a channel chat as an administrator. Call searchPublicChat with the given bot username and check that the user is a bot, ask the current user to select a channel chat to add the bot to as an administrator. Then, call getChatMember to receive the current bot rights in the chat and if the bot already is an administrator, check that the current user can edit its administrator rights and combine received rights with the requested administrator rights. Then, show confirmation box to the user, and call setChatMemberStatus with the chosen chat and confirmed rights",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeBotStart",
		"methods": [
			{
				"name": "bot_username",
				"type": "string",
				"description": "Username of the bot"
			},
			{
				"name": "start_parameter",
				"type": "string",
				"description": "The parameter to be passed to sendBotStartMessage"
			},
			{
				"name": "autostart",
				"type": "Bool",
				"description": "True, if sendBotStartMessage must be called automatically without showing the START button"
			}
		],
		"description": "The link is a link to a chat with a Telegram bot. Call searchPublicChat with the given bot username, check that the user is a bot, show START button in the chat with the bot, and then call sendBotStartMessage with the given start parameter after the button is pressed",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeBotStartInGroup",
		"methods": [
			{
				"name": "bot_username",
				"type": "string",
				"description": "Username of the bot"
			},
			{
				"name": "start_parameter",
				"type": "string",
				"description": "The parameter to be passed to sendBotStartMessage"
			},
			{
				"name": "administrator_rights",
				"type": "chatAdministratorRights",
				"description": "Expected administrator rights for the bot; may be null"
			}
		],
		"description": "The link is a link to a Telegram bot, which is expected to be added to a group chat. Call searchPublicChat with the given bot username, check that the user is a bot and can be added to groups, ask the current user to select a basic group or a supergroup chat to add the bot to, taking into account that bots can be added to a public supergroup only by administrators of the supergroup. If administrator rights are provided by the link, call getChatMember to receive the current bot rights in the chat and if the bot already is an administrator, check that the current user can edit its administrator rights, combine received rights with the requested administrator rights, show confirmation box to the user, and call setChatMemberStatus with the chosen chat and confirmed administrator rights. Before call to setChatMemberStatus it may be required to upgrade the chosen basic group chat to a supergroup chat. Then, if start_parameter isn't empty, call sendBotStartMessage with the given start parameter and the chosen chat; otherwise, just send /start message with bot's username added to the chat",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeBusinessChat",
		"methods": [
			{
				"name": "link_name",
				"type": "string",
				"description": "Name of the link"
			}
		],
		"description": "The link is a link to a business chat. Use getBusinessChatLinkInfo with the provided link name to get information about the link, then open received private chat and replace chat draft with the provided text",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeBuyStars",
		"methods": [
			{
				"name": "star_count",
				"type": "int53",
				"description": "The number of Telegram Stars that must be owned by the user"
			},
			{
				"name": "purpose",
				"type": "string",
				"description": "Purpose of Telegram Star purchase. Arbitrary string specified by the server, for example, \"subs\" if the Telegram Stars are required to extend channel subscriptions"
			}
		],
		"description": "The link is a link to the Telegram Star purchase section of the application",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeChangePhoneNumber",
		"methods": null,
		"description": "The link is a link to the change phone number section of the application",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeChatAffiliateProgram",
		"methods": [
			{
				"name": "username",
				"type": "string",
				"description": "Username to be passed to searchChatAffiliateProgram"
			},
			{
				"name": "referrer",
				"type": "string",
				"description": "Referrer to be passed to searchChatAffiliateProgram"
			}
		],
		"description": "The link is an affiliate program link. Call searchChatAffiliateProgram with the given username and referrer to process the link",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeChatBoost",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "URL to be passed to getChatBoostLinkInfo"
			}
		],
		"description": "The link is a link to boost a Telegram chat. Call getChatBoostLinkInfo with the given URL to process the link. If the chat is found, then call getChatBoostStatus and getAvailableChatBoostSlots to get the current boost status and check whether the chat can be boosted. If the user wants to boost the chat and the chat can be boosted, then call boostChat",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeChatFolderInvite",
		"methods": [
			{
				"name": "invite_link",
				"type": "string",
				"description": "Internal representation of the invite link"
			}
		],
		"description": "The link is an invite link to a chat folder. Call checkChatFolderInviteLink with the given invite link to process the link. If the link is valid and the user wants to join the chat folder, then call addChatFolderByInviteLink",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeChatFolderSettings",
		"methods": null,
		"description": "The link is a link to the folder section of the application settings",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeChatInvite",
		"methods": [
			{
				"name": "invite_link",
				"type": "string",
				"description": "Internal representation of the invite link"
			}
		],
		"description": "The link is a chat invite link. Call checkChatInviteLink with the given invite link to process the link. If the link is valid and the user wants to join the chat, then call joinChatByInviteLink",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeDefaultMessageAutoDeleteTimerSettings",
		"methods": null,
		"description": "The link is a link to the default message auto-delete timer settings section of the application settings",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeEditProfileSettings",
		"methods": null,
		"description": "The link is a link to the edit profile section of the application settings",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeGame",
		"methods": [
			{
				"name": "bot_username",
				"type": "string",
				"description": "Username of the bot that owns the game"
			},
			{
				"name": "game_short_name",
				"type": "string",
				"description": "Short name of the game"
			}
		],
		"description": "The link is a link to a game. Call searchPublicChat with the given bot username, check that the user is a bot, ask the current user to select a chat to send the game, and then call sendMessage with inputMessageGame",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeInstantView",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "URL to be passed to getWebPageInstantView"
			},
			{
				"name": "fallback_url",
				"type": "string",
				"description": "An URL to open if getWebPageInstantView fails"
			}
		],
		"description": "The link must be opened in an Instant View. Call getWebPageInstantView with the given URL to process the link. If Instant View is found, then show it, otherwise, open the fallback URL in an external browser",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeInvoice",
		"methods": [
			{
				"name": "invoice_name",
				"type": "string",
				"description": "Name of the invoice"
			}
		],
		"description": "The link is a link to an invoice. Call getPaymentForm with the given invoice name to process the link",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeLanguagePack",
		"methods": [
			{
				"name": "language_pack_id",
				"type": "string",
				"description": "Language pack identifier"
			}
		],
		"description": "The link is a link to a language pack. Call getLanguagePackInfo with the given language pack identifier to process the link. If the language pack is found and the user wants to apply it, then call setOption for the option \"language_pack_id\"",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeLanguageSettings",
		"methods": null,
		"description": "The link is a link to the language section of the application settings",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeMainWebApp",
		"methods": [
			{
				"name": "bot_username",
				"type": "string",
				"description": "Username of the bot"
			},
			{
				"name": "start_parameter",
				"type": "string",
				"description": "Start parameter to be passed to getMainWebApp"
			},
			{
				"name": "mode",
				"type": "WebAppOpenMode",
				"description": "The mode to be passed to getMainWebApp"
			}
		],
		"description": "The link is a link to the main Web App of a bot. Call searchPublicChat with the given bot username, check that the user is a bot and has the main Web App. If the bot can be added to attachment menu, then use getAttachmentMenuBot to receive information about the bot, then if the bot isn't added to side menu, show a disclaimer about Mini Apps being third-party applications, ask the user to accept their Terms of service and confirm adding the bot to side and attachment menu, then if the user accepts the terms and confirms adding, use toggleBotIsAddedToAttachmentMenu to add the bot. Then, use getMainWebApp with the given start parameter and mode and open the returned URL as a Web App",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeMessage",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "URL to be passed to getMessageLinkInfo"
			}
		],
		"description": "The link is a link to a Telegram message or a forum topic. Call getMessageLinkInfo with the given URL to process the link, and then open received forum topic or chat and show the message there",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeMessageDraft",
		"methods": [
			{
				"name": "text",
				"type": "formattedText",
				"description": "Message draft text"
			},
			{
				"name": "contains_link",
				"type": "Bool",
				"description": "True, if the first line of the text contains a link. If true, the input field needs to be focused and the text after the link must be selected"
			}
		],
		"description": "The link contains a message draft text. A share screen needs to be shown to the user, then the chosen chat must be opened and the text is added to the input field",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypePassportDataRequest",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "User identifier of the service's bot; the corresponding user may be unknown yet"
			},
			{
				"name": "scope",
				"type": "string",
				"description": "Telegram Passport element types requested by the service"
			},
			{
				"name": "public_key",
				"type": "string",
				"description": "Service's public key"
			},
			{
				"name": "nonce",
				"type": "string",
				"description": "Unique request identifier provided by the service"
			},
			{
				"name": "callback_url",
				"type": "string",
				"description": "An HTTP URL to open once the request is finished, canceled, or failed with the parameters tg_passport=success, tg_passport=cancel, or tg_passport=error&error=... respectively. If empty, then onActivityResult method must be used to return response on Android, or the link tgbot{bot_user_id}://passport/success or tgbot{bot_user_id}://passport/cancel must be opened otherwise"
			}
		],
		"description": "The link contains a request of Telegram passport data. Call getPassportAuthorizationForm with the given parameters to process the link if the link was received from outside of the application; otherwise, ignore it",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypePhoneNumberConfirmation",
		"methods": [
			{
				"name": "hash",
				"type": "string",
				"description": "Hash value from the link"
			},
			{
				"name": "phone_number",
				"type": "string",
				"description": "Phone number value from the link"
			}
		],
		"description": "The link can be used to confirm ownership of a phone number to prevent account deletion. Call sendPhoneNumberCode with the given phone number and with phoneNumberCodeTypeConfirmOwnership with the given hash to process the link. If succeeded, call checkPhoneNumberCode to check entered by the user code, or resendPhoneNumberCode to resend it",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypePremiumFeatures",
		"methods": [
			{
				"name": "referrer",
				"type": "string",
				"description": "Referrer specified in the link"
			}
		],
		"description": "The link is a link to the Premium features screen of the application from which the user can subscribe to Telegram Premium. Call getPremiumFeatures with the given referrer to process the link",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypePremiumGift",
		"methods": [
			{
				"name": "referrer",
				"type": "string",
				"description": "Referrer specified in the link"
			}
		],
		"description": "The link is a link to the screen for gifting Telegram Premium subscriptions to friends via inputInvoiceTelegram with telegramPaymentPurposePremiumGift payments or in-store purchases",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypePremiumGiftCode",
		"methods": [
			{
				"name": "code",
				"type": "string",
				"description": "The Telegram Premium gift code"
			}
		],
		"description": "The link is a link with a Telegram Premium gift code. Call checkPremiumGiftCode with the given code to process the link. If the code is valid and the user wants to apply it, then call applyPremiumGiftCode",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypePrivacyAndSecuritySettings",
		"methods": null,
		"description": "The link is a link to the privacy and security section of the application settings",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeProxy",
		"methods": [
			{
				"name": "server",
				"type": "string",
				"description": "Proxy server domain or IP address"
			},
			{
				"name": "port",
				"type": "int32",
				"description": "Proxy server port"
			},
			{
				"name": "type",
				"type": "ProxyType",
				"description": "Type of the proxy"
			}
		],
		"description": "The link is a link to a proxy. Call addProxy with the given parameters to process the link and add the proxy",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypePublicChat",
		"methods": [
			{
				"name": "chat_username",
				"type": "string",
				"description": "Username of the chat"
			},
			{
				"name": "draft_text",
				"type": "string",
				"description": "Draft text for message to send in the chat"
			},
			{
				"name": "open_profile",
				"type": "Bool",
				"description": "True, if chat profile information screen must be opened; otherwise, the chat itself must be opened"
			}
		],
		"description": "The link is a link to a chat by its username. Call searchPublicChat with the given chat username to process the link. If the chat is found, open its profile information screen or the chat itself. If draft text isn't empty and the chat is a private chat with a regular user, then put the draft text in the input field",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeQrCodeAuthentication",
		"methods": null,
		"description": "The link can be used to login the current user on another device, but it must be scanned from QR-code using in-app camera. An alert similar to \"This code can be used to allow someone to log in to your Telegram account. To confirm Telegram login, please go to Settings > Devices > Scan QR and scan the code\" needs to be shown",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeRestorePurchases",
		"methods": null,
		"description": "The link forces restore of App Store purchases when opened. For official iOS application only",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeSettings",
		"methods": null,
		"description": "The link is a link to application settings",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeStickerSet",
		"methods": [
			{
				"name": "sticker_set_name",
				"type": "string",
				"description": "Name of the sticker set"
			},
			{
				"name": "expect_custom_emoji",
				"type": "Bool",
				"description": "True, if the sticker set is expected to contain custom emoji"
			}
		],
		"description": "The link is a link to a sticker set. Call searchStickerSet with the given sticker set name to process the link and show the sticker set. If the sticker set is found and the user wants to add it, then call changeStickerSet",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeStory",
		"methods": [
			{
				"name": "story_sender_username",
				"type": "string",
				"description": "Username of the sender of the story"
			},
			{
				"name": "story_id",
				"type": "int32",
				"description": "Story identifier"
			}
		],
		"description": "The link is a link to a story. Call searchPublicChat with the given sender username, then call getStory with the received chat identifier and the given story identifier, then show the story if received",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeTheme",
		"methods": [
			{
				"name": "theme_name",
				"type": "string",
				"description": "Name of the theme"
			}
		],
		"description": "The link is a link to a cloud theme. TDLib has no theme support yet",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeThemeSettings",
		"methods": null,
		"description": "The link is a link to the theme section of the application settings",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeUnknownDeepLink",
		"methods": [
			{
				"name": "link",
				"type": "string",
				"description": "Link to be passed to getDeepLinkInfo"
			}
		],
		"description": "The link is an unknown tg: link. Call getDeepLinkInfo to process the link",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeUnsupportedProxy",
		"methods": null,
		"description": "The link is a link to an unsupported proxy. An alert can be shown to the user",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeUpgradedGift",
		"methods": [
			{
				"name": "name",
				"type": "string",
				"description": "Name of the unique gift"
			}
		],
		"description": "The link is a link to an upgraded gift. Call getUpgradedGift with the given name to process the link",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeUserPhoneNumber",
		"methods": [
			{
				"name": "phone_number",
				"type": "string",
				"description": "Phone number of the user"
			},
			{
				"name": "draft_text",
				"type": "string",
				"description": "Draft text for message to send in the chat"
			},
			{
				"name": "open_profile",
				"type": "Bool",
				"description": "True, if user's profile information screen must be opened; otherwise, the chat itself must be opened"
			}
		],
		"description": "The link is a link to a user by its phone number. Call searchUserByPhoneNumber with the given phone number to process the link. If the user is found, then call createPrivateChat and open user's profile information screen or the chat itself. If draft text isn't empty, then put the draft text in the input field",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeUserToken",
		"methods": [
			{
				"name": "token",
				"type": "string",
				"description": "The token"
			}
		],
		"description": "The link is a link to a user by a temporary token. Call searchUserByToken with the given token to process the link. If the user is found, then call createPrivateChat and open the chat",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeVideoChat",
		"methods": [
			{
				"name": "chat_username",
				"type": "string",
				"description": "Username of the chat with the video chat"
			},
			{
				"name": "invite_hash",
				"type": "string",
				"description": "If non-empty, invite hash to be used to join the video chat without being muted by administrators"
			},
			{
				"name": "is_live_stream",
				"type": "Bool",
				"description": "True, if the video chat is expected to be a live stream in a channel or a broadcast group"
			}
		],
		"description": "The link is a link to a video chat. Call searchPublicChat with the given chat username, and then joinGroupCall with the given invite hash to process the link",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "internalLinkTypeWebApp",
		"methods": [
			{
				"name": "bot_username",
				"type": "string",
				"description": "Username of the bot that owns the Web App"
			},
			{
				"name": "web_app_short_name",
				"type": "string",
				"description": "Short name of the Web App"
			},
			{
				"name": "start_parameter",
				"type": "string",
				"description": "Start parameter to be passed to getWebAppLinkUrl"
			},
			{
				"name": "mode",
				"type": "WebAppOpenMode",
				"description": "The mode in which the Web App must be opened"
			}
		],
		"description": "The link is a link to a Web App. Call searchPublicChat with the given bot username, check that the user is a bot. If the bot is restricted for the current user, then show an error message. Otherwise, call searchWebApp with the received bot and the given web_app_short_name. Process received foundWebApp by showing a confirmation dialog if needed. If the bot can be added to attachment or side menu, but isn't added yet, then show a disclaimer about Mini Apps being third-party applications instead of the dialog and ask the user to accept their Terms of service. If the user accept the terms and confirms adding, then use toggleBotIsAddedToAttachmentMenu to add the bot. Then, call getWebAppLinkUrl and open the returned URL as a Web App",
		"inheritance": "InternalLinkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageLink",
		"methods": [
			{
				"name": "link",
				"type": "string",
				"description": "The link"
			},
			{
				"name": "is_public",
				"type": "Bool",
				"description": "True, if the link will work for non-members of the chat"
			}
		],
		"description": "Contains an HTTPS link to a message in a supergroup or channel, or a forum topic",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageLinkInfo",
		"methods": [
			{
				"name": "is_public",
				"type": "Bool",
				"description": "True, if the link is a public link for a message or a forum topic in a chat"
			},
			{
				"name": "chat_id",
				"type": "int53",
				"description": "If found, identifier of the chat to which the link points, 0 otherwise"
			},
			{
				"name": "message_thread_id",
				"type": "int53",
				"description": "If found, identifier of the message thread in which to open the message, or a forum topic to open if the message is missing"
			},
			{
				"name": "message",
				"type": "message",
				"description": "If found, the linked message; may be null"
			},
			{
				"name": "media_timestamp",
				"type": "int32",
				"description": "Timestamp from which the video/audio/video note/voice note/story playing must start, in seconds; 0 if not specified. The media can be in the message content or in its link preview"
			},
			{
				"name": "for_album",
				"type": "Bool",
				"description": "True, if the whole media album to which the message belongs is linked"
			}
		],
		"description": "Contains information about a link to a message or a forum topic in a chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatBoostLink",
		"methods": [
			{
				"name": "link",
				"type": "string",
				"description": "The link"
			},
			{
				"name": "is_public",
				"type": "Bool",
				"description": "True, if the link will work for non-members of the chat"
			}
		],
		"description": "Contains an HTTPS link to boost a chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatBoostLinkInfo",
		"methods": [
			{
				"name": "is_public",
				"type": "Bool",
				"description": "True, if the link will work for non-members of the chat"
			},
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat to which the link points; 0 if the chat isn't found"
			}
		],
		"description": "Contains information about a link to boost a chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "BlockList",
		"methods": null,
		"description": "Describes type of block list",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "blockListMain",
		"methods": null,
		"description": "The main block list that disallows writing messages to the current user, receiving their status and photo, viewing of stories, and some other actions",
		"inheritance": "BlockList",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "blockListStories",
		"methods": null,
		"description": "The block list that disallows viewing of stories of the current user",
		"inheritance": "BlockList",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "filePart",
		"methods": [
			{
				"name": "data",
				"type": "bytes",
				"description": "File bytes"
			}
		],
		"description": "Contains a part of a file",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "FileType",
		"methods": null,
		"description": "Represents the type of file",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "fileTypeNone",
		"methods": null,
		"description": "The data is not a file",
		"inheritance": "FileType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "fileTypeAnimation",
		"methods": null,
		"description": "The file is an animation",
		"inheritance": "FileType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "fileTypeAudio",
		"methods": null,
		"description": "The file is an audio file",
		"inheritance": "FileType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "fileTypeDocument",
		"methods": null,
		"description": "The file is a document",
		"inheritance": "FileType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "fileTypeNotificationSound",
		"methods": null,
		"description": "The file is a notification sound",
		"inheritance": "FileType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "fileTypePhoto",
		"methods": null,
		"description": "The file is a photo",
		"inheritance": "FileType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "fileTypePhotoStory",
		"methods": null,
		"description": "The file is a photo published as a story",
		"inheritance": "FileType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "fileTypeProfilePhoto",
		"methods": null,
		"description": "The file is a profile photo",
		"inheritance": "FileType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "fileTypeSecret",
		"methods": null,
		"description": "The file was sent to a secret chat (the file type is not known to the server)",
		"inheritance": "FileType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "fileTypeSecretThumbnail",
		"methods": null,
		"description": "The file is a thumbnail of a file from a secret chat",
		"inheritance": "FileType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "fileTypeSecure",
		"methods": null,
		"description": "The file is a file from Secure storage used for storing Telegram Passport files",
		"inheritance": "FileType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "fileTypeSelfDestructingPhoto",
		"methods": null,
		"description": "The file is a self-destructing photo in a private chat",
		"inheritance": "FileType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "fileTypeSelfDestructingVideo",
		"methods": null,
		"description": "The file is a self-destructing video in a private chat",
		"inheritance": "FileType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "fileTypeSelfDestructingVideoNote",
		"methods": null,
		"description": "The file is a self-destructing video note in a private chat",
		"inheritance": "FileType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "fileTypeSelfDestructingVoiceNote",
		"methods": null,
		"description": "The file is a self-destructing voice note in a private chat",
		"inheritance": "FileType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "fileTypeSticker",
		"methods": null,
		"description": "The file is a sticker",
		"inheritance": "FileType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "fileTypeThumbnail",
		"methods": null,
		"description": "The file is a thumbnail of another file",
		"inheritance": "FileType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "fileTypeUnknown",
		"methods": null,
		"description": "The file type is not yet known",
		"inheritance": "FileType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "fileTypeVideo",
		"methods": null,
		"description": "The file is a video",
		"inheritance": "FileType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "fileTypeVideoNote",
		"methods": null,
		"description": "The file is a video note",
		"inheritance": "FileType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "fileTypeVideoStory",
		"methods": null,
		"description": "The file is a video published as a story",
		"inheritance": "FileType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "fileTypeVoiceNote",
		"methods": null,
		"description": "The file is a voice note",
		"inheritance": "FileType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "fileTypeWallpaper",
		"methods": null,
		"description": "The file is a wallpaper or a background pattern",
		"inheritance": "FileType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storageStatisticsByFileType",
		"methods": [
			{
				"name": "file_type",
				"type": "FileType",
				"description": "File type"
			},
			{
				"name": "size",
				"type": "int53",
				"description": "Total size of the files, in bytes"
			},
			{
				"name": "count",
				"type": "int32",
				"description": "Total number of files"
			}
		],
		"description": "Contains the storage usage statistics for a specific file type",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storageStatisticsByChat",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier; 0 if none"
			},
			{
				"name": "size",
				"type": "int53",
				"description": "Total size of the files in the chat, in bytes"
			},
			{
				"name": "count",
				"type": "int32",
				"description": "Total number of files in the chat"
			},
			{
				"name": "by_file_type",
				"type": "vector<storageStatisticsByFileType>",
				"description": "Statistics split by file types"
			}
		],
		"description": "Contains the storage usage statistics for a specific chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storageStatistics",
		"methods": [
			{
				"name": "size",
				"type": "int53",
				"description": "Total size of files, in bytes"
			},
			{
				"name": "count",
				"type": "int32",
				"description": "Total number of files"
			},
			{
				"name": "by_chat",
				"type": "vector<storageStatisticsByChat>",
				"description": "Statistics split by chats"
			}
		],
		"description": "Contains the exact storage usage statistics split by chats and file type",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storageStatisticsFast",
		"methods": [
			{
				"name": "files_size",
				"type": "int53",
				"description": "Approximate total size of files, in bytes"
			},
			{
				"name": "file_count",
				"type": "int32",
				"description": "Approximate number of files"
			},
			{
				"name": "database_size",
				"type": "int53",
				"description": "Size of the database"
			},
			{
				"name": "language_pack_database_size",
				"type": "int53",
				"description": "Size of the language pack database"
			},
			{
				"name": "log_size",
				"type": "int53",
				"description": "Size of the TDLib internal log"
			}
		],
		"description": "Contains approximate storage usage statistics, excluding files of unknown file type",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "databaseStatistics",
		"methods": [
			{
				"name": "statistics",
				"type": "string",
				"description": "Database statistics in an unspecified human-readable format"
			}
		],
		"description": "Contains database statistics",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "NetworkType",
		"methods": null,
		"description": "Represents the type of network",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "networkTypeNone",
		"methods": null,
		"description": "The network is not available",
		"inheritance": "NetworkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "networkTypeMobile",
		"methods": null,
		"description": "A mobile network",
		"inheritance": "NetworkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "networkTypeMobileRoaming",
		"methods": null,
		"description": "A mobile roaming network",
		"inheritance": "NetworkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "networkTypeWiFi",
		"methods": null,
		"description": "A Wi-Fi network",
		"inheritance": "NetworkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "networkTypeOther",
		"methods": null,
		"description": "A different network type (e.g., Ethernet network)",
		"inheritance": "NetworkType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "NetworkStatisticsEntry",
		"methods": null,
		"description": "Contains statistics about network usage",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "networkStatisticsEntryFile",
		"methods": [
			{
				"name": "file_type",
				"type": "FileType",
				"description": "Type of the file the data is part of; pass null if the data isn't related to files"
			},
			{
				"name": "network_type",
				"type": "NetworkType",
				"description": "Type of the network the data was sent through. Call setNetworkType to maintain the actual network type"
			},
			{
				"name": "sent_bytes",
				"type": "int53",
				"description": "Total number of bytes sent"
			},
			{
				"name": "received_bytes",
				"type": "int53",
				"description": "Total number of bytes received"
			}
		],
		"description": "Contains information about the total amount of data that was used to send and receive files",
		"inheritance": "NetworkStatisticsEntry",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "networkStatisticsEntryCall",
		"methods": [
			{
				"name": "network_type",
				"type": "NetworkType",
				"description": "Type of the network the data was sent through. Call setNetworkType to maintain the actual network type"
			},
			{
				"name": "sent_bytes",
				"type": "int53",
				"description": "Total number of bytes sent"
			},
			{
				"name": "received_bytes",
				"type": "int53",
				"description": "Total number of bytes received"
			},
			{
				"name": "duration",
				"type": "double",
				"description": "Total call duration, in seconds"
			}
		],
		"description": "Contains information about the total amount of data that was used for calls",
		"inheritance": "NetworkStatisticsEntry",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "networkStatistics",
		"methods": [
			{
				"name": "since_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) from which the statistics are collected"
			},
			{
				"name": "entries",
				"type": "vector<NetworkStatisticsEntry>",
				"description": "Network statistics entries"
			}
		],
		"description": "A full list of available network statistic entries",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "autoDownloadSettings",
		"methods": [
			{
				"name": "is_auto_download_enabled",
				"type": "Bool",
				"description": "True, if the auto-download is enabled"
			},
			{
				"name": "max_photo_file_size",
				"type": "int32",
				"description": "The maximum size of a photo file to be auto-downloaded, in bytes"
			},
			{
				"name": "max_video_file_size",
				"type": "int53",
				"description": "The maximum size of a video file to be auto-downloaded, in bytes"
			},
			{
				"name": "max_other_file_size",
				"type": "int53",
				"description": "The maximum size of other file types to be auto-downloaded, in bytes"
			},
			{
				"name": "video_upload_bitrate",
				"type": "int32",
				"description": "The maximum suggested bitrate for uploaded videos, in kbit/s"
			},
			{
				"name": "preload_large_videos",
				"type": "Bool",
				"description": "True, if the beginning of video files needs to be preloaded for instant playback"
			},
			{
				"name": "preload_next_audio",
				"type": "Bool",
				"description": "True, if the next audio track needs to be preloaded while the user is listening to an audio file"
			},
			{
				"name": "preload_stories",
				"type": "Bool",
				"description": "True, if stories needs to be preloaded"
			},
			{
				"name": "use_less_data_for_calls",
				"type": "Bool",
				"description": "True, if \"use less data for calls\" option needs to be enabled"
			}
		],
		"description": "Contains auto-download settings",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "autoDownloadSettingsPresets",
		"methods": [
			{
				"name": "low",
				"type": "autoDownloadSettings",
				"description": "Preset with lowest settings; expected to be used by default when roaming"
			},
			{
				"name": "medium",
				"type": "autoDownloadSettings",
				"description": "Preset with medium settings; expected to be used by default when using mobile data"
			},
			{
				"name": "high",
				"type": "autoDownloadSettings",
				"description": "Preset with highest settings; expected to be used by default when connected on Wi-Fi"
			}
		],
		"description": "Contains auto-download settings presets for the current user",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "AutosaveSettingsScope",
		"methods": null,
		"description": "Describes scope of autosave settings",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "autosaveSettingsScopePrivateChats",
		"methods": null,
		"description": "Autosave settings applied to all private chats without chat-specific settings",
		"inheritance": "AutosaveSettingsScope",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "autosaveSettingsScopeGroupChats",
		"methods": null,
		"description": "Autosave settings applied to all basic group and supergroup chats without chat-specific settings",
		"inheritance": "AutosaveSettingsScope",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "autosaveSettingsScopeChannelChats",
		"methods": null,
		"description": "Autosave settings applied to all channel chats without chat-specific settings",
		"inheritance": "AutosaveSettingsScope",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "autosaveSettingsScopeChat",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			}
		],
		"description": "Autosave settings applied to a chat",
		"inheritance": "AutosaveSettingsScope",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "scopeAutosaveSettings",
		"methods": [
			{
				"name": "autosave_photos",
				"type": "Bool",
				"description": "True, if photo autosave is enabled"
			},
			{
				"name": "autosave_videos",
				"type": "Bool",
				"description": "True, if video autosave is enabled"
			},
			{
				"name": "max_video_file_size",
				"type": "int53",
				"description": "The maximum size of a video file to be autosaved, in bytes; 512 KB - 4000 MB"
			}
		],
		"description": "Contains autosave settings for an autosave settings scope",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "autosaveSettingsException",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "settings",
				"type": "scopeAutosaveSettings",
				"description": "Autosave settings for the chat"
			}
		],
		"description": "Contains autosave settings for a chat, which overrides default settings for the corresponding scope",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "autosaveSettings",
		"methods": [
			{
				"name": "private_chat_settings",
				"type": "scopeAutosaveSettings",
				"description": "Default autosave settings for private chats"
			},
			{
				"name": "group_settings",
				"type": "scopeAutosaveSettings",
				"description": "Default autosave settings for basic group and supergroup chats"
			},
			{
				"name": "channel_settings",
				"type": "scopeAutosaveSettings",
				"description": "Default autosave settings for channel chats"
			},
			{
				"name": "exceptions",
				"type": "vector<autosaveSettingsException>",
				"description": "Autosave settings for specific chats"
			}
		],
		"description": "Describes autosave settings",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ConnectionState",
		"methods": null,
		"description": "Describes the current state of the connection to Telegram servers",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "connectionStateWaitingForNetwork",
		"methods": null,
		"description": "Waiting for the network to become available. Use setNetworkType to change the available network type",
		"inheritance": "ConnectionState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "connectionStateConnectingToProxy",
		"methods": null,
		"description": "Establishing a connection with a proxy server",
		"inheritance": "ConnectionState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "connectionStateConnecting",
		"methods": null,
		"description": "Establishing a connection to the Telegram servers",
		"inheritance": "ConnectionState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "connectionStateUpdating",
		"methods": null,
		"description": "Downloading data expected to be received while the application was offline",
		"inheritance": "ConnectionState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "connectionStateReady",
		"methods": null,
		"description": "There is a working connection to the Telegram servers",
		"inheritance": "ConnectionState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "TopChatCategory",
		"methods": null,
		"description": "Represents the categories of chats for which a list of frequently used chats can be retrieved",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "topChatCategoryUsers",
		"methods": null,
		"description": "A category containing frequently used private chats with non-bot users",
		"inheritance": "TopChatCategory",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "topChatCategoryBots",
		"methods": null,
		"description": "A category containing frequently used private chats with bot users",
		"inheritance": "TopChatCategory",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "topChatCategoryGroups",
		"methods": null,
		"description": "A category containing frequently used basic groups and supergroups",
		"inheritance": "TopChatCategory",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "topChatCategoryChannels",
		"methods": null,
		"description": "A category containing frequently used channels",
		"inheritance": "TopChatCategory",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "topChatCategoryInlineBots",
		"methods": null,
		"description": "A category containing frequently used chats with inline bots sorted by their usage in inline mode",
		"inheritance": "TopChatCategory",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "topChatCategoryWebAppBots",
		"methods": null,
		"description": "A category containing frequently used chats with bots, which Web Apps were opened",
		"inheritance": "TopChatCategory",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "topChatCategoryCalls",
		"methods": null,
		"description": "A category containing frequently used chats used for calls",
		"inheritance": "TopChatCategory",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "topChatCategoryForwardChats",
		"methods": null,
		"description": "A category containing frequently used chats used to forward messages",
		"inheritance": "TopChatCategory",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "foundPosition",
		"methods": [
			{
				"name": "position",
				"type": "int32",
				"description": "The position of the match"
			}
		],
		"description": "Contains 0-based match position",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "foundPositions",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "Total number of matched objects"
			},
			{
				"name": "positions",
				"type": "vector<int32>",
				"description": "The positions of the matched objects"
			}
		],
		"description": "Contains 0-based positions of matched objects",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "TMeUrlType",
		"methods": null,
		"description": "Describes the type of URL linking to an internal Telegram entity",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "tMeUrlTypeUser",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user"
			}
		],
		"description": "A URL linking to a user",
		"inheritance": "TMeUrlType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "tMeUrlTypeSupergroup",
		"methods": [
			{
				"name": "supergroup_id",
				"type": "int53",
				"description": "Identifier of the supergroup or channel"
			}
		],
		"description": "A URL linking to a public supergroup or channel",
		"inheritance": "TMeUrlType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "tMeUrlTypeChatInvite",
		"methods": [
			{
				"name": "info",
				"type": "chatInviteLinkInfo",
				"description": "Information about the chat invite link"
			}
		],
		"description": "A chat invite link",
		"inheritance": "TMeUrlType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "tMeUrlTypeStickerSet",
		"methods": [
			{
				"name": "sticker_set_id",
				"type": "int64",
				"description": "Identifier of the sticker set"
			}
		],
		"description": "A URL linking to a sticker set",
		"inheritance": "TMeUrlType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "tMeUrl",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "URL"
			},
			{
				"name": "type",
				"type": "TMeUrlType",
				"description": "Type of the URL"
			}
		],
		"description": "Represents a URL linking to an internal Telegram entity",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "tMeUrls",
		"methods": [
			{
				"name": "urls",
				"type": "vector<tMeUrl>",
				"description": "List of URLs"
			}
		],
		"description": "Contains a list of t.me URLs",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "SuggestedAction",
		"methods": null,
		"description": "Describes an action suggested to the current user",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "suggestedActionEnableArchiveAndMuteNewChats",
		"methods": null,
		"description": "Suggests the user to enable archive_and_mute_new_chats_from_unknown_users setting in archiveChatListSettings",
		"inheritance": "SuggestedAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "suggestedActionCheckPassword",
		"methods": null,
		"description": "Suggests the user to check whether they still remember their 2-step verification password",
		"inheritance": "SuggestedAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "suggestedActionCheckPhoneNumber",
		"methods": null,
		"description": "Suggests the user to check whether authorization phone number is correct and change the phone number if it is inaccessible",
		"inheritance": "SuggestedAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "suggestedActionViewChecksHint",
		"methods": null,
		"description": "Suggests the user to view a hint about the meaning of one and two check marks on sent messages",
		"inheritance": "SuggestedAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "suggestedActionConvertToBroadcastGroup",
		"methods": [
			{
				"name": "supergroup_id",
				"type": "int53",
				"description": "Supergroup identifier"
			}
		],
		"description": "Suggests the user to convert specified supergroup to a broadcast group",
		"inheritance": "SuggestedAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "suggestedActionSetPassword",
		"methods": [
			{
				"name": "authorization_delay",
				"type": "int32",
				"description": "The number of days to pass between consecutive authorizations if the user declines to set password; if 0, then the user is advised to set the password for security reasons"
			}
		],
		"description": "Suggests the user to set a 2-step verification password to be able to log in again",
		"inheritance": "SuggestedAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "suggestedActionUpgradePremium",
		"methods": null,
		"description": "Suggests the user to upgrade the Premium subscription from monthly payments to annual payments",
		"inheritance": "SuggestedAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "suggestedActionRestorePremium",
		"methods": null,
		"description": "Suggests the user to restore a recently expired Premium subscription",
		"inheritance": "SuggestedAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "suggestedActionSubscribeToAnnualPremium",
		"methods": null,
		"description": "Suggests the user to subscribe to the Premium subscription with annual payments",
		"inheritance": "SuggestedAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "suggestedActionGiftPremiumForChristmas",
		"methods": null,
		"description": "Suggests the user to gift Telegram Premium to friends for Christmas",
		"inheritance": "SuggestedAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "suggestedActionSetBirthdate",
		"methods": null,
		"description": "Suggests the user to set birthdate",
		"inheritance": "SuggestedAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "suggestedActionSetProfilePhoto",
		"methods": null,
		"description": "Suggests the user to set profile photo",
		"inheritance": "SuggestedAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "suggestedActionExtendPremium",
		"methods": [
			{
				"name": "manage_premium_subscription_url",
				"type": "string",
				"description": "A URL for managing Telegram Premium subscription"
			}
		],
		"description": "Suggests the user to extend their expiring Telegram Premium subscription",
		"inheritance": "SuggestedAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "suggestedActionExtendStarSubscriptions",
		"methods": null,
		"description": "Suggests the user to extend their expiring Telegram Star subscriptions. Call getStarSubscriptions with only_expiring == true to get the number of expiring subscriptions and the number of required to buy Telegram Stars",
		"inheritance": "SuggestedAction",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "count",
		"methods": [
			{
				"name": "count",
				"type": "int32",
				"description": "Count"
			}
		],
		"description": "Contains a counter",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "text",
		"methods": [
			{
				"name": "text",
				"type": "string",
				"description": "Text"
			}
		],
		"description": "Contains some text",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "seconds",
		"methods": [
			{
				"name": "seconds",
				"type": "double",
				"description": "Number of seconds"
			}
		],
		"description": "Contains a value representing a number of seconds",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "fileDownloadedPrefixSize",
		"methods": [
			{
				"name": "size",
				"type": "int53",
				"description": "The prefix size, in bytes"
			}
		],
		"description": "Contains size of downloaded prefix of a file",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starCount",
		"methods": [
			{
				"name": "star_count",
				"type": "int53",
				"description": "Number of Telegram Stars"
			}
		],
		"description": "Contains a number of Telegram Stars",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "deepLinkInfo",
		"methods": [
			{
				"name": "text",
				"type": "formattedText",
				"description": "Text to be shown to the user"
			},
			{
				"name": "need_update_application",
				"type": "Bool",
				"description": "True, if the user must be asked to update the application"
			}
		],
		"description": "Contains information about a tg: deep link",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "TextParseMode",
		"methods": null,
		"description": "Describes the way the text needs to be parsed for text entities",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "textParseModeMarkdown",
		"methods": [
			{
				"name": "version",
				"type": "int32",
				"description": "Version of the parser: 0 or 1 - Telegram Bot API \"Markdown\" parse mode, 2 - Telegram Bot API \"MarkdownV2\" parse mode"
			}
		],
		"description": "The text uses Markdown-style formatting",
		"inheritance": "TextParseMode",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "textParseModeHTML",
		"methods": null,
		"description": "The text uses HTML-style formatting. The same as Telegram Bot API \"HTML\" parse mode",
		"inheritance": "TextParseMode",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ProxyType",
		"methods": null,
		"description": "Describes the type of proxy server",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "proxyTypeSocks5",
		"methods": [
			{
				"name": "username",
				"type": "string",
				"description": "Username for logging in; may be empty"
			},
			{
				"name": "password",
				"type": "string",
				"description": "Password for logging in; may be empty"
			}
		],
		"description": "A SOCKS5 proxy server",
		"inheritance": "ProxyType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "proxyTypeHttp",
		"methods": [
			{
				"name": "username",
				"type": "string",
				"description": "Username for logging in; may be empty"
			},
			{
				"name": "password",
				"type": "string",
				"description": "Password for logging in; may be empty"
			},
			{
				"name": "http_only",
				"type": "Bool",
				"description": "Pass true if the proxy supports only HTTP requests and doesn't support transparent TCP connections via HTTP CONNECT method"
			}
		],
		"description": "A HTTP transparent proxy server",
		"inheritance": "ProxyType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "proxyTypeMtproto",
		"methods": [
			{
				"name": "secret",
				"type": "string",
				"description": "The proxy's secret in hexadecimal encoding"
			}
		],
		"description": "An MTProto proxy server",
		"inheritance": "ProxyType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "proxy",
		"methods": [
			{
				"name": "id",
				"type": "int32",
				"description": "Unique identifier of the proxy"
			},
			{
				"name": "server",
				"type": "string",
				"description": "Proxy server domain or IP address"
			},
			{
				"name": "port",
				"type": "int32",
				"description": "Proxy server port"
			},
			{
				"name": "last_used_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the proxy was last used; 0 if never"
			},
			{
				"name": "is_enabled",
				"type": "Bool",
				"description": "True, if the proxy is enabled now"
			},
			{
				"name": "type",
				"type": "ProxyType",
				"description": "Type of the proxy"
			}
		],
		"description": "Contains information about a proxy server",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "proxies",
		"methods": [
			{
				"name": "proxies",
				"type": "vector<proxy>",
				"description": "List of proxy servers"
			}
		],
		"description": "Represents a list of proxy servers",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "inputSticker",
		"methods": [
			{
				"name": "sticker",
				"type": "InputFile",
				"description": "File with the sticker; must fit in a 512x512 square. For WEBP stickers the file must be in WEBP or PNG format, which will be converted to WEBP server-side. See https://core.telegram.org/animated_stickers#technical-requirements for technical requirements"
			},
			{
				"name": "format",
				"type": "StickerFormat",
				"description": "Format of the sticker"
			},
			{
				"name": "emojis",
				"type": "string",
				"description": "String with 1-20 emoji corresponding to the sticker"
			},
			{
				"name": "mask_position",
				"type": "maskPosition",
				"description": "Position where the mask is placed; pass null if not specified"
			},
			{
				"name": "keywords",
				"type": "vector<string>",
				"description": "List of up to 20 keywords with total length up to 64 characters, which can be used to find the sticker"
			}
		],
		"description": "A sticker to be added to a sticker set",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "dateRange",
		"methods": [
			{
				"name": "start_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) at which the date range begins"
			},
			{
				"name": "end_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) at which the date range ends"
			}
		],
		"description": "Represents a date range",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "statisticalValue",
		"methods": [
			{
				"name": "value",
				"type": "double",
				"description": "The current value"
			},
			{
				"name": "previous_value",
				"type": "double",
				"description": "The value for the previous day"
			},
			{
				"name": "growth_rate_percentage",
				"type": "double",
				"description": "The growth rate of the value, as a percentage"
			}
		],
		"description": "A value with information about its recent changes",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "StatisticalGraph",
		"methods": null,
		"description": "Describes a statistical graph",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "statisticalGraphData",
		"methods": [
			{
				"name": "json_data",
				"type": "string",
				"description": "Graph data in JSON format"
			},
			{
				"name": "zoom_token",
				"type": "string",
				"description": "If non-empty, a token which can be used to receive a zoomed in graph"
			}
		],
		"description": "A graph data",
		"inheritance": "StatisticalGraph",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "statisticalGraphAsync",
		"methods": [
			{
				"name": "token",
				"type": "string",
				"description": "The token to use for data loading"
			}
		],
		"description": "The graph data to be asynchronously loaded through getStatisticalGraph",
		"inheritance": "StatisticalGraph",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "statisticalGraphError",
		"methods": [
			{
				"name": "error_message",
				"type": "string",
				"description": "The error message"
			}
		],
		"description": "An error message to be shown to the user instead of the graph",
		"inheritance": "StatisticalGraph",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ChatStatisticsObjectType",
		"methods": null,
		"description": "Describes type of object, for which statistics are provided",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatStatisticsObjectTypeMessage",
		"methods": [
			{
				"name": "message_id",
				"type": "int53",
				"description": "Message identifier"
			}
		],
		"description": "Describes a message sent in the chat",
		"inheritance": "ChatStatisticsObjectType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatStatisticsObjectTypeStory",
		"methods": [
			{
				"name": "story_id",
				"type": "int32",
				"description": "Story identifier"
			}
		],
		"description": "Describes a story sent by the chat",
		"inheritance": "ChatStatisticsObjectType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatStatisticsInteractionInfo",
		"methods": [
			{
				"name": "object_type",
				"type": "ChatStatisticsObjectType",
				"description": "Type of the object"
			},
			{
				"name": "view_count",
				"type": "int32",
				"description": "Number of times the object was viewed"
			},
			{
				"name": "forward_count",
				"type": "int32",
				"description": "Number of times the object was forwarded"
			},
			{
				"name": "reaction_count",
				"type": "int32",
				"description": "Number of times reactions were added to the object"
			}
		],
		"description": "Contains statistics about interactions with a message sent in the chat or a story sent by the chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatStatisticsMessageSenderInfo",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			},
			{
				"name": "sent_message_count",
				"type": "int32",
				"description": "Number of sent messages"
			},
			{
				"name": "average_character_count",
				"type": "int32",
				"description": "Average number of characters in sent messages; 0 if unknown"
			}
		],
		"description": "Contains statistics about messages sent by a user",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatStatisticsAdministratorActionsInfo",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Administrator user identifier"
			},
			{
				"name": "deleted_message_count",
				"type": "int32",
				"description": "Number of messages deleted by the administrator"
			},
			{
				"name": "banned_user_count",
				"type": "int32",
				"description": "Number of users banned by the administrator"
			},
			{
				"name": "restricted_user_count",
				"type": "int32",
				"description": "Number of users restricted by the administrator"
			}
		],
		"description": "Contains statistics about administrator actions done by a user",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatStatisticsInviterInfo",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			},
			{
				"name": "added_member_count",
				"type": "int32",
				"description": "Number of new members invited by the user"
			}
		],
		"description": "Contains statistics about number of new members invited by a user",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ChatStatistics",
		"methods": null,
		"description": "Contains a detailed statistics about a chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatStatisticsSupergroup",
		"methods": [
			{
				"name": "period",
				"type": "dateRange",
				"description": "A period to which the statistics applies"
			},
			{
				"name": "member_count",
				"type": "statisticalValue",
				"description": "Number of members in the chat"
			},
			{
				"name": "message_count",
				"type": "statisticalValue",
				"description": "Number of messages sent to the chat"
			},
			{
				"name": "viewer_count",
				"type": "statisticalValue",
				"description": "Number of users who viewed messages in the chat"
			},
			{
				"name": "sender_count",
				"type": "statisticalValue",
				"description": "Number of users who sent messages to the chat"
			},
			{
				"name": "member_count_graph",
				"type": "StatisticalGraph",
				"description": "A graph containing number of members in the chat"
			},
			{
				"name": "join_graph",
				"type": "StatisticalGraph",
				"description": "A graph containing number of members joined and left the chat"
			},
			{
				"name": "join_by_source_graph",
				"type": "StatisticalGraph",
				"description": "A graph containing number of new member joins per source"
			},
			{
				"name": "language_graph",
				"type": "StatisticalGraph",
				"description": "A graph containing distribution of active users per language"
			},
			{
				"name": "message_content_graph",
				"type": "StatisticalGraph",
				"description": "A graph containing distribution of sent messages by content type"
			},
			{
				"name": "action_graph",
				"type": "StatisticalGraph",
				"description": "A graph containing number of different actions in the chat"
			},
			{
				"name": "day_graph",
				"type": "StatisticalGraph",
				"description": "A graph containing distribution of message views per hour"
			},
			{
				"name": "week_graph",
				"type": "StatisticalGraph",
				"description": "A graph containing distribution of message views per day of week"
			},
			{
				"name": "top_senders",
				"type": "vector<chatStatisticsMessageSenderInfo>",
				"description": "List of users sent most messages in the last week"
			},
			{
				"name": "top_administrators",
				"type": "vector<chatStatisticsAdministratorActionsInfo>",
				"description": "List of most active administrators in the last week"
			},
			{
				"name": "top_inviters",
				"type": "vector<chatStatisticsInviterInfo>",
				"description": "List of most active inviters of new members in the last week"
			}
		],
		"description": "A detailed statistics about a supergroup chat",
		"inheritance": "ChatStatistics",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatStatisticsChannel",
		"methods": [
			{
				"name": "period",
				"type": "dateRange",
				"description": "A period to which the statistics applies"
			},
			{
				"name": "member_count",
				"type": "statisticalValue",
				"description": "Number of members in the chat"
			},
			{
				"name": "mean_message_view_count",
				"type": "statisticalValue",
				"description": "Mean number of times the recently sent messages were viewed"
			},
			{
				"name": "mean_message_share_count",
				"type": "statisticalValue",
				"description": "Mean number of times the recently sent messages were shared"
			},
			{
				"name": "mean_message_reaction_count",
				"type": "statisticalValue",
				"description": "Mean number of times reactions were added to the recently sent messages"
			},
			{
				"name": "mean_story_view_count",
				"type": "statisticalValue",
				"description": "Mean number of times the recently sent stories were viewed"
			},
			{
				"name": "mean_story_share_count",
				"type": "statisticalValue",
				"description": "Mean number of times the recently sent stories were shared"
			},
			{
				"name": "mean_story_reaction_count",
				"type": "statisticalValue",
				"description": "Mean number of times reactions were added to the recently sent stories"
			},
			{
				"name": "enabled_notifications_percentage",
				"type": "double",
				"description": "A percentage of users with enabled notifications for the chat; 0-100"
			},
			{
				"name": "member_count_graph",
				"type": "StatisticalGraph",
				"description": "A graph containing number of members in the chat"
			},
			{
				"name": "join_graph",
				"type": "StatisticalGraph",
				"description": "A graph containing number of members joined and left the chat"
			},
			{
				"name": "mute_graph",
				"type": "StatisticalGraph",
				"description": "A graph containing number of members muted and unmuted the chat"
			},
			{
				"name": "view_count_by_hour_graph",
				"type": "StatisticalGraph",
				"description": "A graph containing number of message views in a given hour in the last two weeks"
			},
			{
				"name": "view_count_by_source_graph",
				"type": "StatisticalGraph",
				"description": "A graph containing number of message views per source"
			},
			{
				"name": "join_by_source_graph",
				"type": "StatisticalGraph",
				"description": "A graph containing number of new member joins per source"
			},
			{
				"name": "language_graph",
				"type": "StatisticalGraph",
				"description": "A graph containing number of users viewed chat messages per language"
			},
			{
				"name": "message_interaction_graph",
				"type": "StatisticalGraph",
				"description": "A graph containing number of chat message views and shares"
			},
			{
				"name": "message_reaction_graph",
				"type": "StatisticalGraph",
				"description": "A graph containing number of reactions on messages"
			},
			{
				"name": "story_interaction_graph",
				"type": "StatisticalGraph",
				"description": "A graph containing number of story views and shares"
			},
			{
				"name": "story_reaction_graph",
				"type": "StatisticalGraph",
				"description": "A graph containing number of reactions on stories"
			},
			{
				"name": "instant_view_interaction_graph",
				"type": "StatisticalGraph",
				"description": "A graph containing number of views of associated with the chat instant views"
			},
			{
				"name": "recent_interactions",
				"type": "vector<chatStatisticsInteractionInfo>",
				"description": "Detailed statistics about number of views and shares of recently sent messages and stories"
			}
		],
		"description": "A detailed statistics about a channel chat",
		"inheritance": "ChatStatistics",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatRevenueAmount",
		"methods": [
			{
				"name": "cryptocurrency",
				"type": "string",
				"description": "Cryptocurrency in which revenue is calculated"
			},
			{
				"name": "total_amount",
				"type": "int64",
				"description": "Total amount of the cryptocurrency earned, in the smallest units of the cryptocurrency"
			},
			{
				"name": "balance_amount",
				"type": "int64",
				"description": "Amount of the cryptocurrency that isn't withdrawn yet, in the smallest units of the cryptocurrency"
			},
			{
				"name": "available_amount",
				"type": "int64",
				"description": "Amount of the cryptocurrency available for withdrawal, in the smallest units of the cryptocurrency"
			},
			{
				"name": "withdrawal_enabled",
				"type": "Bool",
				"description": "True, if Telegram Stars can be withdrawn now or later"
			}
		],
		"description": "Contains information about revenue earned from sponsored messages in a chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatRevenueStatistics",
		"methods": [
			{
				"name": "revenue_by_hour_graph",
				"type": "StatisticalGraph",
				"description": "A graph containing amount of revenue in a given hour"
			},
			{
				"name": "revenue_graph",
				"type": "StatisticalGraph",
				"description": "A graph containing amount of revenue"
			},
			{
				"name": "revenue_amount",
				"type": "chatRevenueAmount",
				"description": "Amount of earned revenue"
			},
			{
				"name": "usd_rate",
				"type": "double",
				"description": "Current conversion rate of the cryptocurrency in which revenue is calculated to USD"
			}
		],
		"description": "A detailed statistics about revenue earned from sponsored messages in a chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "messageStatistics",
		"methods": [
			{
				"name": "message_interaction_graph",
				"type": "StatisticalGraph",
				"description": "A graph containing number of message views and shares"
			},
			{
				"name": "message_reaction_graph",
				"type": "StatisticalGraph",
				"description": "A graph containing number of message reactions"
			}
		],
		"description": "A detailed statistics about a message",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "storyStatistics",
		"methods": [
			{
				"name": "story_interaction_graph",
				"type": "StatisticalGraph",
				"description": "A graph containing number of story views and shares"
			},
			{
				"name": "story_reaction_graph",
				"type": "StatisticalGraph",
				"description": "A graph containing number of story reactions"
			}
		],
		"description": "A detailed statistics about a story",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "RevenueWithdrawalState",
		"methods": null,
		"description": "Describes state of a revenue withdrawal",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "revenueWithdrawalStatePending",
		"methods": null,
		"description": "Withdrawal is pending",
		"inheritance": "RevenueWithdrawalState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "revenueWithdrawalStateSucceeded",
		"methods": [
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the withdrawal was completed"
			},
			{
				"name": "url",
				"type": "string",
				"description": "The URL where the withdrawal transaction can be viewed"
			}
		],
		"description": "Withdrawal succeeded",
		"inheritance": "RevenueWithdrawalState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "revenueWithdrawalStateFailed",
		"methods": null,
		"description": "Withdrawal failed",
		"inheritance": "RevenueWithdrawalState",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "ChatRevenueTransactionType",
		"methods": null,
		"description": "Describes type of transaction for revenue earned from sponsored messages in a chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatRevenueTransactionTypeEarnings",
		"methods": [
			{
				"name": "start_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the earnings started"
			},
			{
				"name": "end_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the earnings ended"
			}
		],
		"description": "Describes earnings from sponsored messages in a chat in some time frame",
		"inheritance": "ChatRevenueTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatRevenueTransactionTypeWithdrawal",
		"methods": [
			{
				"name": "withdrawal_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the earnings withdrawal started"
			},
			{
				"name": "provider",
				"type": "string",
				"description": "Name of the payment provider"
			},
			{
				"name": "state",
				"type": "RevenueWithdrawalState",
				"description": "State of the withdrawal"
			}
		],
		"description": "Describes a withdrawal of earnings",
		"inheritance": "ChatRevenueTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatRevenueTransactionTypeRefund",
		"methods": [
			{
				"name": "refund_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the transaction was refunded"
			},
			{
				"name": "provider",
				"type": "string",
				"description": "Name of the payment provider"
			}
		],
		"description": "Describes a refund for failed withdrawal of earnings",
		"inheritance": "ChatRevenueTransactionType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatRevenueTransaction",
		"methods": [
			{
				"name": "cryptocurrency",
				"type": "string",
				"description": "Cryptocurrency in which revenue is calculated"
			},
			{
				"name": "cryptocurrency_amount",
				"type": "int64",
				"description": "The withdrawn amount, in the smallest units of the cryptocurrency"
			},
			{
				"name": "type",
				"type": "ChatRevenueTransactionType",
				"description": "Type of the transaction"
			}
		],
		"description": "Contains a chat revenue transactions",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "chatRevenueTransactions",
		"methods": [
			{
				"name": "total_count",
				"type": "int32",
				"description": "Total number of transactions"
			},
			{
				"name": "transactions",
				"type": "vector<chatRevenueTransaction>",
				"description": "List of transactions"
			}
		],
		"description": "Contains a list of chat revenue transactions",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starRevenueStatus",
		"methods": [
			{
				"name": "total_amount",
				"type": "starAmount",
				"description": "Total amount of Telegram Stars earned"
			},
			{
				"name": "current_amount",
				"type": "starAmount",
				"description": "The amount of Telegram Stars that aren't withdrawn yet"
			},
			{
				"name": "available_amount",
				"type": "starAmount",
				"description": "The amount of Telegram Stars that are available for withdrawal"
			},
			{
				"name": "withdrawal_enabled",
				"type": "Bool",
				"description": "True, if Telegram Stars can be withdrawn now or later"
			},
			{
				"name": "next_withdrawal_in",
				"type": "int32",
				"description": "Time left before the next withdrawal can be started, in seconds; 0 if withdrawal can be started now"
			}
		],
		"description": "Contains information about Telegram Stars earned by a bot or a chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "starRevenueStatistics",
		"methods": [
			{
				"name": "revenue_by_day_graph",
				"type": "StatisticalGraph",
				"description": "A graph containing amount of revenue in a given day"
			},
			{
				"name": "status",
				"type": "starRevenueStatus",
				"description": "Telegram Star revenue status"
			},
			{
				"name": "usd_rate",
				"type": "double",
				"description": "Current conversion rate of a Telegram Star to USD"
			}
		],
		"description": "A detailed statistics about Telegram Stars earned by a bot or a chat",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "point",
		"methods": [
			{
				"name": "x",
				"type": "double",
				"description": "The point's first coordinate"
			},
			{
				"name": "y",
				"type": "double",
				"description": "The point's second coordinate"
			}
		],
		"description": "A point on a Cartesian plane",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "VectorPathCommand",
		"methods": null,
		"description": "Represents a vector path command",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "vectorPathCommandLine",
		"methods": [
			{
				"name": "end_point",
				"type": "point",
				"description": "The end point of the straight line"
			}
		],
		"description": "A straight line to a given point",
		"inheritance": "VectorPathCommand",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "vectorPathCommandCubicBezierCurve",
		"methods": [
			{
				"name": "start_control_point",
				"type": "point",
				"description": "The start control point of the curve"
			},
			{
				"name": "end_control_point",
				"type": "point",
				"description": "The end control point of the curve"
			},
			{
				"name": "end_point",
				"type": "point",
				"description": "The end point of the curve"
			}
		],
		"description": "A cubic Bézier curve to a given point",
		"inheritance": "VectorPathCommand",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "BotCommandScope",
		"methods": null,
		"description": "Represents the scope to which bot commands are relevant",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "botCommandScopeDefault",
		"methods": null,
		"description": "A scope covering all users",
		"inheritance": "BotCommandScope",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "botCommandScopeAllPrivateChats",
		"methods": null,
		"description": "A scope covering all private chats",
		"inheritance": "BotCommandScope",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "botCommandScopeAllGroupChats",
		"methods": null,
		"description": "A scope covering all group and supergroup chats",
		"inheritance": "BotCommandScope",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "botCommandScopeAllChatAdministrators",
		"methods": null,
		"description": "A scope covering all group and supergroup chat administrators",
		"inheritance": "BotCommandScope",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "botCommandScopeChat",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			}
		],
		"description": "A scope covering all members of a chat",
		"inheritance": "BotCommandScope",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "botCommandScopeChatAdministrators",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			}
		],
		"description": "A scope covering all administrators of a chat",
		"inheritance": "BotCommandScope",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "botCommandScopeChatMember",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			}
		],
		"description": "A scope covering a member of a chat",
		"inheritance": "BotCommandScope",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "PhoneNumberCodeType",
		"methods": null,
		"description": "Describes type of the request for which a code is sent to a phone number",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "phoneNumberCodeTypeChange",
		"methods": null,
		"description": "Checks ownership of a new phone number to change the user's authentication phone number; for official Android and iOS applications only",
		"inheritance": "PhoneNumberCodeType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "phoneNumberCodeTypeVerify",
		"methods": null,
		"description": "Verifies ownership of a phone number to be added to the user's Telegram Passport",
		"inheritance": "PhoneNumberCodeType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "phoneNumberCodeTypeConfirmOwnership",
		"methods": [
			{
				"name": "hash",
				"type": "string",
				"description": "Hash value from the link"
			}
		],
		"description": "Confirms ownership of a phone number to prevent account deletion while handling links of the type internalLinkTypePhoneNumberConfirmation",
		"inheritance": "PhoneNumberCodeType",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "Update",
		"methods": null,
		"description": "Contains notifications about data changes",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateAuthorizationState",
		"methods": [
			{
				"name": "authorization_state",
				"type": "AuthorizationState",
				"description": "New authorization state"
			}
		],
		"description": "The user authorization state has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateNewMessage",
		"methods": [
			{
				"name": "message",
				"type": "message",
				"description": "The new message"
			}
		],
		"description": "A new message was received; can also be an outgoing message",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateMessageSendAcknowledged",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "The chat identifier of the sent message"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "A temporary message identifier"
			}
		],
		"description": "A request to send a message has reached the Telegram server. This doesn't mean that the message will be sent successfully. This update is sent only if the option \"use_quick_ack\" is set to true. This update may be sent multiple times for the same message",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateMessageSendSucceeded",
		"methods": [
			{
				"name": "message",
				"type": "message",
				"description": "The sent message. Almost any field of the new message can be different from the corresponding field of the original message. For example, the field scheduling_state may change, making the message scheduled, or non-scheduled"
			},
			{
				"name": "old_message_id",
				"type": "int53",
				"description": "The previous temporary message identifier"
			}
		],
		"description": "A message has been successfully sent",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateMessageSendFailed",
		"methods": [
			{
				"name": "message",
				"type": "message",
				"description": "The failed to send message"
			},
			{
				"name": "old_message_id",
				"type": "int53",
				"description": "The previous temporary message identifier"
			},
			{
				"name": "error",
				"type": "error",
				"description": "The cause of the message sending failure"
			}
		],
		"description": "A message failed to send. Be aware that some messages being sent can be irrecoverably deleted, in which case updateDeleteMessages will be received instead of this update",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateMessageContent",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Message identifier"
			},
			{
				"name": "new_content",
				"type": "MessageContent",
				"description": "New message content"
			}
		],
		"description": "The message content has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateMessageEdited",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Message identifier"
			},
			{
				"name": "edit_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the message was edited"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "New message reply markup; may be null"
			}
		],
		"description": "A message was edited. Changes in the message content will come in a separate updateMessageContent",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateMessageIsPinned",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "The message identifier"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "True, if the message is pinned"
			}
		],
		"description": "The message pinned state was changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateMessageInteractionInfo",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Message identifier"
			},
			{
				"name": "interaction_info",
				"type": "messageInteractionInfo",
				"description": "New information about interactions with the message; may be null"
			}
		],
		"description": "The information about interactions with a message has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateMessageContentOpened",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Message identifier"
			}
		],
		"description": "The message content was opened. Updates voice note messages to \"listened\", video note messages to \"viewed\" and starts the self-destruct timer",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateMessageMentionRead",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Message identifier"
			},
			{
				"name": "unread_mention_count",
				"type": "int32",
				"description": "The new number of unread mention messages left in the chat"
			}
		],
		"description": "A message with an unread mention was read",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateMessageUnreadReactions",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Message identifier"
			},
			{
				"name": "unread_reactions",
				"type": "vector<unreadReaction>",
				"description": "The new list of unread reactions"
			},
			{
				"name": "unread_reaction_count",
				"type": "int32",
				"description": "The new number of messages with unread reactions left in the chat"
			}
		],
		"description": "The list of unread reactions added to a message was changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateMessageFactCheck",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Message identifier"
			},
			{
				"name": "fact_check",
				"type": "factCheck",
				"description": "The new fact-check"
			}
		],
		"description": "A fact-check added to a message was changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateMessageLiveLocationViewed",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat with the live location message"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message with live location"
			}
		],
		"description": "A message with a live location was viewed. When the update is received, the application is expected to update the live location",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateVideoPublished",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat with the message"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the sent message"
			}
		],
		"description": "An automatically scheduled message with video has been successfully sent after conversion",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateNewChat",
		"methods": [
			{
				"name": "chat",
				"type": "chat",
				"description": "The chat"
			}
		],
		"description": "A new chat has been loaded/created. This update is guaranteed to come before the chat identifier is returned to the application. The chat field changes will be reported through separate updates",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatTitle",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "title",
				"type": "string",
				"description": "The new chat title"
			}
		],
		"description": "The title of a chat was changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatPhoto",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "photo",
				"type": "chatPhotoInfo",
				"description": "The new chat photo; may be null"
			}
		],
		"description": "A chat photo was changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatAccentColors",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "accent_color_id",
				"type": "int32",
				"description": "The new chat accent color identifier"
			},
			{
				"name": "background_custom_emoji_id",
				"type": "int64",
				"description": "The new identifier of a custom emoji to be shown on the reply header and link preview background; 0 if none"
			},
			{
				"name": "profile_accent_color_id",
				"type": "int32",
				"description": "The new chat profile accent color identifier; -1 if none"
			},
			{
				"name": "profile_background_custom_emoji_id",
				"type": "int64",
				"description": "The new identifier of a custom emoji to be shown on the profile background; 0 if none"
			}
		],
		"description": "Chat accent colors have changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatPermissions",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "permissions",
				"type": "chatPermissions",
				"description": "The new chat permissions"
			}
		],
		"description": "Chat permissions were changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatLastMessage",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "last_message",
				"type": "message",
				"description": "The new last message in the chat; may be null if the last message became unknown. While the last message is unknown, new messages can be added to the chat without corresponding updateNewMessage update"
			},
			{
				"name": "positions",
				"type": "vector<chatPosition>",
				"description": "The new chat positions in the chat lists"
			}
		],
		"description": "The last message of a chat was changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatPosition",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "position",
				"type": "chatPosition",
				"description": "New chat position. If new order is 0, then the chat needs to be removed from the list"
			}
		],
		"description": "The position of a chat in a chat list has changed. An updateChatLastMessage or updateChatDraftMessage update might be sent instead of the update",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatAddedToList",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "chat_list",
				"type": "ChatList",
				"description": "The chat list to which the chat was added"
			}
		],
		"description": "A chat was added to a chat list",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatRemovedFromList",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "chat_list",
				"type": "ChatList",
				"description": "The chat list from which the chat was removed"
			}
		],
		"description": "A chat was removed from a chat list",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatReadInbox",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "last_read_inbox_message_id",
				"type": "int53",
				"description": "Identifier of the last read incoming message"
			},
			{
				"name": "unread_count",
				"type": "int32",
				"description": "The number of unread messages left in the chat"
			}
		],
		"description": "Incoming messages were read or the number of unread messages has been changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatReadOutbox",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "last_read_outbox_message_id",
				"type": "int53",
				"description": "Identifier of last read outgoing message"
			}
		],
		"description": "Outgoing messages were read",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatActionBar",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "action_bar",
				"type": "ChatActionBar",
				"description": "The new value of the action bar; may be null"
			}
		],
		"description": "The chat action bar was changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatBusinessBotManageBar",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "business_bot_manage_bar",
				"type": "businessBotManageBar",
				"description": "The new value of the business bot manage bar; may be null"
			}
		],
		"description": "The bar for managing business bot was changed in a chat",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatAvailableReactions",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "available_reactions",
				"type": "ChatAvailableReactions",
				"description": "The new reactions, available in the chat"
			}
		],
		"description": "The chat available reactions were changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatDraftMessage",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "draft_message",
				"type": "draftMessage",
				"description": "The new draft message; may be null if none"
			},
			{
				"name": "positions",
				"type": "vector<chatPosition>",
				"description": "The new chat positions in the chat lists"
			}
		],
		"description": "A chat draft has changed. Be aware that the update may come in the currently opened chat but with old content of the draft. If the user has changed the content of the draft, this update mustn't be applied",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatEmojiStatus",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "emoji_status",
				"type": "emojiStatus",
				"description": "The new chat emoji status; may be null"
			}
		],
		"description": "Chat emoji status has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatMessageSender",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_sender_id",
				"type": "MessageSender",
				"description": "New value of message_sender_id; may be null if the user can't change message sender"
			}
		],
		"description": "The message sender that is selected to send messages in a chat has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatMessageAutoDeleteTime",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_auto_delete_time",
				"type": "int32",
				"description": "New value of message_auto_delete_time"
			}
		],
		"description": "The message auto-delete or self-destruct timer setting for a chat was changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatNotificationSettings",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "notification_settings",
				"type": "chatNotificationSettings",
				"description": "The new notification settings"
			}
		],
		"description": "Notification settings for a chat were changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatPendingJoinRequests",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "pending_join_requests",
				"type": "chatJoinRequestsInfo",
				"description": "The new data about pending join requests; may be null"
			}
		],
		"description": "The chat pending join requests were changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatReplyMarkup",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "reply_markup_message_id",
				"type": "int53",
				"description": "Identifier of the message from which reply markup needs to be used; 0 if there is no default custom reply markup in the chat"
			}
		],
		"description": "The default chat reply markup was changed. Can occur because new messages with reply markup were received or because an old reply markup was hidden by the user",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatBackground",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "background",
				"type": "chatBackground",
				"description": "The new chat background; may be null if background was reset to default"
			}
		],
		"description": "The chat background was changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatTheme",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "theme_name",
				"type": "string",
				"description": "The new name of the chat theme; may be empty if theme was reset to default"
			}
		],
		"description": "The chat theme was changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatUnreadMentionCount",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "unread_mention_count",
				"type": "int32",
				"description": "The number of unread mention messages left in the chat"
			}
		],
		"description": "The chat unread_mention_count has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatUnreadReactionCount",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "unread_reaction_count",
				"type": "int32",
				"description": "The number of messages with unread reactions left in the chat"
			}
		],
		"description": "The chat unread_reaction_count has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatVideoChat",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "video_chat",
				"type": "videoChat",
				"description": "New value of video_chat"
			}
		],
		"description": "A chat video chat state has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatDefaultDisableNotification",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "default_disable_notification",
				"type": "Bool",
				"description": "The new default_disable_notification value"
			}
		],
		"description": "The value of the default disable_notification parameter, used when a message is sent to the chat, was changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatHasProtectedContent",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "has_protected_content",
				"type": "Bool",
				"description": "New value of has_protected_content"
			}
		],
		"description": "A chat content was allowed or restricted for saving",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatIsTranslatable",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "is_translatable",
				"type": "Bool",
				"description": "New value of is_translatable"
			}
		],
		"description": "Translation of chat messages was enabled or disabled",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatIsMarkedAsUnread",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "is_marked_as_unread",
				"type": "Bool",
				"description": "New value of is_marked_as_unread"
			}
		],
		"description": "A chat was marked as unread or was read",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatViewAsTopics",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "view_as_topics",
				"type": "Bool",
				"description": "New value of view_as_topics"
			}
		],
		"description": "A chat default appearance has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatBlockList",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "block_list",
				"type": "BlockList",
				"description": "Block list to which the chat is added; may be null if none"
			}
		],
		"description": "A chat was blocked or unblocked",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatHasScheduledMessages",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "has_scheduled_messages",
				"type": "Bool",
				"description": "New value of has_scheduled_messages"
			}
		],
		"description": "A chat's has_scheduled_messages field has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatFolders",
		"methods": [
			{
				"name": "chat_folders",
				"type": "vector<chatFolderInfo>",
				"description": "The new list of chat folders"
			},
			{
				"name": "main_chat_list_position",
				"type": "int32",
				"description": "Position of the main chat list among chat folders, 0-based"
			},
			{
				"name": "are_tags_enabled",
				"type": "Bool",
				"description": "True, if folder tags are enabled"
			}
		],
		"description": "The list of chat folders or a chat folder has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatOnlineMemberCount",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat"
			},
			{
				"name": "online_member_count",
				"type": "int32",
				"description": "New number of online members in the chat, or 0 if unknown"
			}
		],
		"description": "The number of online group members has changed. This update with non-zero number of online group members is sent only for currently opened chats. There is no guarantee that it is sent just after the number of online users has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateSavedMessagesTopic",
		"methods": [
			{
				"name": "topic",
				"type": "savedMessagesTopic",
				"description": "New data about the topic"
			}
		],
		"description": "Basic information about a Saved Messages topic has changed. This update is guaranteed to come before the topic identifier is returned to the application",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateSavedMessagesTopicCount",
		"methods": [
			{
				"name": "topic_count",
				"type": "int32",
				"description": "Approximate total number of Saved Messages topics"
			}
		],
		"description": "Number of Saved Messages topics has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateQuickReplyShortcut",
		"methods": [
			{
				"name": "shortcut",
				"type": "quickReplyShortcut",
				"description": "New data about the shortcut"
			}
		],
		"description": "Basic information about a quick reply shortcut has changed. This update is guaranteed to come before the quick shortcut name is returned to the application",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateQuickReplyShortcutDeleted",
		"methods": [
			{
				"name": "shortcut_id",
				"type": "int32",
				"description": "The identifier of the deleted shortcut"
			}
		],
		"description": "A quick reply shortcut and all its messages were deleted",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateQuickReplyShortcuts",
		"methods": [
			{
				"name": "shortcut_ids",
				"type": "vector<int32>",
				"description": "The new list of identifiers of quick reply shortcuts"
			}
		],
		"description": "The list of quick reply shortcuts has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateQuickReplyShortcutMessages",
		"methods": [
			{
				"name": "shortcut_id",
				"type": "int32",
				"description": "The identifier of the shortcut"
			},
			{
				"name": "messages",
				"type": "vector<quickReplyMessage>",
				"description": "The new list of quick reply messages for the shortcut in order from the first to the last sent"
			}
		],
		"description": "The list of quick reply shortcut messages has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateForumTopicInfo",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "info",
				"type": "forumTopicInfo",
				"description": "New information about the topic"
			}
		],
		"description": "Basic information about a topic in a forum chat was changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateScopeNotificationSettings",
		"methods": [
			{
				"name": "scope",
				"type": "NotificationSettingsScope",
				"description": "Types of chats for which notification settings were updated"
			},
			{
				"name": "notification_settings",
				"type": "scopeNotificationSettings",
				"description": "The new notification settings"
			}
		],
		"description": "Notification settings for some type of chats were updated",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateReactionNotificationSettings",
		"methods": [
			{
				"name": "notification_settings",
				"type": "reactionNotificationSettings",
				"description": "The new notification settings"
			}
		],
		"description": "Notification settings for reactions were updated",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateNotification",
		"methods": [
			{
				"name": "notification_group_id",
				"type": "int32",
				"description": "Unique notification group identifier"
			},
			{
				"name": "notification",
				"type": "notification",
				"description": "Changed notification"
			}
		],
		"description": "A notification was changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateNotificationGroup",
		"methods": [
			{
				"name": "notification_group_id",
				"type": "int32",
				"description": "Unique notification group identifier"
			},
			{
				"name": "type",
				"type": "NotificationGroupType",
				"description": "New type of the notification group"
			},
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of a chat to which all notifications in the group belong"
			},
			{
				"name": "notification_settings_chat_id",
				"type": "int53",
				"description": "Chat identifier, which notification settings must be applied to the added notifications"
			},
			{
				"name": "notification_sound_id",
				"type": "int64",
				"description": "Identifier of the notification sound to be played; 0 if sound is disabled"
			},
			{
				"name": "total_count",
				"type": "int32",
				"description": "Total number of unread notifications in the group, can be bigger than number of active notifications"
			},
			{
				"name": "added_notifications",
				"type": "vector<notification>",
				"description": "List of added group notifications, sorted by notification identifier"
			},
			{
				"name": "removed_notification_ids",
				"type": "vector<int32>",
				"description": "Identifiers of removed group notifications, sorted by notification identifier"
			}
		],
		"description": "A list of active notifications in a notification group has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateActiveNotifications",
		"methods": [
			{
				"name": "groups",
				"type": "vector<notificationGroup>",
				"description": "Lists of active notification groups"
			}
		],
		"description": "Contains active notifications that were shown on previous application launches. This update is sent only if the message database is used. In that case it comes once before any updateNotification and updateNotificationGroup update",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateHavePendingNotifications",
		"methods": [
			{
				"name": "have_delayed_notifications",
				"type": "Bool",
				"description": "True, if there are some delayed notification updates, which will be sent soon"
			},
			{
				"name": "have_unreceived_notifications",
				"type": "Bool",
				"description": "True, if there can be some yet unreceived notifications, which are being fetched from the server"
			}
		],
		"description": "Describes whether there are some pending notification updates. Can be used to prevent application from killing, while there are some pending notifications",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateDeleteMessages",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_ids",
				"type": "vector<int53>",
				"description": "Identifiers of the deleted messages"
			},
			{
				"name": "is_permanent",
				"type": "Bool",
				"description": "True, if the messages are permanently deleted by a user (as opposed to just becoming inaccessible)"
			},
			{
				"name": "from_cache",
				"type": "Bool",
				"description": "True, if the messages are deleted only from the cache and can possibly be retrieved again in the future"
			}
		],
		"description": "Some messages were deleted",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatAction",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_thread_id",
				"type": "int53",
				"description": "If not 0, the message thread identifier in which the action was performed"
			},
			{
				"name": "sender_id",
				"type": "MessageSender",
				"description": "Identifier of a message sender performing the action"
			},
			{
				"name": "action",
				"type": "ChatAction",
				"description": "The action"
			}
		],
		"description": "A message sender activity in the chat has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateUserStatus",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			},
			{
				"name": "status",
				"type": "UserStatus",
				"description": "New status of the user"
			}
		],
		"description": "The user went online or offline",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateUser",
		"methods": [
			{
				"name": "user",
				"type": "user",
				"description": "New data about the user"
			}
		],
		"description": "Some data of a user has changed. This update is guaranteed to come before the user identifier is returned to the application",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateBasicGroup",
		"methods": [
			{
				"name": "basic_group",
				"type": "basicGroup",
				"description": "New data about the group"
			}
		],
		"description": "Some data of a basic group has changed. This update is guaranteed to come before the basic group identifier is returned to the application",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateSupergroup",
		"methods": [
			{
				"name": "supergroup",
				"type": "supergroup",
				"description": "New data about the supergroup"
			}
		],
		"description": "Some data of a supergroup or a channel has changed. This update is guaranteed to come before the supergroup identifier is returned to the application",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateSecretChat",
		"methods": [
			{
				"name": "secret_chat",
				"type": "secretChat",
				"description": "New data about the secret chat"
			}
		],
		"description": "Some data of a secret chat has changed. This update is guaranteed to come before the secret chat identifier is returned to the application",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateUserFullInfo",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			},
			{
				"name": "user_full_info",
				"type": "userFullInfo",
				"description": "New full information about the user"
			}
		],
		"description": "Some data in userFullInfo has been changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateBasicGroupFullInfo",
		"methods": [
			{
				"name": "basic_group_id",
				"type": "int53",
				"description": "Identifier of a basic group"
			},
			{
				"name": "basic_group_full_info",
				"type": "basicGroupFullInfo",
				"description": "New full information about the group"
			}
		],
		"description": "Some data in basicGroupFullInfo has been changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateSupergroupFullInfo",
		"methods": [
			{
				"name": "supergroup_id",
				"type": "int53",
				"description": "Identifier of the supergroup or channel"
			},
			{
				"name": "supergroup_full_info",
				"type": "supergroupFullInfo",
				"description": "New full information about the supergroup"
			}
		],
		"description": "Some data in supergroupFullInfo has been changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateServiceNotification",
		"methods": [
			{
				"name": "type",
				"type": "string",
				"description": "Notification type. If type begins with \"AUTH_KEY_DROP_\", then two buttons \"Cancel\" and \"Log out\" must be shown under notification; if user presses the second, all local data must be destroyed using Destroy method"
			},
			{
				"name": "content",
				"type": "MessageContent",
				"description": "Notification content"
			}
		],
		"description": "A service notification from the server was received. Upon receiving this the application must show a popup with the content of the notification",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateFile",
		"methods": [
			{
				"name": "file",
				"type": "file",
				"description": "New data about the file"
			}
		],
		"description": "Information about a file was updated",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateFileGenerationStart",
		"methods": [
			{
				"name": "generation_id",
				"type": "int64",
				"description": "Unique identifier for the generation process"
			},
			{
				"name": "original_path",
				"type": "string",
				"description": "The original path specified by the application in inputFileGenerated"
			},
			{
				"name": "destination_path",
				"type": "string",
				"description": "The path to a file that must be created and where the new file must be generated by the application. If the application has no access to the path, it can use writeGeneratedFilePart to generate the file"
			},
			{
				"name": "conversion",
				"type": "string",
				"description": "If the conversion is \"#url#\" than original_path contains an HTTP/HTTPS URL of a file that must be downloaded by the application. Otherwise, this is the conversion specified by the application in inputFileGenerated"
			}
		],
		"description": "The file generation process needs to be started by the application. Use setFileGenerationProgress and finishFileGeneration to generate the file",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateFileGenerationStop",
		"methods": [
			{
				"name": "generation_id",
				"type": "int64",
				"description": "Unique identifier for the generation process"
			}
		],
		"description": "File generation is no longer needed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateFileDownloads",
		"methods": [
			{
				"name": "total_size",
				"type": "int53",
				"description": "Total size of files in the file download list, in bytes"
			},
			{
				"name": "total_count",
				"type": "int32",
				"description": "Total number of files in the file download list"
			},
			{
				"name": "downloaded_size",
				"type": "int53",
				"description": "Total downloaded size of files in the file download list, in bytes"
			}
		],
		"description": "The state of the file download list has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateFileAddedToDownloads",
		"methods": [
			{
				"name": "file_download",
				"type": "fileDownload",
				"description": "The added file download"
			},
			{
				"name": "counts",
				"type": "downloadedFileCounts",
				"description": "New number of being downloaded and recently downloaded files found"
			}
		],
		"description": "A file was added to the file download list. This update is sent only after file download list is loaded for the first time",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateFileDownload",
		"methods": [
			{
				"name": "file_id",
				"type": "int32",
				"description": "File identifier"
			},
			{
				"name": "complete_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the file downloading was completed; 0 if the file downloading isn't completed"
			},
			{
				"name": "is_paused",
				"type": "Bool",
				"description": "True, if downloading of the file is paused"
			},
			{
				"name": "counts",
				"type": "downloadedFileCounts",
				"description": "New number of being downloaded and recently downloaded files found"
			}
		],
		"description": "A file download was changed. This update is sent only after file download list is loaded for the first time",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateFileRemovedFromDownloads",
		"methods": [
			{
				"name": "file_id",
				"type": "int32",
				"description": "File identifier"
			},
			{
				"name": "counts",
				"type": "downloadedFileCounts",
				"description": "New number of being downloaded and recently downloaded files found"
			}
		],
		"description": "A file was removed from the file download list. This update is sent only after file download list is loaded for the first time",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateApplicationVerificationRequired",
		"methods": [
			{
				"name": "verification_id",
				"type": "int53",
				"description": "Unique identifier for the verification process"
			},
			{
				"name": "nonce",
				"type": "string",
				"description": "Unique base64url-encoded nonce for the classic Play Integrity verification (https://developer.android.com/google/play/integrity/classic) for Android, or a unique string to compare with verify_nonce field from a push notification for iOS"
			},
			{
				"name": "cloud_project_number",
				"type": "int64",
				"description": "Cloud project number to pass to the Play Integrity API on Android"
			}
		],
		"description": "A request can't be completed unless application verification is performed; for official mobile applications only. The method setApplicationVerificationToken must be called once the verification is completed or failed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateApplicationRecaptchaVerificationRequired",
		"methods": [
			{
				"name": "verification_id",
				"type": "int53",
				"description": "Unique identifier for the verification process"
			},
			{
				"name": "action",
				"type": "string",
				"description": "The action for the check"
			},
			{
				"name": "recaptcha_key_id",
				"type": "string",
				"description": "Identifier of the reCAPTCHA key"
			}
		],
		"description": "A request can't be completed unless reCAPTCHA verification is performed; for official mobile applications only. The method setApplicationVerificationToken must be called once the verification is completed or failed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateCall",
		"methods": [
			{
				"name": "call",
				"type": "call",
				"description": "New data about a call"
			}
		],
		"description": "New call was created or information about a call was updated",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateGroupCall",
		"methods": [
			{
				"name": "group_call",
				"type": "groupCall",
				"description": "New data about a group call"
			}
		],
		"description": "Information about a group call was updated",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateGroupCallParticipant",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Identifier of group call"
			},
			{
				"name": "participant",
				"type": "groupCallParticipant",
				"description": "New data about a participant"
			}
		],
		"description": "Information about a group call participant was changed. The updates are sent only after the group call is received through getGroupCall and only if the call is joined or being joined",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateNewCallSignalingData",
		"methods": [
			{
				"name": "call_id",
				"type": "int32",
				"description": "The call identifier"
			},
			{
				"name": "data",
				"type": "bytes",
				"description": "The data"
			}
		],
		"description": "New call signaling data arrived",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateUserPrivacySettingRules",
		"methods": [
			{
				"name": "setting",
				"type": "UserPrivacySetting",
				"description": "The privacy setting"
			},
			{
				"name": "rules",
				"type": "userPrivacySettingRules",
				"description": "New privacy rules"
			}
		],
		"description": "Some privacy setting rules have been changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateUnreadMessageCount",
		"methods": [
			{
				"name": "chat_list",
				"type": "ChatList",
				"description": "The chat list with changed number of unread messages"
			},
			{
				"name": "unread_count",
				"type": "int32",
				"description": "Total number of unread messages"
			},
			{
				"name": "unread_unmuted_count",
				"type": "int32",
				"description": "Total number of unread messages in unmuted chats"
			}
		],
		"description": "Number of unread messages in a chat list has changed. This update is sent only if the message database is used",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateUnreadChatCount",
		"methods": [
			{
				"name": "chat_list",
				"type": "ChatList",
				"description": "The chat list with changed number of unread messages"
			},
			{
				"name": "total_count",
				"type": "int32",
				"description": "Approximate total number of chats in the chat list"
			},
			{
				"name": "unread_count",
				"type": "int32",
				"description": "Total number of unread chats"
			},
			{
				"name": "unread_unmuted_count",
				"type": "int32",
				"description": "Total number of unread unmuted chats"
			},
			{
				"name": "marked_as_unread_count",
				"type": "int32",
				"description": "Total number of chats marked as unread"
			},
			{
				"name": "marked_as_unread_unmuted_count",
				"type": "int32",
				"description": "Total number of unmuted chats marked as unread"
			}
		],
		"description": "Number of unread chats, i.e. with unread messages or marked as unread, has changed. This update is sent only if the message database is used",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateStory",
		"methods": [
			{
				"name": "story",
				"type": "story",
				"description": "The new information about the story"
			}
		],
		"description": "A story was changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateStoryDeleted",
		"methods": [
			{
				"name": "story_sender_chat_id",
				"type": "int53",
				"description": "Identifier of the chat that posted the story"
			},
			{
				"name": "story_id",
				"type": "int32",
				"description": "Story identifier"
			}
		],
		"description": "A story became inaccessible",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateStorySendSucceeded",
		"methods": [
			{
				"name": "story",
				"type": "story",
				"description": "The sent story"
			},
			{
				"name": "old_story_id",
				"type": "int32",
				"description": "The previous temporary story identifier"
			}
		],
		"description": "A story has been successfully sent",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateStorySendFailed",
		"methods": [
			{
				"name": "story",
				"type": "story",
				"description": "The failed to send story"
			},
			{
				"name": "error",
				"type": "error",
				"description": "The cause of the story sending failure"
			},
			{
				"name": "error_type",
				"type": "CanSendStoryResult",
				"description": "Type of the error; may be null if unknown"
			}
		],
		"description": "A story failed to send. If the story sending is canceled, then updateStoryDeleted will be received instead of this update",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatActiveStories",
		"methods": [
			{
				"name": "active_stories",
				"type": "chatActiveStories",
				"description": "The new list of active stories"
			}
		],
		"description": "The list of active stories posted by a specific chat has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateStoryListChatCount",
		"methods": [
			{
				"name": "story_list",
				"type": "StoryList",
				"description": "The story list"
			},
			{
				"name": "chat_count",
				"type": "int32",
				"description": "Approximate total number of chats with active stories in the list"
			}
		],
		"description": "Number of chats in a story list has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateStoryStealthMode",
		"methods": [
			{
				"name": "active_until_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) until stealth mode is active; 0 if it is disabled"
			},
			{
				"name": "cooldown_until_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when stealth mode can be enabled again; 0 if there is no active cooldown"
			}
		],
		"description": "Story stealth mode settings have changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateOption",
		"methods": [
			{
				"name": "name",
				"type": "string",
				"description": "The option name"
			},
			{
				"name": "value",
				"type": "OptionValue",
				"description": "The new option value"
			}
		],
		"description": "An option changed its value",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateStickerSet",
		"methods": [
			{
				"name": "sticker_set",
				"type": "stickerSet",
				"description": "The sticker set"
			}
		],
		"description": "A sticker set has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateInstalledStickerSets",
		"methods": [
			{
				"name": "sticker_type",
				"type": "StickerType",
				"description": "Type of the affected stickers"
			},
			{
				"name": "sticker_set_ids",
				"type": "vector<int64>",
				"description": "The new list of installed ordinary sticker sets"
			}
		],
		"description": "The list of installed sticker sets was updated",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateTrendingStickerSets",
		"methods": [
			{
				"name": "sticker_type",
				"type": "StickerType",
				"description": "Type of the affected stickers"
			},
			{
				"name": "sticker_sets",
				"type": "trendingStickerSets",
				"description": "The prefix of the list of trending sticker sets with the newest trending sticker sets"
			}
		],
		"description": "The list of trending sticker sets was updated or some of them were viewed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateRecentStickers",
		"methods": [
			{
				"name": "is_attached",
				"type": "Bool",
				"description": "True, if the list of stickers attached to photo or video files was updated; otherwise, the list of sent stickers is updated"
			},
			{
				"name": "sticker_ids",
				"type": "vector<int32>",
				"description": "The new list of file identifiers of recently used stickers"
			}
		],
		"description": "The list of recently used stickers was updated",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateFavoriteStickers",
		"methods": [
			{
				"name": "sticker_ids",
				"type": "vector<int32>",
				"description": "The new list of file identifiers of favorite stickers"
			}
		],
		"description": "The list of favorite stickers was updated",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateSavedAnimations",
		"methods": [
			{
				"name": "animation_ids",
				"type": "vector<int32>",
				"description": "The new list of file identifiers of saved animations"
			}
		],
		"description": "The list of saved animations was updated",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateSavedNotificationSounds",
		"methods": [
			{
				"name": "notification_sound_ids",
				"type": "vector<int64>",
				"description": "The new list of identifiers of saved notification sounds"
			}
		],
		"description": "The list of saved notification sounds was updated. This update may not be sent until information about a notification sound was requested for the first time",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateDefaultBackground",
		"methods": [
			{
				"name": "for_dark_theme",
				"type": "Bool",
				"description": "True, if default background for dark theme has changed"
			},
			{
				"name": "background",
				"type": "background",
				"description": "The new default background; may be null"
			}
		],
		"description": "The default background has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatThemes",
		"methods": [
			{
				"name": "chat_themes",
				"type": "vector<chatTheme>",
				"description": "The new list of chat themes"
			}
		],
		"description": "The list of available chat themes has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateAccentColors",
		"methods": [
			{
				"name": "colors",
				"type": "vector<accentColor>",
				"description": "Information about supported colors; colors with identifiers 0 (red), 1 (orange), 2 (purple/violet), 3 (green), 4 (cyan), 5 (blue), 6 (pink) must always be supported and aren't included in the list. The exact colors for the accent colors with identifiers 0-6 must be taken from the app theme"
			},
			{
				"name": "available_accent_color_ids",
				"type": "vector<int32>",
				"description": "The list of accent color identifiers, which can be set through setAccentColor and setChatAccentColor. The colors must be shown in the specified order"
			}
		],
		"description": "The list of supported accent colors has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateProfileAccentColors",
		"methods": [
			{
				"name": "colors",
				"type": "vector<profileAccentColor>",
				"description": "Information about supported colors"
			},
			{
				"name": "available_accent_color_ids",
				"type": "vector<int32>",
				"description": "The list of accent color identifiers, which can be set through setProfileAccentColor and setChatProfileAccentColor. The colors must be shown in the specified order"
			}
		],
		"description": "The list of supported accent colors for user profiles has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateLanguagePackStrings",
		"methods": [
			{
				"name": "localization_target",
				"type": "string",
				"description": "Localization target to which the language pack belongs"
			},
			{
				"name": "language_pack_id",
				"type": "string",
				"description": "Identifier of the updated language pack"
			},
			{
				"name": "strings",
				"type": "vector<languagePackString>",
				"description": "List of changed language pack strings; empty if all strings have changed"
			}
		],
		"description": "Some language pack strings have been updated",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateConnectionState",
		"methods": [
			{
				"name": "state",
				"type": "ConnectionState",
				"description": "The new connection state"
			}
		],
		"description": "The connection state has changed. This update must be used only to show a human-readable description of the connection state",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateTermsOfService",
		"methods": [
			{
				"name": "terms_of_service_id",
				"type": "string",
				"description": "Identifier of the terms of service"
			},
			{
				"name": "terms_of_service",
				"type": "termsOfService",
				"description": "The new terms of service"
			}
		],
		"description": "New terms of service must be accepted by the user. If the terms of service are declined, then the deleteAccount method must be called with the reason \"Decline ToS update\"",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateUnconfirmedSession",
		"methods": [
			{
				"name": "session",
				"type": "unconfirmedSession",
				"description": "The unconfirmed session; may be null if none"
			}
		],
		"description": "The first unconfirmed session has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateAttachmentMenuBots",
		"methods": [
			{
				"name": "bots",
				"type": "vector<attachmentMenuBot>",
				"description": "The new list of bots. The bots must not be shown on scheduled messages screen"
			}
		],
		"description": "The list of bots added to attachment or side menu has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateWebAppMessageSent",
		"methods": [
			{
				"name": "web_app_launch_id",
				"type": "int64",
				"description": "Identifier of Web App launch"
			}
		],
		"description": "A message was sent by an opened Web App, so the Web App needs to be closed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateActiveEmojiReactions",
		"methods": [
			{
				"name": "emojis",
				"type": "vector<string>",
				"description": "The new list of active emoji reactions"
			}
		],
		"description": "The list of active emoji reactions has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateAvailableMessageEffects",
		"methods": [
			{
				"name": "reaction_effect_ids",
				"type": "vector<int64>",
				"description": "The new list of available message effects from emoji reactions"
			},
			{
				"name": "sticker_effect_ids",
				"type": "vector<int64>",
				"description": "The new list of available message effects from Premium stickers"
			}
		],
		"description": "The list of available message effects has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateDefaultReactionType",
		"methods": [
			{
				"name": "reaction_type",
				"type": "ReactionType",
				"description": "The new type of the default reaction"
			}
		],
		"description": "The type of default reaction has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateDefaultPaidReactionType",
		"methods": [
			{
				"name": "type",
				"type": "PaidReactionType",
				"description": "The new type of the default paid reaction"
			}
		],
		"description": "The type of default paid reaction has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateSavedMessagesTags",
		"methods": [
			{
				"name": "saved_messages_topic_id",
				"type": "int53",
				"description": "Identifier of Saved Messages topic which tags were changed; 0 if tags for the whole chat has changed"
			},
			{
				"name": "tags",
				"type": "savedMessagesTags",
				"description": "The new tags"
			}
		],
		"description": "Tags used in Saved Messages or a Saved Messages topic have changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateActiveLiveLocationMessages",
		"methods": [
			{
				"name": "messages",
				"type": "vector<message>",
				"description": "The list of messages with active live locations"
			}
		],
		"description": "The list of messages with active live location that need to be updated by the application has changed. The list is persistent across application restarts only if the message database is used",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateOwnedStarCount",
		"methods": [
			{
				"name": "star_amount",
				"type": "starAmount",
				"description": "The new amount of owned Telegram Stars"
			}
		],
		"description": "The number of Telegram Stars owned by the current user has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatRevenueAmount",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat"
			},
			{
				"name": "revenue_amount",
				"type": "chatRevenueAmount",
				"description": "New amount of earned revenue"
			}
		],
		"description": "The revenue earned from sponsored messages in a chat has changed. If chat revenue screen is opened, then getChatRevenueTransactions may be called to fetch new transactions",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateStarRevenueStatus",
		"methods": [
			{
				"name": "owner_id",
				"type": "MessageSender",
				"description": "Identifier of the owner of the Telegram Stars"
			},
			{
				"name": "status",
				"type": "starRevenueStatus",
				"description": "New Telegram Star revenue status"
			}
		],
		"description": "The Telegram Star revenue earned by a bot or a chat has changed. If Telegram Star transaction screen of the chat is opened, then getStarTransactions may be called to fetch new transactions",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateSpeechRecognitionTrial",
		"methods": [
			{
				"name": "max_media_duration",
				"type": "int32",
				"description": "The maximum allowed duration of media for speech recognition without Telegram Premium subscription, in seconds"
			},
			{
				"name": "weekly_count",
				"type": "int32",
				"description": "The total number of allowed speech recognitions per week; 0 if none"
			},
			{
				"name": "left_count",
				"type": "int32",
				"description": "Number of left speech recognition attempts this week"
			},
			{
				"name": "next_reset_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the weekly number of tries will reset; 0 if unknown"
			}
		],
		"description": "The parameters of speech recognition without Telegram Premium subscription has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateDiceEmojis",
		"methods": [
			{
				"name": "emojis",
				"type": "vector<string>",
				"description": "The new list of supported dice emojis"
			}
		],
		"description": "The list of supported dice emojis has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateAnimatedEmojiMessageClicked",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Message identifier"
			},
			{
				"name": "sticker",
				"type": "sticker",
				"description": "The animated sticker to be played"
			}
		],
		"description": "Some animated emoji message was clicked and a big animated sticker must be played if the message is visible on the screen. chatActionWatchingAnimations with the text of the message needs to be sent if the sticker is played",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateAnimationSearchParameters",
		"methods": [
			{
				"name": "provider",
				"type": "string",
				"description": "Name of the animation search provider"
			},
			{
				"name": "emojis",
				"type": "vector<string>",
				"description": "The new list of emojis suggested for searching"
			}
		],
		"description": "The parameters of animation search through getOption(\"animation_search_bot_username\") bot has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateSuggestedActions",
		"methods": [
			{
				"name": "added_actions",
				"type": "vector<SuggestedAction>",
				"description": "Added suggested actions"
			},
			{
				"name": "removed_actions",
				"type": "vector<SuggestedAction>",
				"description": "Removed suggested actions"
			}
		],
		"description": "The list of suggested to the user actions has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateSpeedLimitNotification",
		"methods": [
			{
				"name": "is_upload",
				"type": "Bool",
				"description": "True, if upload speed was limited; false, if download speed was limited"
			}
		],
		"description": "Download or upload file speed for the user was limited, but it can be restored by subscription to Telegram Premium. The notification can be postponed until a being downloaded or uploaded file is visible to the user. Use getOption(\"premium_download_speedup\") or getOption(\"premium_upload_speedup\") to get expected speedup after subscription to Telegram Premium",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateContactCloseBirthdays",
		"methods": [
			{
				"name": "close_birthday_users",
				"type": "vector<closeBirthdayUser>",
				"description": "List of contact users with close birthday"
			}
		],
		"description": "The list of contacts that had birthdays recently or will have birthday soon has changed",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateAutosaveSettings",
		"methods": [
			{
				"name": "scope",
				"type": "AutosaveSettingsScope",
				"description": "Type of chats for which autosave settings were updated"
			},
			{
				"name": "settings",
				"type": "scopeAutosaveSettings",
				"description": "The new autosave settings; may be null if the settings are reset to default"
			}
		],
		"description": "Autosave settings for some type of chats were updated",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateBusinessConnection",
		"methods": [
			{
				"name": "connection",
				"type": "businessConnection",
				"description": "New data about the connection"
			}
		],
		"description": "A business connection has changed; for bots only",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateNewBusinessMessage",
		"methods": [
			{
				"name": "connection_id",
				"type": "string",
				"description": "Unique identifier of the business connection"
			},
			{
				"name": "message",
				"type": "businessMessage",
				"description": "The new message"
			}
		],
		"description": "A new message was added to a business account; for bots only",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateBusinessMessageEdited",
		"methods": [
			{
				"name": "connection_id",
				"type": "string",
				"description": "Unique identifier of the business connection"
			},
			{
				"name": "message",
				"type": "businessMessage",
				"description": "The edited message"
			}
		],
		"description": "A message in a business account was edited; for bots only",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateBusinessMessagesDeleted",
		"methods": [
			{
				"name": "connection_id",
				"type": "string",
				"description": "Unique identifier of the business connection"
			},
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of a chat in the business account in which messages were deleted"
			},
			{
				"name": "message_ids",
				"type": "vector<int53>",
				"description": "Unique message identifiers of the deleted messages"
			}
		],
		"description": "Messages in a business account were deleted; for bots only",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateNewInlineQuery",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "Unique query identifier"
			},
			{
				"name": "sender_user_id",
				"type": "int53",
				"description": "Identifier of the user who sent the query"
			},
			{
				"name": "user_location",
				"type": "location",
				"description": "User location; may be null"
			},
			{
				"name": "chat_type",
				"type": "ChatType",
				"description": "The type of the chat from which the query originated; may be null if unknown"
			},
			{
				"name": "query",
				"type": "string",
				"description": "Text of the query"
			},
			{
				"name": "offset",
				"type": "string",
				"description": "Offset of the first entry to return"
			}
		],
		"description": "A new incoming inline query; for bots only",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateNewChosenInlineResult",
		"methods": [
			{
				"name": "sender_user_id",
				"type": "int53",
				"description": "Identifier of the user who sent the query"
			},
			{
				"name": "user_location",
				"type": "location",
				"description": "User location; may be null"
			},
			{
				"name": "query",
				"type": "string",
				"description": "Text of the query"
			},
			{
				"name": "result_id",
				"type": "string",
				"description": "Identifier of the chosen result"
			},
			{
				"name": "inline_message_id",
				"type": "string",
				"description": "Identifier of the sent inline message, if known"
			}
		],
		"description": "The user has chosen a result of an inline query; for bots only",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateNewCallbackQuery",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "Unique query identifier"
			},
			{
				"name": "sender_user_id",
				"type": "int53",
				"description": "Identifier of the user who sent the query"
			},
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat where the query was sent"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message from which the query originated"
			},
			{
				"name": "chat_instance",
				"type": "int64",
				"description": "Identifier that uniquely corresponds to the chat to which the message was sent"
			},
			{
				"name": "payload",
				"type": "CallbackQueryPayload",
				"description": "Query payload"
			}
		],
		"description": "A new incoming callback query; for bots only",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateNewInlineCallbackQuery",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "Unique query identifier"
			},
			{
				"name": "sender_user_id",
				"type": "int53",
				"description": "Identifier of the user who sent the query"
			},
			{
				"name": "inline_message_id",
				"type": "string",
				"description": "Identifier of the inline message from which the query originated"
			},
			{
				"name": "chat_instance",
				"type": "int64",
				"description": "An identifier uniquely corresponding to the chat a message was sent to"
			},
			{
				"name": "payload",
				"type": "CallbackQueryPayload",
				"description": "Query payload"
			}
		],
		"description": "A new incoming callback query from a message sent via a bot; for bots only",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateNewBusinessCallbackQuery",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "Unique query identifier"
			},
			{
				"name": "sender_user_id",
				"type": "int53",
				"description": "Identifier of the user who sent the query"
			},
			{
				"name": "connection_id",
				"type": "string",
				"description": "Unique identifier of the business connection"
			},
			{
				"name": "message",
				"type": "businessMessage",
				"description": "The message from the business account from which the query originated"
			},
			{
				"name": "chat_instance",
				"type": "int64",
				"description": "An identifier uniquely corresponding to the chat a message was sent to"
			},
			{
				"name": "payload",
				"type": "CallbackQueryPayload",
				"description": "Query payload"
			}
		],
		"description": "A new incoming callback query from a business message; for bots only",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateNewShippingQuery",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "Unique query identifier"
			},
			{
				"name": "sender_user_id",
				"type": "int53",
				"description": "Identifier of the user who sent the query"
			},
			{
				"name": "invoice_payload",
				"type": "string",
				"description": "Invoice payload"
			},
			{
				"name": "shipping_address",
				"type": "address",
				"description": "User shipping address"
			}
		],
		"description": "A new incoming shipping query; for bots only. Only for invoices with flexible price",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateNewPreCheckoutQuery",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "Unique query identifier"
			},
			{
				"name": "sender_user_id",
				"type": "int53",
				"description": "Identifier of the user who sent the query"
			},
			{
				"name": "currency",
				"type": "string",
				"description": "Currency for the product price"
			},
			{
				"name": "total_amount",
				"type": "int53",
				"description": "Total price for the product, in the smallest units of the currency"
			},
			{
				"name": "invoice_payload",
				"type": "bytes",
				"description": "Invoice payload"
			},
			{
				"name": "shipping_option_id",
				"type": "string",
				"description": "Identifier of a shipping option chosen by the user; may be empty if not applicable"
			},
			{
				"name": "order_info",
				"type": "orderInfo",
				"description": "Information about the order; may be null"
			}
		],
		"description": "A new incoming pre-checkout query; for bots only. Contains full information about a checkout",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateNewCustomEvent",
		"methods": [
			{
				"name": "event",
				"type": "string",
				"description": "A JSON-serialized event"
			}
		],
		"description": "A new incoming event; for bots only",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateNewCustomQuery",
		"methods": [
			{
				"name": "id",
				"type": "int64",
				"description": "The query identifier"
			},
			{
				"name": "data",
				"type": "string",
				"description": "JSON-serialized query data"
			},
			{
				"name": "timeout",
				"type": "int32",
				"description": "Query timeout"
			}
		],
		"description": "A new incoming query; for bots only",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updatePoll",
		"methods": [
			{
				"name": "poll",
				"type": "poll",
				"description": "New data about the poll"
			}
		],
		"description": "A poll was updated; for bots only",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updatePollAnswer",
		"methods": [
			{
				"name": "poll_id",
				"type": "int64",
				"description": "Unique poll identifier"
			},
			{
				"name": "voter_id",
				"type": "MessageSender",
				"description": "Identifier of the message sender that changed the answer to the poll"
			},
			{
				"name": "option_ids",
				"type": "vector<int32>",
				"description": "0-based identifiers of answer options, chosen by the user"
			}
		],
		"description": "A user changed the answer to a poll; for bots only",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatMember",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "actor_user_id",
				"type": "int53",
				"description": "Identifier of the user, changing the rights"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the user rights were changed"
			},
			{
				"name": "invite_link",
				"type": "chatInviteLink",
				"description": "If user has joined the chat using an invite link, the invite link; may be null"
			},
			{
				"name": "via_join_request",
				"type": "Bool",
				"description": "True, if the user has joined the chat after sending a join request and being approved by an administrator"
			},
			{
				"name": "via_chat_folder_invite_link",
				"type": "Bool",
				"description": "True, if the user has joined the chat using an invite link for a chat folder"
			},
			{
				"name": "old_chat_member",
				"type": "chatMember",
				"description": "Previous chat member"
			},
			{
				"name": "new_chat_member",
				"type": "chatMember",
				"description": "New chat member"
			}
		],
		"description": "User rights changed in a chat; for bots only",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateNewChatJoinRequest",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "request",
				"type": "chatJoinRequest",
				"description": "Join request"
			},
			{
				"name": "user_chat_id",
				"type": "int53",
				"description": "Chat identifier of the private chat with the user"
			},
			{
				"name": "invite_link",
				"type": "chatInviteLink",
				"description": "The invite link, which was used to send join request; may be null"
			}
		],
		"description": "A user sent a join request to a chat; for bots only",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateChatBoost",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "boost",
				"type": "chatBoost",
				"description": "New information about the boost"
			}
		],
		"description": "A chat boost has changed; for bots only",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateMessageReaction",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Message identifier"
			},
			{
				"name": "actor_id",
				"type": "MessageSender",
				"description": "Identifier of the user or chat that changed reactions"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the reactions were changed"
			},
			{
				"name": "old_reaction_types",
				"type": "vector<ReactionType>",
				"description": "Old list of chosen reactions"
			},
			{
				"name": "new_reaction_types",
				"type": "vector<ReactionType>",
				"description": "New list of chosen reactions"
			}
		],
		"description": "User changed its reactions on a message with public reactions; for bots only",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updateMessageReactions",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Message identifier"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the reactions were changed"
			},
			{
				"name": "reactions",
				"type": "vector<messageReaction>",
				"description": "The list of reactions added to the message"
			}
		],
		"description": "Reactions added to a message with anonymous reactions have changed; for bots only",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updatePaidMediaPurchased",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			},
			{
				"name": "payload",
				"type": "string",
				"description": "Bot-specified payload for the paid media"
			}
		],
		"description": "Paid media were purchased by a user; for bots only",
		"inheritance": "Update",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "updates",
		"methods": [
			{
				"name": "updates",
				"type": "vector<Update>",
				"description": "List of updates"
			}
		],
		"description": "Contains a list of updates",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "LogStream",
		"methods": null,
		"description": "Describes a stream to which TDLib internal log is written",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "logStreamDefault",
		"methods": null,
		"description": "The log is written to stderr or an OS specific log",
		"inheritance": "LogStream",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "logStreamFile",
		"methods": [
			{
				"name": "path",
				"type": "string",
				"description": "Path to the file to where the internal TDLib log will be written"
			},
			{
				"name": "max_file_size",
				"type": "int53",
				"description": "The maximum size of the file to where the internal TDLib log is written before the file will automatically be rotated, in bytes"
			},
			{
				"name": "redirect_stderr",
				"type": "Bool",
				"description": "Pass true to additionally redirect stderr to the log file. Ignored on Windows"
			}
		],
		"description": "The log is written to a file",
		"inheritance": "LogStream",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "logStreamEmpty",
		"methods": null,
		"description": "The log is written nowhere",
		"inheritance": "LogStream",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "logVerbosityLevel",
		"methods": [
			{
				"name": "verbosity_level",
				"type": "int32",
				"description": "Log verbosity level"
			}
		],
		"description": "Contains a TDLib internal log verbosity level",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "logTags",
		"methods": [
			{
				"name": "tags",
				"type": "vector<string>",
				"description": "List of log tags"
			}
		],
		"description": "Contains a list of available TDLib internal log tags",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "userSupportInfo",
		"methods": [
			{
				"name": "message",
				"type": "formattedText",
				"description": "Information message"
			},
			{
				"name": "author",
				"type": "string",
				"description": "Information author"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Information change date"
			}
		],
		"description": "Contains custom information about the user",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "testInt",
		"methods": [
			{
				"name": "value",
				"type": "int32",
				"description": "Number"
			}
		],
		"description": "A simple object containing a number; for testing only",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "testString",
		"methods": [
			{
				"name": "value",
				"type": "string",
				"description": "String"
			}
		],
		"description": "A simple object containing a string; for testing only",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "testBytes",
		"methods": [
			{
				"name": "value",
				"type": "bytes",
				"description": "Bytes"
			}
		],
		"description": "A simple object containing a sequence of bytes; for testing only",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "testVectorInt",
		"methods": [
			{
				"name": "value",
				"type": "vector<int32>",
				"description": "Vector of numbers"
			}
		],
		"description": "A simple object containing a vector of numbers; for testing only",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "testVectorIntObject",
		"methods": [
			{
				"name": "value",
				"type": "vector<testInt>",
				"description": "Vector of objects"
			}
		],
		"description": "A simple object containing a vector of objects that hold a number; for testing only",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "testVectorString",
		"methods": [
			{
				"name": "value",
				"type": "vector<string>",
				"description": "Vector of strings"
			}
		],
		"description": "A simple object containing a vector of strings; for testing only",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "testVectorStringObject",
		"methods": [
			{
				"name": "value",
				"type": "vector<testString>",
				"description": "Vector of objects"
			}
		],
		"description": "A simple object containing a vector of objects that hold a string; for testing only",
		"inheritance": "TLBaseClass",
		"return_type": "",
		"isFunction": false,
		"isSynchronous": false
	},
	{
		"name": "getAuthorizationState",
		"methods": null,
		"description": "Returns the current authorization state. This is an offline method. For informational purposes only. Use updateAuthorizationState instead to maintain the current authorization state. Can be called before initialization",
		"inheritance": "TLBaseClass",
		"return_type": "AuthorizationState",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setTdlibParameters",
		"methods": [
			{
				"name": "use_test_dc",
				"type": "Bool",
				"description": "Pass true to use Telegram test environment instead of the production environment"
			},
			{
				"name": "database_directory",
				"type": "string",
				"description": "The path to the directory for the persistent database; if empty, the current working directory will be used"
			},
			{
				"name": "files_directory",
				"type": "string",
				"description": "The path to the directory for storing files; if empty, database_directory will be used"
			},
			{
				"name": "database_encryption_key",
				"type": "bytes",
				"description": "Encryption key for the database. If the encryption key is invalid, then an error with code 401 will be returned"
			},
			{
				"name": "use_file_database",
				"type": "Bool",
				"description": "Pass true to keep information about downloaded and uploaded files between application restarts"
			},
			{
				"name": "use_chat_info_database",
				"type": "Bool",
				"description": "Pass true to keep cache of users, basic groups, supergroups, channels and secret chats between restarts. Implies use_file_database"
			},
			{
				"name": "use_message_database",
				"type": "Bool",
				"description": "Pass true to keep cache of chats and messages between restarts. Implies use_chat_info_database"
			},
			{
				"name": "use_secret_chats",
				"type": "Bool",
				"description": "Pass true to enable support for secret chats"
			},
			{
				"name": "api_id",
				"type": "int32",
				"description": "Application identifier for Telegram API access, which can be obtained at https://my.telegram.org"
			},
			{
				"name": "api_hash",
				"type": "string",
				"description": "Application identifier hash for Telegram API access, which can be obtained at https://my.telegram.org"
			},
			{
				"name": "system_language_code",
				"type": "string",
				"description": "IETF language tag of the user's operating system language; must be non-empty"
			},
			{
				"name": "device_model",
				"type": "string",
				"description": "Model of the device the application is being run on; must be non-empty"
			},
			{
				"name": "system_version",
				"type": "string",
				"description": "Version of the operating system the application is being run on. If empty, the version is automatically detected by TDLib"
			},
			{
				"name": "application_version",
				"type": "string",
				"description": "Application version; must be non-empty"
			}
		],
		"description": "Sets the parameters for TDLib initialization. Works only when the current authorization state is authorizationStateWaitTdlibParameters",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setAuthenticationPhoneNumber",
		"methods": [
			{
				"name": "phone_number",
				"type": "string",
				"description": "The phone number of the user, in international format"
			},
			{
				"name": "settings",
				"type": "phoneNumberAuthenticationSettings",
				"description": "Settings for the authentication of the user's phone number; pass null to use default settings"
			}
		],
		"description": "Sets the phone number of the user and sends an authentication code to the user. Works only when the current authorization state is authorizationStateWaitPhoneNumber, or if there is no pending authentication query and the current authorization state is authorizationStateWaitEmailAddress, authorizationStateWaitEmailCode, authorizationStateWaitCode, authorizationStateWaitRegistration, or authorizationStateWaitPassword",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setAuthenticationEmailAddress",
		"methods": [
			{
				"name": "email_address",
				"type": "string",
				"description": "The email address of the user"
			}
		],
		"description": "Sets the email address of the user and sends an authentication code to the email address. Works only when the current authorization state is authorizationStateWaitEmailAddress",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "resendAuthenticationCode",
		"methods": [
			{
				"name": "reason",
				"type": "ResendCodeReason",
				"description": "Reason of code resending; pass null if unknown"
			}
		],
		"description": "Resends an authentication code to the user. Works only when the current authorization state is authorizationStateWaitCode, the next_code_type of the result is not null and the server-specified timeout has passed, or when the current authorization state is authorizationStateWaitEmailCode",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "checkAuthenticationEmailCode",
		"methods": [
			{
				"name": "code",
				"type": "EmailAddressAuthentication",
				"description": "Email address authentication to check"
			}
		],
		"description": "Checks the authentication of an email address. Works only when the current authorization state is authorizationStateWaitEmailCode",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "checkAuthenticationCode",
		"methods": [
			{
				"name": "code",
				"type": "string",
				"description": "Authentication code to check"
			}
		],
		"description": "Checks the authentication code. Works only when the current authorization state is authorizationStateWaitCode",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "requestQrCodeAuthentication",
		"methods": [
			{
				"name": "other_user_ids",
				"type": "vector<int53>",
				"description": "List of user identifiers of other users currently using the application"
			}
		],
		"description": "Requests QR code authentication by scanning a QR code on another logged in device. Works only when the current authorization state is authorizationStateWaitPhoneNumber, or if there is no pending authentication query and the current authorization state is authorizationStateWaitEmailAddress, authorizationStateWaitEmailCode, authorizationStateWaitCode, authorizationStateWaitRegistration, or authorizationStateWaitPassword",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "registerUser",
		"methods": [
			{
				"name": "first_name",
				"type": "string",
				"description": "The first name of the user; 1-64 characters"
			},
			{
				"name": "last_name",
				"type": "string",
				"description": "The last name of the user; 0-64 characters"
			},
			{
				"name": "disable_notification",
				"type": "Bool",
				"description": "Pass true to disable notification about the current user joining Telegram for other users that added them to contact list"
			}
		],
		"description": "Finishes user registration. Works only when the current authorization state is authorizationStateWaitRegistration",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "resetAuthenticationEmailAddress",
		"methods": null,
		"description": "Resets the login email address. May return an error with a message \"TASK_ALREADY_EXISTS\" if reset is still pending. Works only when the current authorization state is authorizationStateWaitEmailCode and authorization_state.can_reset_email_address == true",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "checkAuthenticationPassword",
		"methods": [
			{
				"name": "password",
				"type": "string",
				"description": "The 2-step verification password to check"
			}
		],
		"description": "Checks the 2-step verification password for correctness. Works only when the current authorization state is authorizationStateWaitPassword",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "requestAuthenticationPasswordRecovery",
		"methods": null,
		"description": "Requests to send a 2-step verification password recovery code to an email address that was previously set up. Works only when the current authorization state is authorizationStateWaitPassword",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "checkAuthenticationPasswordRecoveryCode",
		"methods": [
			{
				"name": "recovery_code",
				"type": "string",
				"description": "Recovery code to check"
			}
		],
		"description": "Checks whether a 2-step verification password recovery code sent to an email address is valid. Works only when the current authorization state is authorizationStateWaitPassword",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "recoverAuthenticationPassword",
		"methods": [
			{
				"name": "recovery_code",
				"type": "string",
				"description": "Recovery code to check"
			},
			{
				"name": "new_password",
				"type": "string",
				"description": "New 2-step verification password of the user; may be empty to remove the password"
			},
			{
				"name": "new_hint",
				"type": "string",
				"description": "New password hint; may be empty"
			}
		],
		"description": "Recovers the 2-step verification password with a password recovery code sent to an email address that was previously set up. Works only when the current authorization state is authorizationStateWaitPassword",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "sendAuthenticationFirebaseSms",
		"methods": [
			{
				"name": "token",
				"type": "string",
				"description": "Play Integrity API or SafetyNet Attestation API token for the Android application, or secret from push notification for the iOS application"
			}
		],
		"description": "Sends Firebase Authentication SMS to the phone number of the user. Works only when the current authorization state is authorizationStateWaitCode and the server returned code of the type authenticationCodeTypeFirebaseAndroid or authenticationCodeTypeFirebaseIos",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "reportAuthenticationCodeMissing",
		"methods": [
			{
				"name": "mobile_network_code",
				"type": "string",
				"description": "Current mobile network code"
			}
		],
		"description": "Reports that authentication code wasn't delivered via SMS; for official mobile applications only. Works only when the current authorization state is authorizationStateWaitCode",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "checkAuthenticationBotToken",
		"methods": [
			{
				"name": "token",
				"type": "string",
				"description": "The bot token"
			}
		],
		"description": "Checks the authentication token of a bot; to log in as a bot. Works only when the current authorization state is authorizationStateWaitPhoneNumber. Can be used instead of setAuthenticationPhoneNumber and checkAuthenticationCode to log in",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "logOut",
		"methods": null,
		"description": "Closes the TDLib instance after a proper logout. Requires an available network connection. All local data will be destroyed. After the logout completes, updateAuthorizationState with authorizationStateClosed will be sent",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "close",
		"methods": null,
		"description": "Closes the TDLib instance. All databases will be flushed to disk and properly closed. After the close completes, updateAuthorizationState with authorizationStateClosed will be sent. Can be called before initialization",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "destroy",
		"methods": null,
		"description": "Closes the TDLib instance, destroying all local data without a proper logout. The current user session will remain in the list of all active sessions. All local data will be destroyed. After the destruction completes updateAuthorizationState with authorizationStateClosed will be sent. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "confirmQrCodeAuthentication",
		"methods": [
			{
				"name": "link",
				"type": "string",
				"description": "A link from a QR code. The link must be scanned by the in-app camera"
			}
		],
		"description": "Confirms QR code authentication on another device. Returns created session on success",
		"inheritance": "TLBaseClass",
		"return_type": "session",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getCurrentState",
		"methods": null,
		"description": "Returns all updates needed to restore current TDLib state, i.e. all actual updateAuthorizationState/updateUser/updateNewChat and others. This is especially useful if TDLib is run in a separate process. Can be called before initialization",
		"inheritance": "TLBaseClass",
		"return_type": "updates",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setDatabaseEncryptionKey",
		"methods": [
			{
				"name": "new_encryption_key",
				"type": "bytes",
				"description": "New encryption key"
			}
		],
		"description": "Changes the database encryption key. Usually the encryption key is never changed and is stored in some OS keychain",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getPasswordState",
		"methods": null,
		"description": "Returns the current state of 2-step verification",
		"inheritance": "TLBaseClass",
		"return_type": "passwordState",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setPassword",
		"methods": [
			{
				"name": "old_password",
				"type": "string",
				"description": "Previous 2-step verification password of the user"
			},
			{
				"name": "new_password",
				"type": "string",
				"description": "New 2-step verification password of the user; may be empty to remove the password"
			},
			{
				"name": "new_hint",
				"type": "string",
				"description": "New password hint; may be empty"
			},
			{
				"name": "set_recovery_email_address",
				"type": "Bool",
				"description": "Pass true to change also the recovery email address"
			},
			{
				"name": "new_recovery_email_address",
				"type": "string",
				"description": "New recovery email address; may be empty"
			}
		],
		"description": "Changes the 2-step verification password for the current user. If a new recovery email address is specified, then the change will not be applied until the new recovery email address is confirmed",
		"inheritance": "TLBaseClass",
		"return_type": "passwordState",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setLoginEmailAddress",
		"methods": [
			{
				"name": "new_login_email_address",
				"type": "string",
				"description": "New login email address"
			}
		],
		"description": "Changes the login email address of the user. The email address can be changed only if the current user already has login email and passwordState.login_email_address_pattern is non-empty. The change will not be applied until the new login email address is confirmed with checkLoginEmailAddressCode. To use Apple ID/Google ID instead of an email address, call checkLoginEmailAddressCode directly",
		"inheritance": "TLBaseClass",
		"return_type": "emailAddressAuthenticationCodeInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "resendLoginEmailAddressCode",
		"methods": null,
		"description": "Resends the login email address verification code",
		"inheritance": "TLBaseClass",
		"return_type": "emailAddressAuthenticationCodeInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "checkLoginEmailAddressCode",
		"methods": [
			{
				"name": "code",
				"type": "EmailAddressAuthentication",
				"description": "Email address authentication to check"
			}
		],
		"description": "Checks the login email address authentication",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getRecoveryEmailAddress",
		"methods": [
			{
				"name": "password",
				"type": "string",
				"description": "The 2-step verification password for the current user"
			}
		],
		"description": "Returns a 2-step verification recovery email address that was previously set up. This method can be used to verify a password provided by the user",
		"inheritance": "TLBaseClass",
		"return_type": "recoveryEmailAddress",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setRecoveryEmailAddress",
		"methods": [
			{
				"name": "password",
				"type": "string",
				"description": "The 2-step verification password of the current user"
			},
			{
				"name": "new_recovery_email_address",
				"type": "string",
				"description": "New recovery email address"
			}
		],
		"description": "Changes the 2-step verification recovery email address of the user. If a new recovery email address is specified, then the change will not be applied until the new recovery email address is confirmed. If new_recovery_email_address is the same as the email address that is currently set up, this call succeeds immediately and aborts all other requests waiting for an email confirmation",
		"inheritance": "TLBaseClass",
		"return_type": "passwordState",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "checkRecoveryEmailAddressCode",
		"methods": [
			{
				"name": "code",
				"type": "string",
				"description": "Verification code to check"
			}
		],
		"description": "Checks the 2-step verification recovery email address verification code",
		"inheritance": "TLBaseClass",
		"return_type": "passwordState",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "resendRecoveryEmailAddressCode",
		"methods": null,
		"description": "Resends the 2-step verification recovery email address verification code",
		"inheritance": "TLBaseClass",
		"return_type": "passwordState",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "cancelRecoveryEmailAddressVerification",
		"methods": null,
		"description": "Cancels verification of the 2-step verification recovery email address",
		"inheritance": "TLBaseClass",
		"return_type": "passwordState",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "requestPasswordRecovery",
		"methods": null,
		"description": "Requests to send a 2-step verification password recovery code to an email address that was previously set up",
		"inheritance": "TLBaseClass",
		"return_type": "emailAddressAuthenticationCodeInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "checkPasswordRecoveryCode",
		"methods": [
			{
				"name": "recovery_code",
				"type": "string",
				"description": "Recovery code to check"
			}
		],
		"description": "Checks whether a 2-step verification password recovery code sent to an email address is valid",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "recoverPassword",
		"methods": [
			{
				"name": "recovery_code",
				"type": "string",
				"description": "Recovery code to check"
			},
			{
				"name": "new_password",
				"type": "string",
				"description": "New 2-step verification password of the user; may be empty to remove the password"
			},
			{
				"name": "new_hint",
				"type": "string",
				"description": "New password hint; may be empty"
			}
		],
		"description": "Recovers the 2-step verification password using a recovery code sent to an email address that was previously set up",
		"inheritance": "TLBaseClass",
		"return_type": "passwordState",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "resetPassword",
		"methods": null,
		"description": "Removes 2-step verification password without previous password and access to recovery email address. The password can't be reset immediately and the request needs to be repeated after the specified time",
		"inheritance": "TLBaseClass",
		"return_type": "ResetPasswordResult",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "cancelPasswordReset",
		"methods": null,
		"description": "Cancels reset of 2-step verification password. The method can be called if passwordState.pending_reset_date > 0",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "createTemporaryPassword",
		"methods": [
			{
				"name": "password",
				"type": "string",
				"description": "The 2-step verification password of the current user"
			},
			{
				"name": "valid_for",
				"type": "int32",
				"description": "Time during which the temporary password will be valid, in seconds; must be between 60 and 86400"
			}
		],
		"description": "Creates a new temporary password for processing payments",
		"inheritance": "TLBaseClass",
		"return_type": "temporaryPasswordState",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getTemporaryPasswordState",
		"methods": null,
		"description": "Returns information about the current temporary password",
		"inheritance": "TLBaseClass",
		"return_type": "temporaryPasswordState",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getMe",
		"methods": null,
		"description": "Returns the current user",
		"inheritance": "TLBaseClass",
		"return_type": "user",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getUser",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			}
		],
		"description": "Returns information about a user by their identifier. This is an offline method if the current user is not a bot",
		"inheritance": "TLBaseClass",
		"return_type": "user",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getUserFullInfo",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			}
		],
		"description": "Returns full information about a user by their identifier",
		"inheritance": "TLBaseClass",
		"return_type": "userFullInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getBasicGroup",
		"methods": [
			{
				"name": "basic_group_id",
				"type": "int53",
				"description": "Basic group identifier"
			}
		],
		"description": "Returns information about a basic group by its identifier. This is an offline method if the current user is not a bot",
		"inheritance": "TLBaseClass",
		"return_type": "basicGroup",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getBasicGroupFullInfo",
		"methods": [
			{
				"name": "basic_group_id",
				"type": "int53",
				"description": "Basic group identifier"
			}
		],
		"description": "Returns full information about a basic group by its identifier",
		"inheritance": "TLBaseClass",
		"return_type": "basicGroupFullInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getSupergroup",
		"methods": [
			{
				"name": "supergroup_id",
				"type": "int53",
				"description": "Supergroup or channel identifier"
			}
		],
		"description": "Returns information about a supergroup or a channel by its identifier. This is an offline method if the current user is not a bot",
		"inheritance": "TLBaseClass",
		"return_type": "supergroup",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getSupergroupFullInfo",
		"methods": [
			{
				"name": "supergroup_id",
				"type": "int53",
				"description": "Supergroup or channel identifier"
			}
		],
		"description": "Returns full information about a supergroup or a channel by its identifier, cached for up to 1 minute",
		"inheritance": "TLBaseClass",
		"return_type": "supergroupFullInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getSecretChat",
		"methods": [
			{
				"name": "secret_chat_id",
				"type": "int32",
				"description": "Secret chat identifier"
			}
		],
		"description": "Returns information about a secret chat by its identifier. This is an offline method",
		"inheritance": "TLBaseClass",
		"return_type": "secretChat",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChat",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			}
		],
		"description": "Returns information about a chat by its identifier. This is an offline method if the current user is not a bot",
		"inheritance": "TLBaseClass",
		"return_type": "chat",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getMessage",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat the message belongs to"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message to get"
			}
		],
		"description": "Returns information about a message. Returns a 404 error if the message doesn't exist",
		"inheritance": "TLBaseClass",
		"return_type": "message",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getMessageLocally",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat the message belongs to"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message to get"
			}
		],
		"description": "Returns information about a message, if it is available without sending network request. Returns a 404 error if message isn't available locally. This is an offline method",
		"inheritance": "TLBaseClass",
		"return_type": "message",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getRepliedMessage",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat the message belongs to"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the reply message"
			}
		],
		"description": "Returns information about a non-bundled message that is replied by a given message. Also, returns the pinned message, the game message, the invoice message, the message with a previously set same background, the giveaway message, and the topic creation message for messages of the types messagePinMessage, messageGameScore, messagePaymentSuccessful, messageChatSetBackground, messageGiveawayCompleted and topic messages without non-bundled replied message respectively. Returns a 404 error if the message doesn't exist",
		"inheritance": "TLBaseClass",
		"return_type": "message",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatPinnedMessage",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat the message belongs to"
			}
		],
		"description": "Returns information about a newest pinned message in the chat. Returns a 404 error if the message doesn't exist",
		"inheritance": "TLBaseClass",
		"return_type": "message",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getCallbackQueryMessage",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat the message belongs to"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Message identifier"
			},
			{
				"name": "callback_query_id",
				"type": "int64",
				"description": "Identifier of the callback query"
			}
		],
		"description": "Returns information about a message with the callback button that originated a callback query; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "message",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getMessages",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat the messages belong to"
			},
			{
				"name": "message_ids",
				"type": "vector<int53>",
				"description": "Identifiers of the messages to get"
			}
		],
		"description": "Returns information about messages. If a message is not found, returns null on the corresponding position of the result",
		"inheritance": "TLBaseClass",
		"return_type": "messages",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getMessageProperties",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message"
			}
		],
		"description": "Returns properties of a message. This is an offline method",
		"inheritance": "TLBaseClass",
		"return_type": "messageProperties",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getMessageThread",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message"
			}
		],
		"description": "Returns information about a message thread. Can be used only if messageProperties.can_get_message_thread == true",
		"inheritance": "TLBaseClass",
		"return_type": "messageThreadInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getMessageReadDate",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message"
			}
		],
		"description": "Returns read date of a recent outgoing message in a private chat. The method can be called if messageProperties.can_get_read_date == true",
		"inheritance": "TLBaseClass",
		"return_type": "MessageReadDate",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getMessageViewers",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message"
			}
		],
		"description": "Returns viewers of a recent outgoing message in a basic group or a supergroup chat. For video notes and voice notes only users, opened content of the message, are returned. The method can be called if messageProperties.can_get_viewers == true",
		"inheritance": "TLBaseClass",
		"return_type": "messageViewers",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getFile",
		"methods": [
			{
				"name": "file_id",
				"type": "int32",
				"description": "Identifier of the file to get"
			}
		],
		"description": "Returns information about a file. This is an offline method",
		"inheritance": "TLBaseClass",
		"return_type": "file",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getRemoteFile",
		"methods": [
			{
				"name": "remote_file_id",
				"type": "string",
				"description": "Remote identifier of the file to get"
			},
			{
				"name": "file_type",
				"type": "FileType",
				"description": "File type; pass null if unknown"
			}
		],
		"description": "Returns information about a file by its remote identifier. This is an offline method. Can be used to register a URL as a file for further uploading, or sending as a message. Even the request succeeds, the file can be used only if it is still accessible to the user. For example, if the file is from a message, then the message must be not deleted and accessible to the user. If the file database is disabled, then the corresponding object with the file must be preloaded by the application",
		"inheritance": "TLBaseClass",
		"return_type": "file",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "loadChats",
		"methods": [
			{
				"name": "chat_list",
				"type": "ChatList",
				"description": "The chat list in which to load chats; pass null to load chats from the main chat list"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of chats to be loaded. For optimal performance, the number of loaded chats is chosen by TDLib and can be smaller than the specified limit, even if the end of the list is not reached"
			}
		],
		"description": "Loads more chats from a chat list. The loaded chats and their positions in the chat list will be sent through updates. Chats are sorted by the pair (chat.position.order, chat.id) in descending order. Returns a 404 error if all chats have been loaded",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChats",
		"methods": [
			{
				"name": "chat_list",
				"type": "ChatList",
				"description": "The chat list in which to return chats; pass null to get chats from the main chat list"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of chats to be returned"
			}
		],
		"description": "Returns an ordered list of chats from the beginning of a chat list. For informational purposes only. Use loadChats and updates processing instead to maintain chat lists in a consistent state",
		"inheritance": "TLBaseClass",
		"return_type": "chats",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchPublicChat",
		"methods": [
			{
				"name": "username",
				"type": "string",
				"description": "Username to be resolved"
			}
		],
		"description": "Searches a public chat by its username. Currently, only private chats, supergroups and channels can be public. Returns the chat if found; otherwise, an error is returned",
		"inheritance": "TLBaseClass",
		"return_type": "chat",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchPublicChats",
		"methods": [
			{
				"name": "query",
				"type": "string",
				"description": "Query to search for"
			}
		],
		"description": "Searches public chats by looking for specified query in their username and title. Currently, only private chats, supergroups and channels can be public. Returns a meaningful number of results. Excludes private chats with contacts and chats from the chat list from the results",
		"inheritance": "TLBaseClass",
		"return_type": "chats",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchChats",
		"methods": [
			{
				"name": "query",
				"type": "string",
				"description": "Query to search for. If the query is empty, returns up to 50 recently found chats"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of chats to be returned"
			}
		],
		"description": "Searches for the specified query in the title and username of already known chats. This is an offline method. Returns chats in the order seen in the main chat list",
		"inheritance": "TLBaseClass",
		"return_type": "chats",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchChatsOnServer",
		"methods": [
			{
				"name": "query",
				"type": "string",
				"description": "Query to search for"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of chats to be returned"
			}
		],
		"description": "Searches for the specified query in the title and username of already known chats via request to the server. Returns chats in the order seen in the main chat list",
		"inheritance": "TLBaseClass",
		"return_type": "chats",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getRecommendedChats",
		"methods": null,
		"description": "Returns a list of channel chats recommended to the current user",
		"inheritance": "TLBaseClass",
		"return_type": "chats",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatSimilarChats",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the target chat; must be an identifier of a channel chat"
			}
		],
		"description": "Returns a list of chats similar to the given chat",
		"inheritance": "TLBaseClass",
		"return_type": "chats",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatSimilarChatCount",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the target chat; must be an identifier of a channel chat"
			},
			{
				"name": "return_local",
				"type": "Bool",
				"description": "Pass true to get the number of chats without sending network requests, or -1 if the number of chats is unknown locally"
			}
		],
		"description": "Returns approximate number of chats similar to the given chat",
		"inheritance": "TLBaseClass",
		"return_type": "count",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "openChatSimilarChat",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the original chat, which similar chats were requested"
			},
			{
				"name": "opened_chat_id",
				"type": "int53",
				"description": "Identifier of the opened chat"
			}
		],
		"description": "Informs TDLib that a chat was opened from the list of similar chats. The method is independent of openChat and closeChat methods",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getBotSimilarBots",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "User identifier of the target bot"
			}
		],
		"description": "Returns a list of bots similar to the given bot",
		"inheritance": "TLBaseClass",
		"return_type": "users",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getBotSimilarBotCount",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "User identifier of the target bot"
			},
			{
				"name": "return_local",
				"type": "Bool",
				"description": "Pass true to get the number of bots without sending network requests, or -1 if the number of bots is unknown locally"
			}
		],
		"description": "Returns approximate number of bots similar to the given bot",
		"inheritance": "TLBaseClass",
		"return_type": "count",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "openBotSimilarBot",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the original bot, which similar bots were requested"
			},
			{
				"name": "opened_bot_user_id",
				"type": "int53",
				"description": "Identifier of the opened bot"
			}
		],
		"description": "Informs TDLib that a bot was opened from the list of similar bots",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getTopChats",
		"methods": [
			{
				"name": "category",
				"type": "TopChatCategory",
				"description": "Category of chats to be returned"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of chats to be returned; up to 30"
			}
		],
		"description": "Returns a list of frequently used chats",
		"inheritance": "TLBaseClass",
		"return_type": "chats",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "removeTopChat",
		"methods": [
			{
				"name": "category",
				"type": "TopChatCategory",
				"description": "Category of frequently used chats"
			},
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			}
		],
		"description": "Removes a chat from the list of frequently used chats. Supported only if the chat info database is enabled",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchRecentlyFoundChats",
		"methods": [
			{
				"name": "query",
				"type": "string",
				"description": "Query to search for"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of chats to be returned"
			}
		],
		"description": "Searches for the specified query in the title and username of up to 50 recently found chats. This is an offline method",
		"inheritance": "TLBaseClass",
		"return_type": "chats",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "addRecentlyFoundChat",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat to add"
			}
		],
		"description": "Adds a chat to the list of recently found chats. The chat is added to the beginning of the list. If the chat is already in the list, it will be removed from the list first",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "removeRecentlyFoundChat",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat to be removed"
			}
		],
		"description": "Removes a chat from the list of recently found chats",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "clearRecentlyFoundChats",
		"methods": null,
		"description": "Clears the list of recently found chats",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getRecentlyOpenedChats",
		"methods": [
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of chats to be returned"
			}
		],
		"description": "Returns recently opened chats. This is an offline method. Returns chats in the order of last opening",
		"inheritance": "TLBaseClass",
		"return_type": "chats",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "checkChatUsername",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier; must be identifier of a supergroup chat, or a channel chat, or a private chat with self, or 0 if the chat is being created"
			},
			{
				"name": "username",
				"type": "string",
				"description": "Username to be checked"
			}
		],
		"description": "Checks whether a username can be set for a chat",
		"inheritance": "TLBaseClass",
		"return_type": "CheckChatUsernameResult",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getCreatedPublicChats",
		"methods": [
			{
				"name": "type",
				"type": "PublicChatType",
				"description": "Type of the public chats to return"
			}
		],
		"description": "Returns a list of public chats of the specified type, owned by the user",
		"inheritance": "TLBaseClass",
		"return_type": "chats",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "checkCreatedPublicChatsLimit",
		"methods": [
			{
				"name": "type",
				"type": "PublicChatType",
				"description": "Type of the public chats, for which to check the limit"
			}
		],
		"description": "Checks whether the maximum number of owned public chats has been reached. Returns corresponding error if the limit was reached. The limit can be increased with Telegram Premium",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getSuitableDiscussionChats",
		"methods": null,
		"description": "Returns a list of basic group and supergroup chats, which can be used as a discussion group for a channel. Returned basic group chats must be first upgraded to supergroups before they can be set as a discussion group. To set a returned supergroup as a discussion group, access to its old messages must be enabled using toggleSupergroupIsAllHistoryAvailable first",
		"inheritance": "TLBaseClass",
		"return_type": "chats",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getInactiveSupergroupChats",
		"methods": null,
		"description": "Returns a list of recently inactive supergroups and channels. Can be used when user reaches limit on the number of joined supergroups and channels and receives CHANNELS_TOO_MUCH error. Also, the limit can be increased with Telegram Premium",
		"inheritance": "TLBaseClass",
		"return_type": "chats",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getSuitablePersonalChats",
		"methods": null,
		"description": "Returns a list of channel chats, which can be used as a personal chat",
		"inheritance": "TLBaseClass",
		"return_type": "chats",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "loadSavedMessagesTopics",
		"methods": [
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of topics to be loaded. For optimal performance, the number of loaded topics is chosen by TDLib and can be smaller than the specified limit, even if the end of the list is not reached"
			}
		],
		"description": "Loads more Saved Messages topics. The loaded topics will be sent through updateSavedMessagesTopic. Topics are sorted by their topic.order in descending order. Returns a 404 error if all topics have been loaded",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getSavedMessagesTopicHistory",
		"methods": [
			{
				"name": "saved_messages_topic_id",
				"type": "int53",
				"description": "Identifier of Saved Messages topic which messages will be fetched"
			},
			{
				"name": "from_message_id",
				"type": "int53",
				"description": "Identifier of the message starting from which messages must be fetched; use 0 to get results from the last message"
			},
			{
				"name": "offset",
				"type": "int32",
				"description": "Specify 0 to get results from exactly the message from_message_id or a negative offset up to 99 to get additionally some newer messages"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of messages to be returned; must be positive and can't be greater than 100. If the offset is negative, the limit must be greater than or equal to -offset. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit"
			}
		],
		"description": "Returns messages in a Saved Messages topic. The messages are returned in reverse chronological order (i.e., in order of decreasing message_id)",
		"inheritance": "TLBaseClass",
		"return_type": "messages",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getSavedMessagesTopicMessageByDate",
		"methods": [
			{
				"name": "saved_messages_topic_id",
				"type": "int53",
				"description": "Identifier of Saved Messages topic which message will be returned"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) relative to which to search for messages"
			}
		],
		"description": "Returns the last message sent in a Saved Messages topic no later than the specified date",
		"inheritance": "TLBaseClass",
		"return_type": "message",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteSavedMessagesTopicHistory",
		"methods": [
			{
				"name": "saved_messages_topic_id",
				"type": "int53",
				"description": "Identifier of Saved Messages topic which messages will be deleted"
			}
		],
		"description": "Deletes all messages in a Saved Messages topic",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteSavedMessagesTopicMessagesByDate",
		"methods": [
			{
				"name": "saved_messages_topic_id",
				"type": "int53",
				"description": "Identifier of Saved Messages topic which messages will be deleted"
			},
			{
				"name": "min_date",
				"type": "int32",
				"description": "The minimum date of the messages to delete"
			},
			{
				"name": "max_date",
				"type": "int32",
				"description": "The maximum date of the messages to delete"
			}
		],
		"description": "Deletes all messages between the specified dates in a Saved Messages topic. Messages sent in the last 30 seconds will not be deleted",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleSavedMessagesTopicIsPinned",
		"methods": [
			{
				"name": "saved_messages_topic_id",
				"type": "int53",
				"description": "Identifier of Saved Messages topic to pin or unpin"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "Pass true to pin the topic; pass false to unpin it"
			}
		],
		"description": "Changes the pinned state of a Saved Messages topic. There can be up to getOption(\"pinned_saved_messages_topic_count_max\") pinned topics. The limit can be increased with Telegram Premium",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setPinnedSavedMessagesTopics",
		"methods": [
			{
				"name": "saved_messages_topic_ids",
				"type": "vector<int53>",
				"description": "Identifiers of the new pinned Saved Messages topics"
			}
		],
		"description": "Changes the order of pinned Saved Messages topics",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getGroupsInCommon",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			},
			{
				"name": "offset_chat_id",
				"type": "int53",
				"description": "Chat identifier starting from which to return chats; use 0 for the first request"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of chats to be returned; up to 100"
			}
		],
		"description": "Returns a list of common group chats with a given user. Chats are sorted by their type and creation date",
		"inheritance": "TLBaseClass",
		"return_type": "chats",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatHistory",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "from_message_id",
				"type": "int53",
				"description": "Identifier of the message starting from which history must be fetched; use 0 to get results from the last message"
			},
			{
				"name": "offset",
				"type": "int32",
				"description": "Specify 0 to get results from exactly the message from_message_id or a negative offset up to 99 to get additionally some newer messages"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of messages to be returned; must be positive and can't be greater than 100. If the offset is negative, the limit must be greater than or equal to -offset. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit"
			},
			{
				"name": "only_local",
				"type": "Bool",
				"description": "Pass true to get only messages that are available without sending network requests"
			}
		],
		"description": "Returns messages in a chat. The messages are returned in reverse chronological order (i.e., in order of decreasing message_id). For optimal performance, the number of returned messages is chosen by TDLib. This is an offline method if only_local is true",
		"inheritance": "TLBaseClass",
		"return_type": "messages",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getMessageThreadHistory",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Message identifier, which thread history needs to be returned"
			},
			{
				"name": "from_message_id",
				"type": "int53",
				"description": "Identifier of the message starting from which history must be fetched; use 0 to get results from the last message"
			},
			{
				"name": "offset",
				"type": "int32",
				"description": "Specify 0 to get results from exactly the message from_message_id or a negative offset up to 99 to get additionally some newer messages"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of messages to be returned; must be positive and can't be greater than 100. If the offset is negative, the limit must be greater than or equal to -offset. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit"
			}
		],
		"description": "Returns messages in a message thread of a message. Can be used only if messageProperties.can_get_message_thread == true. Message thread of a channel message is in the channel's linked supergroup. The messages are returned in reverse chronological order (i.e., in order of decreasing message_id). For optimal performance, the number of returned messages is chosen by TDLib",
		"inheritance": "TLBaseClass",
		"return_type": "messages",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteChatHistory",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "remove_from_chat_list",
				"type": "Bool",
				"description": "Pass true to remove the chat from all chat lists"
			},
			{
				"name": "revoke",
				"type": "Bool",
				"description": "Pass true to delete chat history for all users"
			}
		],
		"description": "Deletes all messages in the chat. Use chat.can_be_deleted_only_for_self and chat.can_be_deleted_for_all_users fields to find whether and how the method can be applied to the chat",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteChat",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			}
		],
		"description": "Deletes a chat along with all messages in the corresponding chat for all chat members. For group chats this will release the usernames and remove all members. Use the field chat.can_be_deleted_for_all_users to find whether the method can be applied to the chat",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchChatMessages",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat in which to search messages"
			},
			{
				"name": "query",
				"type": "string",
				"description": "Query to search for"
			},
			{
				"name": "sender_id",
				"type": "MessageSender",
				"description": "Identifier of the sender of messages to search for; pass null to search for messages from any sender. Not supported in secret chats"
			},
			{
				"name": "from_message_id",
				"type": "int53",
				"description": "Identifier of the message starting from which history must be fetched; use 0 to get results from the last message"
			},
			{
				"name": "offset",
				"type": "int32",
				"description": "Specify 0 to get results from exactly the message from_message_id or a negative offset to get the specified message and some newer messages"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of messages to be returned; must be positive and can't be greater than 100. If the offset is negative, the limit must be greater than -offset. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit"
			},
			{
				"name": "filter",
				"type": "SearchMessagesFilter",
				"description": "Additional filter for messages to search; pass null to search for all messages"
			},
			{
				"name": "message_thread_id",
				"type": "int53",
				"description": "If not 0, only messages in the specified thread will be returned; supergroups only"
			},
			{
				"name": "saved_messages_topic_id",
				"type": "int53",
				"description": "If not 0, only messages in the specified Saved Messages topic will be returned; pass 0 to return all messages, or for chats other than Saved Messages"
			}
		],
		"description": "Searches for messages with given words in the chat. Returns the results in reverse chronological order, i.e. in order of decreasing message_id. Cannot be used in secret chats with a non-empty query (searchSecretMessages must be used instead), or without an enabled message database. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit. A combination of query, sender_id, filter and message_thread_id search criteria is expected to be supported, only if it is required for Telegram official application implementation",
		"inheritance": "TLBaseClass",
		"return_type": "foundChatMessages",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchMessages",
		"methods": [
			{
				"name": "chat_list",
				"type": "ChatList",
				"description": "Chat list in which to search messages; pass null to search in all chats regardless of their chat list. Only Main and Archive chat lists are supported"
			},
			{
				"name": "query",
				"type": "string",
				"description": "Query to search for"
			},
			{
				"name": "offset",
				"type": "string",
				"description": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of messages to be returned; up to 100. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit"
			},
			{
				"name": "filter",
				"type": "SearchMessagesFilter",
				"description": "Additional filter for messages to search; pass null to search for all messages. Filters searchMessagesFilterMention, searchMessagesFilterUnreadMention, searchMessagesFilterUnreadReaction, searchMessagesFilterFailedToSend, and searchMessagesFilterPinned are unsupported in this function"
			},
			{
				"name": "chat_type_filter",
				"type": "SearchMessagesChatTypeFilter",
				"description": "Additional filter for type of the chat of the searched messages; pass null to search for messages in all chats"
			},
			{
				"name": "min_date",
				"type": "int32",
				"description": "If not 0, the minimum date of the messages to return"
			},
			{
				"name": "max_date",
				"type": "int32",
				"description": "If not 0, the maximum date of the messages to return"
			}
		],
		"description": "Searches for messages in all chats except secret chats. Returns the results in reverse chronological order (i.e., in order of decreasing (date, chat_id, message_id)). For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit",
		"inheritance": "TLBaseClass",
		"return_type": "foundMessages",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchSecretMessages",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat in which to search. Specify 0 to search in all secret chats"
			},
			{
				"name": "query",
				"type": "string",
				"description": "Query to search for. If empty, searchChatMessages must be used instead"
			},
			{
				"name": "offset",
				"type": "string",
				"description": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of messages to be returned; up to 100. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit"
			},
			{
				"name": "filter",
				"type": "SearchMessagesFilter",
				"description": "Additional filter for messages to search; pass null to search for all messages"
			}
		],
		"description": "Searches for messages in secret chats. Returns the results in reverse chronological order. For optimal performance, the number of returned messages is chosen by TDLib",
		"inheritance": "TLBaseClass",
		"return_type": "foundMessages",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchSavedMessages",
		"methods": [
			{
				"name": "saved_messages_topic_id",
				"type": "int53",
				"description": "If not 0, only messages in the specified Saved Messages topic will be considered; pass 0 to consider all messages"
			},
			{
				"name": "tag",
				"type": "ReactionType",
				"description": "Tag to search for; pass null to return all suitable messages"
			},
			{
				"name": "query",
				"type": "string",
				"description": "Query to search for"
			},
			{
				"name": "from_message_id",
				"type": "int53",
				"description": "Identifier of the message starting from which messages must be fetched; use 0 to get results from the last message"
			},
			{
				"name": "offset",
				"type": "int32",
				"description": "Specify 0 to get results from exactly the message from_message_id or a negative offset to get the specified message and some newer messages"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of messages to be returned; must be positive and can't be greater than 100. If the offset is negative, the limit must be greater than -offset. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit"
			}
		],
		"description": "Searches for messages tagged by the given reaction and with the given words in the Saved Messages chat; for Telegram Premium users only. Returns the results in reverse chronological order, i.e. in order of decreasing message_id. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit",
		"inheritance": "TLBaseClass",
		"return_type": "foundChatMessages",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchCallMessages",
		"methods": [
			{
				"name": "offset",
				"type": "string",
				"description": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of messages to be returned; up to 100. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit"
			},
			{
				"name": "only_missed",
				"type": "Bool",
				"description": "Pass true to search only for messages with missed/declined calls"
			}
		],
		"description": "Searches for call messages. Returns the results in reverse chronological order (i.e., in order of decreasing message_id). For optimal performance, the number of returned messages is chosen by TDLib",
		"inheritance": "TLBaseClass",
		"return_type": "foundMessages",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchOutgoingDocumentMessages",
		"methods": [
			{
				"name": "query",
				"type": "string",
				"description": "Query to search for in document file name and message caption"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of messages to be returned; up to 100"
			}
		],
		"description": "Searches for outgoing messages with content of the type messageDocument in all chats except secret chats. Returns the results in reverse chronological order",
		"inheritance": "TLBaseClass",
		"return_type": "foundMessages",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchPublicMessagesByTag",
		"methods": [
			{
				"name": "tag",
				"type": "string",
				"description": "Hashtag or cashtag to search for"
			},
			{
				"name": "offset",
				"type": "string",
				"description": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of messages to be returned; up to 100. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit"
			}
		],
		"description": "Searches for public channel posts containing the given hashtag or cashtag. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit",
		"inheritance": "TLBaseClass",
		"return_type": "foundMessages",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchPublicStoriesByTag",
		"methods": [
			{
				"name": "story_sender_chat_id",
				"type": "int53",
				"description": "Identifier of the chat that posted the stories to search for; pass 0 to search stories in all chats"
			},
			{
				"name": "tag",
				"type": "string",
				"description": "Hashtag or cashtag to search for"
			},
			{
				"name": "offset",
				"type": "string",
				"description": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of stories to be returned; up to 100. For optimal performance, the number of returned stories is chosen by TDLib and can be smaller than the specified limit"
			}
		],
		"description": "Searches for public stories containing the given hashtag or cashtag. For optimal performance, the number of returned stories is chosen by TDLib and can be smaller than the specified limit",
		"inheritance": "TLBaseClass",
		"return_type": "foundStories",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchPublicStoriesByLocation",
		"methods": [
			{
				"name": "address",
				"type": "locationAddress",
				"description": "Address of the location"
			},
			{
				"name": "offset",
				"type": "string",
				"description": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of stories to be returned; up to 100. For optimal performance, the number of returned stories is chosen by TDLib and can be smaller than the specified limit"
			}
		],
		"description": "Searches for public stories by the given address location. For optimal performance, the number of returned stories is chosen by TDLib and can be smaller than the specified limit",
		"inheritance": "TLBaseClass",
		"return_type": "foundStories",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchPublicStoriesByVenue",
		"methods": [
			{
				"name": "venue_provider",
				"type": "string",
				"description": "Provider of the venue"
			},
			{
				"name": "venue_id",
				"type": "string",
				"description": "Identifier of the venue in the provider database"
			},
			{
				"name": "offset",
				"type": "string",
				"description": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of stories to be returned; up to 100. For optimal performance, the number of returned stories is chosen by TDLib and can be smaller than the specified limit"
			}
		],
		"description": "Searches for public stories from the given venue. For optimal performance, the number of returned stories is chosen by TDLib and can be smaller than the specified limit",
		"inheritance": "TLBaseClass",
		"return_type": "foundStories",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getSearchedForTags",
		"methods": [
			{
				"name": "tag_prefix",
				"type": "string",
				"description": "Prefix of hashtags or cashtags to return"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of items to be returned"
			}
		],
		"description": "Returns recently searched for hashtags or cashtags by their prefix",
		"inheritance": "TLBaseClass",
		"return_type": "hashtags",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "removeSearchedForTag",
		"methods": [
			{
				"name": "tag",
				"type": "string",
				"description": "Hashtag or cashtag to delete"
			}
		],
		"description": "Removes a hashtag or a cashtag from the list of recently searched for hashtags or cashtags",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "clearSearchedForTags",
		"methods": [
			{
				"name": "clear_cashtags",
				"type": "Bool",
				"description": "Pass true to clear the list of recently searched for cashtags; otherwise, the list of recently searched for hashtags will be cleared"
			}
		],
		"description": "Clears the list of recently searched for hashtags or cashtags",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteAllCallMessages",
		"methods": [
			{
				"name": "revoke",
				"type": "Bool",
				"description": "Pass true to delete the messages for all users"
			}
		],
		"description": "Deletes all call messages",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchChatRecentLocationMessages",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of messages to be returned"
			}
		],
		"description": "Returns information about the recent locations of chat members that were sent to the chat. Returns up to 1 location message per user",
		"inheritance": "TLBaseClass",
		"return_type": "messages",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatMessageByDate",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) relative to which to search for messages"
			}
		],
		"description": "Returns the last message sent in a chat no later than the specified date. Returns a 404 error if such message doesn't exist",
		"inheritance": "TLBaseClass",
		"return_type": "message",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatSparseMessagePositions",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat in which to return information about message positions"
			},
			{
				"name": "filter",
				"type": "SearchMessagesFilter",
				"description": "Filter for message content. Filters searchMessagesFilterEmpty, searchMessagesFilterMention, searchMessagesFilterUnreadMention, and searchMessagesFilterUnreadReaction are unsupported in this function"
			},
			{
				"name": "from_message_id",
				"type": "int53",
				"description": "The message identifier from which to return information about message positions"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The expected number of message positions to be returned; 50-2000. A smaller number of positions can be returned, if there are not enough appropriate messages"
			},
			{
				"name": "saved_messages_topic_id",
				"type": "int53",
				"description": "If not 0, only messages in the specified Saved Messages topic will be considered; pass 0 to consider all messages, or for chats other than Saved Messages"
			}
		],
		"description": "Returns sparse positions of messages of the specified type in the chat to be used for shared media scroll implementation. Returns the results in reverse chronological order (i.e., in order of decreasing message_id). Cannot be used in secret chats or with searchMessagesFilterFailedToSend filter without an enabled message database",
		"inheritance": "TLBaseClass",
		"return_type": "messagePositions",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatMessageCalendar",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat in which to return information about messages"
			},
			{
				"name": "filter",
				"type": "SearchMessagesFilter",
				"description": "Filter for message content. Filters searchMessagesFilterEmpty, searchMessagesFilterMention, searchMessagesFilterUnreadMention, and searchMessagesFilterUnreadReaction are unsupported in this function"
			},
			{
				"name": "from_message_id",
				"type": "int53",
				"description": "The message identifier from which to return information about messages; use 0 to get results from the last message"
			},
			{
				"name": "saved_messages_topic_id",
				"type": "int53",
				"description": "If not0, only messages in the specified Saved Messages topic will be considered; pass 0 to consider all messages, or for chats other than Saved Messages"
			}
		],
		"description": "Returns information about the next messages of the specified type in the chat split by days. Returns the results in reverse chronological order. Can return partial result for the last returned day. Behavior of this method depends on the value of the option \"utc_time_offset\"",
		"inheritance": "TLBaseClass",
		"return_type": "messageCalendar",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatMessageCount",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat in which to count messages"
			},
			{
				"name": "filter",
				"type": "SearchMessagesFilter",
				"description": "Filter for message content; searchMessagesFilterEmpty is unsupported in this function"
			},
			{
				"name": "saved_messages_topic_id",
				"type": "int53",
				"description": "If not 0, only messages in the specified Saved Messages topic will be counted; pass 0 to count all messages, or for chats other than Saved Messages"
			},
			{
				"name": "return_local",
				"type": "Bool",
				"description": "Pass true to get the number of messages without sending network requests, or -1 if the number of messages is unknown locally"
			}
		],
		"description": "Returns approximate number of messages of the specified type in the chat",
		"inheritance": "TLBaseClass",
		"return_type": "count",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatMessagePosition",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat in which to find message position"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Message identifier"
			},
			{
				"name": "filter",
				"type": "SearchMessagesFilter",
				"description": "Filter for message content; searchMessagesFilterEmpty, searchMessagesFilterUnreadMention, searchMessagesFilterUnreadReaction, and searchMessagesFilterFailedToSend are unsupported in this function"
			},
			{
				"name": "message_thread_id",
				"type": "int53",
				"description": "If not 0, only messages in the specified thread will be considered; supergroups only"
			},
			{
				"name": "saved_messages_topic_id",
				"type": "int53",
				"description": "If not 0, only messages in the specified Saved Messages topic will be considered; pass 0 to consider all relevant messages, or for chats other than Saved Messages"
			}
		],
		"description": "Returns approximate 1-based position of a message among messages, which can be found by the specified filter in the chat. Cannot be used in secret chats",
		"inheritance": "TLBaseClass",
		"return_type": "count",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatScheduledMessages",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			}
		],
		"description": "Returns all scheduled messages in a chat. The messages are returned in reverse chronological order (i.e., in order of decreasing message_id)",
		"inheritance": "TLBaseClass",
		"return_type": "messages",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatSponsoredMessages",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat"
			}
		],
		"description": "Returns sponsored messages to be shown in a chat; for channel chats and chats with bots only",
		"inheritance": "TLBaseClass",
		"return_type": "sponsoredMessages",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "clickChatSponsoredMessage",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier of the sponsored message"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the sponsored message"
			},
			{
				"name": "is_media_click",
				"type": "Bool",
				"description": "Pass true if the media was clicked in the sponsored message"
			},
			{
				"name": "from_fullscreen",
				"type": "Bool",
				"description": "Pass true if the user expanded the video from the sponsored message fullscreen before the click"
			}
		],
		"description": "Informs TDLib that the user opened the sponsored chat via the button, the name, the chat photo, a mention in the sponsored message text, or the media in the sponsored message",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "reportChatSponsoredMessage",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier of the sponsored message"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the sponsored message"
			},
			{
				"name": "option_id",
				"type": "bytes",
				"description": "Option identifier chosen by the user; leave empty for the initial request"
			}
		],
		"description": "Reports a sponsored message to Telegram moderators",
		"inheritance": "TLBaseClass",
		"return_type": "ReportChatSponsoredMessageResult",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "removeNotification",
		"methods": [
			{
				"name": "notification_group_id",
				"type": "int32",
				"description": "Identifier of notification group to which the notification belongs"
			},
			{
				"name": "notification_id",
				"type": "int32",
				"description": "Identifier of removed notification"
			}
		],
		"description": "Removes an active notification from notification list. Needs to be called only if the notification is removed by the current user",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "removeNotificationGroup",
		"methods": [
			{
				"name": "notification_group_id",
				"type": "int32",
				"description": "Notification group identifier"
			},
			{
				"name": "max_notification_id",
				"type": "int32",
				"description": "The maximum identifier of removed notifications"
			}
		],
		"description": "Removes a group of active notifications. Needs to be called only if the notification group is removed by the current user",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getMessageLink",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat to which the message belongs"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message"
			},
			{
				"name": "media_timestamp",
				"type": "int32",
				"description": "If not 0, timestamp from which the video/audio/video note/voice note/story playing must start, in seconds. The media can be in the message content or in its link preview"
			},
			{
				"name": "for_album",
				"type": "Bool",
				"description": "Pass true to create a link for the whole media album"
			},
			{
				"name": "in_message_thread",
				"type": "Bool",
				"description": "Pass true to create a link to the message as a channel post comment, in a message thread, or a forum topic"
			}
		],
		"description": "Returns an HTTPS link to a message in a chat. Available only if messageProperties.can_get_link, or if messageProperties.can_get_media_timestamp_links and a media timestamp link is generated. This is an offline method",
		"inheritance": "TLBaseClass",
		"return_type": "messageLink",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getMessageEmbeddingCode",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat to which the message belongs"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message"
			},
			{
				"name": "for_album",
				"type": "Bool",
				"description": "Pass true to return an HTML code for embedding of the whole media album"
			}
		],
		"description": "Returns an HTML code for embedding the message. Available only if messageProperties.can_get_embedding_code",
		"inheritance": "TLBaseClass",
		"return_type": "text",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getMessageLinkInfo",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "The message link"
			}
		],
		"description": "Returns information about a public or private message link. Can be called for any internal link of the type internalLinkTypeMessage",
		"inheritance": "TLBaseClass",
		"return_type": "messageLinkInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "translateText",
		"methods": [
			{
				"name": "text",
				"type": "formattedText",
				"description": "Text to translate"
			},
			{
				"name": "to_language_code",
				"type": "string",
				"description": "Language code of the language to which the message is translated. Must be one of \"af\", \"sq\", \"am\", \"ar\", \"hy\", \"az\", \"eu\", \"be\", \"bn\", \"bs\", \"bg\", \"ca\", \"ceb\", \"zh-CN\", \"zh\", \"zh-Hans\", \"zh-TW\", \"zh-Hant\", \"co\", \"hr\", \"cs\", \"da\", \"nl\", \"en\", \"eo\", \"et\", \"fi\", \"fr\", \"fy\", \"gl\", \"ka\", \"de\", \"el\", \"gu\", \"ht\", \"ha\", \"haw\", \"he\", \"iw\", \"hi\", \"hmn\", \"hu\", \"is\", \"ig\", \"id\", \"in\", \"ga\", \"it\", \"ja\", \"jv\", \"kn\", \"kk\", \"km\", \"rw\", \"ko\", \"ku\", \"ky\", \"lo\", \"la\", \"lv\", \"lt\", \"lb\", \"mk\", \"mg\", \"ms\", \"ml\", \"mt\", \"mi\", \"mr\", \"mn\", \"my\", \"ne\", \"no\", \"ny\", \"or\", \"ps\", \"fa\", \"pl\", \"pt\", \"pa\", \"ro\", \"ru\", \"sm\", \"gd\", \"sr\", \"st\", \"sn\", \"sd\", \"si\", \"sk\", \"sl\", \"so\", \"es\", \"su\", \"sw\", \"sv\", \"tl\", \"tg\", \"ta\", \"tt\", \"te\", \"th\", \"tr\", \"tk\", \"uk\", \"ur\", \"ug\", \"uz\", \"vi\", \"cy\", \"xh\", \"yi\", \"ji\", \"yo\", \"zu\""
			}
		],
		"description": "Translates a text to the given language. If the current user is a Telegram Premium user, then text formatting is preserved",
		"inheritance": "TLBaseClass",
		"return_type": "formattedText",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "translateMessageText",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat to which the message belongs"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message"
			},
			{
				"name": "to_language_code",
				"type": "string",
				"description": "Language code of the language to which the message is translated. Must be one of \"af\", \"sq\", \"am\", \"ar\", \"hy\", \"az\", \"eu\", \"be\", \"bn\", \"bs\", \"bg\", \"ca\", \"ceb\", \"zh-CN\", \"zh\", \"zh-Hans\", \"zh-TW\", \"zh-Hant\", \"co\", \"hr\", \"cs\", \"da\", \"nl\", \"en\", \"eo\", \"et\", \"fi\", \"fr\", \"fy\", \"gl\", \"ka\", \"de\", \"el\", \"gu\", \"ht\", \"ha\", \"haw\", \"he\", \"iw\", \"hi\", \"hmn\", \"hu\", \"is\", \"ig\", \"id\", \"in\", \"ga\", \"it\", \"ja\", \"jv\", \"kn\", \"kk\", \"km\", \"rw\", \"ko\", \"ku\", \"ky\", \"lo\", \"la\", \"lv\", \"lt\", \"lb\", \"mk\", \"mg\", \"ms\", \"ml\", \"mt\", \"mi\", \"mr\", \"mn\", \"my\", \"ne\", \"no\", \"ny\", \"or\", \"ps\", \"fa\", \"pl\", \"pt\", \"pa\", \"ro\", \"ru\", \"sm\", \"gd\", \"sr\", \"st\", \"sn\", \"sd\", \"si\", \"sk\", \"sl\", \"so\", \"es\", \"su\", \"sw\", \"sv\", \"tl\", \"tg\", \"ta\", \"tt\", \"te\", \"th\", \"tr\", \"tk\", \"uk\", \"ur\", \"ug\", \"uz\", \"vi\", \"cy\", \"xh\", \"yi\", \"ji\", \"yo\", \"zu\""
			}
		],
		"description": "Extracts text or caption of the given message and translates it to the given language. If the current user is a Telegram Premium user, then text formatting is preserved",
		"inheritance": "TLBaseClass",
		"return_type": "formattedText",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "recognizeSpeech",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat to which the message belongs"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message. Use messageProperties.can_recognize_speech to check whether the message is suitable"
			}
		],
		"description": "Recognizes speech in a video note or a voice note message",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "rateSpeechRecognition",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat to which the message belongs"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message"
			},
			{
				"name": "is_good",
				"type": "Bool",
				"description": "Pass true if the speech recognition is good"
			}
		],
		"description": "Rates recognized speech in a video note or a voice note message",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatAvailableMessageSenders",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			}
		],
		"description": "Returns the list of message sender identifiers, which can be used to send messages in a chat",
		"inheritance": "TLBaseClass",
		"return_type": "chatMessageSenders",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setChatMessageSender",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_sender_id",
				"type": "MessageSender",
				"description": "New message sender for the chat"
			}
		],
		"description": "Selects a message sender to send messages in a chat",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "sendMessage",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Target chat"
			},
			{
				"name": "message_thread_id",
				"type": "int53",
				"description": "If not 0, the message thread identifier in which the message will be sent"
			},
			{
				"name": "reply_to",
				"type": "InputMessageReplyTo",
				"description": "Information about the message or story to be replied; pass null if none"
			},
			{
				"name": "options",
				"type": "messageSendOptions",
				"description": "Options to be used to send the message; pass null to use default options"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "Markup for replying to the message; pass null if none; for bots only"
			},
			{
				"name": "input_message_content",
				"type": "InputMessageContent",
				"description": "The content of the message to be sent"
			}
		],
		"description": "Sends a message. Returns the sent message",
		"inheritance": "TLBaseClass",
		"return_type": "message",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "sendMessageAlbum",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Target chat"
			},
			{
				"name": "message_thread_id",
				"type": "int53",
				"description": "If not 0, the message thread identifier in which the messages will be sent"
			},
			{
				"name": "reply_to",
				"type": "InputMessageReplyTo",
				"description": "Information about the message or story to be replied; pass null if none"
			},
			{
				"name": "options",
				"type": "messageSendOptions",
				"description": "Options to be used to send the messages; pass null to use default options"
			},
			{
				"name": "input_message_contents",
				"type": "vector<InputMessageContent>",
				"description": "Contents of messages to be sent. At most 10 messages can be added to an album. All messages must have the same value of show_caption_above_media"
			}
		],
		"description": "Sends 2-10 messages grouped together into an album. Currently, only audio, document, photo and video messages can be grouped into an album. Documents and audio files can be only grouped in an album with messages of the same type. Returns sent messages",
		"inheritance": "TLBaseClass",
		"return_type": "messages",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "sendBotStartMessage",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the bot"
			},
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the target chat"
			},
			{
				"name": "parameter",
				"type": "string",
				"description": "A hidden parameter sent to the bot for deep linking purposes (https://core.telegram.org/bots#deep-linking)"
			}
		],
		"description": "Invites a bot to a chat (if it is not yet a member) and sends it the /start command; requires can_invite_users member right. Bots can't be invited to a private chat other than the chat with the bot. Bots can't be invited to channels (although they can be added as admins) and secret chats. Returns the sent message",
		"inheritance": "TLBaseClass",
		"return_type": "message",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "sendInlineQueryResultMessage",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Target chat"
			},
			{
				"name": "message_thread_id",
				"type": "int53",
				"description": "If not 0, the message thread identifier in which the message will be sent"
			},
			{
				"name": "reply_to",
				"type": "InputMessageReplyTo",
				"description": "Information about the message or story to be replied; pass null if none"
			},
			{
				"name": "options",
				"type": "messageSendOptions",
				"description": "Options to be used to send the message; pass null to use default options"
			},
			{
				"name": "query_id",
				"type": "int64",
				"description": "Identifier of the inline query"
			},
			{
				"name": "result_id",
				"type": "string",
				"description": "Identifier of the inline query result"
			},
			{
				"name": "hide_via_bot",
				"type": "Bool",
				"description": "Pass true to hide the bot, via which the message is sent. Can be used only for bots getOption(\"animation_search_bot_username\"), getOption(\"photo_search_bot_username\"), and getOption(\"venue_search_bot_username\")"
			}
		],
		"description": "Sends the result of an inline query as a message. Returns the sent message. Always clears a chat draft message",
		"inheritance": "TLBaseClass",
		"return_type": "message",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "forwardMessages",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat to which to forward messages"
			},
			{
				"name": "message_thread_id",
				"type": "int53",
				"description": "If not 0, the message thread identifier in which the message will be sent; for forum threads only"
			},
			{
				"name": "from_chat_id",
				"type": "int53",
				"description": "Identifier of the chat from which to forward messages"
			},
			{
				"name": "message_ids",
				"type": "vector<int53>",
				"description": "Identifiers of the messages to forward. Message identifiers must be in a strictly increasing order. At most 100 messages can be forwarded simultaneously. A message can be forwarded only if messageProperties.can_be_forwarded"
			},
			{
				"name": "options",
				"type": "messageSendOptions",
				"description": "Options to be used to send the messages; pass null to use default options"
			},
			{
				"name": "send_copy",
				"type": "Bool",
				"description": "Pass true to copy content of the messages without reference to the original sender. Always true if the messages are forwarded to a secret chat or are local. Use messageProperties.can_be_saved and messageProperties.can_be_copied_to_secret_chat to check whether the message is suitable"
			},
			{
				"name": "remove_caption",
				"type": "Bool",
				"description": "Pass true to remove media captions of message copies. Ignored if send_copy is false"
			}
		],
		"description": "Forwards previously sent messages. Returns the forwarded messages in the same order as the message identifiers passed in message_ids. If a message can't be forwarded, null will be returned instead of the message",
		"inheritance": "TLBaseClass",
		"return_type": "messages",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "sendQuickReplyShortcutMessages",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat to which to send messages. The chat must be a private chat with a regular user"
			},
			{
				"name": "shortcut_id",
				"type": "int32",
				"description": "Unique identifier of the quick reply shortcut"
			},
			{
				"name": "sending_id",
				"type": "int32",
				"description": "Non-persistent identifier, which will be returned back in messageSendingStatePending object and can be used to match sent messages and corresponding updateNewMessage updates"
			}
		],
		"description": "Sends messages from a quick reply shortcut. Requires Telegram Business subscription. Can't be used to send paid messages",
		"inheritance": "TLBaseClass",
		"return_type": "messages",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "resendMessages",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat to send messages"
			},
			{
				"name": "message_ids",
				"type": "vector<int53>",
				"description": "Identifiers of the messages to resend. Message identifiers must be in a strictly increasing order"
			},
			{
				"name": "quote",
				"type": "inputTextQuote",
				"description": "New manually chosen quote from the message to be replied; pass null if none. Ignored if more than one message is re-sent, or if messageSendingStateFailed.need_another_reply_quote == false"
			},
			{
				"name": "paid_message_star_count",
				"type": "int53",
				"description": "The number of Telegram Stars the user agreed to pay to send the messages. Ignored if messageSendingStateFailed.required_paid_message_star_count == 0"
			}
		],
		"description": "Resends messages which failed to send. Can be called only for messages for which messageSendingStateFailed.can_retry is true and after specified in messageSendingStateFailed.retry_after time passed. If a message is re-sent, the corresponding failed to send message is deleted. Returns the sent messages in the same order as the message identifiers passed in message_ids. If a message can't be re-sent, null will be returned instead of the message",
		"inheritance": "TLBaseClass",
		"return_type": "messages",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "addLocalMessage",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Target chat"
			},
			{
				"name": "sender_id",
				"type": "MessageSender",
				"description": "Identifier of the sender of the message"
			},
			{
				"name": "reply_to",
				"type": "InputMessageReplyTo",
				"description": "Information about the message or story to be replied; pass null if none"
			},
			{
				"name": "disable_notification",
				"type": "Bool",
				"description": "Pass true to disable notification for the message"
			},
			{
				"name": "input_message_content",
				"type": "InputMessageContent",
				"description": "The content of the message to be added"
			}
		],
		"description": "Adds a local message to a chat. The message is persistent across application restarts only if the message database is used. Returns the added message",
		"inheritance": "TLBaseClass",
		"return_type": "message",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteMessages",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_ids",
				"type": "vector<int53>",
				"description": "Identifiers of the messages to be deleted. Use messageProperties.can_be_deleted_only_for_self and messageProperties.can_be_deleted_for_all_users to get suitable messages"
			},
			{
				"name": "revoke",
				"type": "Bool",
				"description": "Pass true to delete messages for all chat members. Always true for supergroups, channels and secret chats"
			}
		],
		"description": "Deletes messages",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteChatMessagesBySender",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "sender_id",
				"type": "MessageSender",
				"description": "Identifier of the sender of messages to delete"
			}
		],
		"description": "Deletes all messages sent by the specified message sender in a chat. Supported only for supergroups; requires can_delete_messages administrator right",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteChatMessagesByDate",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "min_date",
				"type": "int32",
				"description": "The minimum date of the messages to delete"
			},
			{
				"name": "max_date",
				"type": "int32",
				"description": "The maximum date of the messages to delete"
			},
			{
				"name": "revoke",
				"type": "Bool",
				"description": "Pass true to delete chat messages for all users; private chats only"
			}
		],
		"description": "Deletes all messages between the specified dates in a chat. Supported only for private chats and basic groups. Messages sent in the last 30 seconds will not be deleted",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editMessageText",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "The chat the message belongs to"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message. Use messageProperties.can_be_edited to check whether the message can be edited"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The new message reply markup; pass null if none; for bots only"
			},
			{
				"name": "input_message_content",
				"type": "InputMessageContent",
				"description": "New text content of the message. Must be of type inputMessageText"
			}
		],
		"description": "Edits the text of a message (or a text of a game message). Returns the edited message after the edit is completed on the server side",
		"inheritance": "TLBaseClass",
		"return_type": "message",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editMessageLiveLocation",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "The chat the message belongs to"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message. Use messageProperties.can_be_edited to check whether the message can be edited"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The new message reply markup; pass null if none; for bots only"
			},
			{
				"name": "location",
				"type": "location",
				"description": "New location content of the message; pass null to stop sharing the live location"
			},
			{
				"name": "live_period",
				"type": "int32",
				"description": "New time relative to the message send date, for which the location can be updated, in seconds. If 0x7FFFFFFF specified, then the location can be updated forever. Otherwise, must not exceed the current live_period by more than a day, and the live location expiration date must remain in the next 90 days. Pass 0 to keep the current live_period"
			},
			{
				"name": "heading",
				"type": "int32",
				"description": "The new direction in which the location moves, in degrees; 1-360. Pass 0 if unknown"
			},
			{
				"name": "proximity_alert_radius",
				"type": "int32",
				"description": "The new maximum distance for proximity alerts, in meters (0-100000). Pass 0 if the notification is disabled"
			}
		],
		"description": "Edits the message content of a live location. Messages can be edited for a limited period of time specified in the live location. Returns the edited message after the edit is completed on the server side",
		"inheritance": "TLBaseClass",
		"return_type": "message",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editMessageMedia",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "The chat the message belongs to"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message. Use messageProperties.can_edit_media to check whether the message can be edited"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The new message reply markup; pass null if none; for bots only"
			},
			{
				"name": "input_message_content",
				"type": "InputMessageContent",
				"description": "New content of the message. Must be one of the following types: inputMessageAnimation, inputMessageAudio, inputMessageDocument, inputMessagePhoto or inputMessageVideo"
			}
		],
		"description": "Edits the media content of a message, including message caption. If only the caption needs to be edited, use editMessageCaption instead. The type of message content in an album can't be changed with exception of replacing a photo with a video or vice versa. Returns the edited message after the edit is completed on the server side",
		"inheritance": "TLBaseClass",
		"return_type": "message",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editMessageCaption",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "The chat the message belongs to"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message. Use messageProperties.can_be_edited to check whether the message can be edited"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The new message reply markup; pass null if none; for bots only"
			},
			{
				"name": "caption",
				"type": "formattedText",
				"description": "New message content caption; 0-getOption(\"message_caption_length_max\") characters; pass null to remove caption"
			},
			{
				"name": "show_caption_above_media",
				"type": "Bool",
				"description": "Pass true to show the caption above the media; otherwise, the caption will be shown below the media. May be true only for animation, photo, and video messages"
			}
		],
		"description": "Edits the message content caption. Returns the edited message after the edit is completed on the server side",
		"inheritance": "TLBaseClass",
		"return_type": "message",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editMessageReplyMarkup",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "The chat the message belongs to"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message. Use messageProperties.can_be_edited to check whether the message can be edited"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The new message reply markup; pass null if none"
			}
		],
		"description": "Edits the message reply markup; for bots only. Returns the edited message after the edit is completed on the server side",
		"inheritance": "TLBaseClass",
		"return_type": "message",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editInlineMessageText",
		"methods": [
			{
				"name": "inline_message_id",
				"type": "string",
				"description": "Inline message identifier"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The new message reply markup; pass null if none"
			},
			{
				"name": "input_message_content",
				"type": "InputMessageContent",
				"description": "New text content of the message. Must be of type inputMessageText"
			}
		],
		"description": "Edits the text of an inline text or game message sent via a bot; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editInlineMessageLiveLocation",
		"methods": [
			{
				"name": "inline_message_id",
				"type": "string",
				"description": "Inline message identifier"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The new message reply markup; pass null if none"
			},
			{
				"name": "location",
				"type": "location",
				"description": "New location content of the message; pass null to stop sharing the live location"
			},
			{
				"name": "live_period",
				"type": "int32",
				"description": "New time relative to the message send date, for which the location can be updated, in seconds. If 0x7FFFFFFF specified, then the location can be updated forever. Otherwise, must not exceed the current live_period by more than a day, and the live location expiration date must remain in the next 90 days. Pass 0 to keep the current live_period"
			},
			{
				"name": "heading",
				"type": "int32",
				"description": "The new direction in which the location moves, in degrees; 1-360. Pass 0 if unknown"
			},
			{
				"name": "proximity_alert_radius",
				"type": "int32",
				"description": "The new maximum distance for proximity alerts, in meters (0-100000). Pass 0 if the notification is disabled"
			}
		],
		"description": "Edits the content of a live location in an inline message sent via a bot; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editInlineMessageMedia",
		"methods": [
			{
				"name": "inline_message_id",
				"type": "string",
				"description": "Inline message identifier"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The new message reply markup; pass null if none; for bots only"
			},
			{
				"name": "input_message_content",
				"type": "InputMessageContent",
				"description": "New content of the message. Must be one of the following types: inputMessageAnimation, inputMessageAudio, inputMessageDocument, inputMessagePhoto or inputMessageVideo"
			}
		],
		"description": "Edits the media content of a message with a text, an animation, an audio, a document, a photo or a video in an inline message sent via a bot; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editInlineMessageCaption",
		"methods": [
			{
				"name": "inline_message_id",
				"type": "string",
				"description": "Inline message identifier"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The new message reply markup; pass null if none"
			},
			{
				"name": "caption",
				"type": "formattedText",
				"description": "New message content caption; pass null to remove caption; 0-getOption(\"message_caption_length_max\") characters"
			},
			{
				"name": "show_caption_above_media",
				"type": "Bool",
				"description": "Pass true to show the caption above the media; otherwise, the caption will be shown below the media. May be true only for animation, photo, and video messages"
			}
		],
		"description": "Edits the caption of an inline message sent via a bot; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editInlineMessageReplyMarkup",
		"methods": [
			{
				"name": "inline_message_id",
				"type": "string",
				"description": "Inline message identifier"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The new message reply markup; pass null if none"
			}
		],
		"description": "Edits the reply markup of an inline message sent via a bot; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editMessageSchedulingState",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "The chat the message belongs to"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message. Use messageProperties.can_edit_scheduling_state to check whether the message is suitable"
			},
			{
				"name": "scheduling_state",
				"type": "MessageSchedulingState",
				"description": "The new message scheduling state; pass null to send the message immediately. Must be null for messages in the state messageSchedulingStateSendWhenVideoProcessed"
			}
		],
		"description": "Edits the time when a scheduled message will be sent. Scheduling state of all messages in the same album or forwarded together with the message will be also changed",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setMessageFactCheck",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "The channel chat the message belongs to"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message"
			},
			{
				"name": "text",
				"type": "formattedText",
				"description": "New text of the fact-check; 0-getOption(\"fact_check_length_max\") characters; pass null to remove it. Only Bold, Italic, and TextUrl entities with https://t.me/ links are supported"
			}
		],
		"description": "Changes the fact-check of a message. Can be only used if messageProperties.can_set_fact_check == true",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "sendBusinessMessage",
		"methods": [
			{
				"name": "business_connection_id",
				"type": "string",
				"description": "Unique identifier of business connection on behalf of which to send the request"
			},
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Target chat"
			},
			{
				"name": "reply_to",
				"type": "InputMessageReplyTo",
				"description": "Information about the message to be replied; pass null if none"
			},
			{
				"name": "disable_notification",
				"type": "Bool",
				"description": "Pass true to disable notification for the message"
			},
			{
				"name": "protect_content",
				"type": "Bool",
				"description": "Pass true if the content of the message must be protected from forwarding and saving"
			},
			{
				"name": "effect_id",
				"type": "int64",
				"description": "Identifier of the effect to apply to the message"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "Markup for replying to the message; pass null if none"
			},
			{
				"name": "input_message_content",
				"type": "InputMessageContent",
				"description": "The content of the message to be sent"
			}
		],
		"description": "Sends a message on behalf of a business account; for bots only. Returns the message after it was sent",
		"inheritance": "TLBaseClass",
		"return_type": "businessMessage",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "sendBusinessMessageAlbum",
		"methods": [
			{
				"name": "business_connection_id",
				"type": "string",
				"description": "Unique identifier of business connection on behalf of which to send the request"
			},
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Target chat"
			},
			{
				"name": "reply_to",
				"type": "InputMessageReplyTo",
				"description": "Information about the message to be replied; pass null if none"
			},
			{
				"name": "disable_notification",
				"type": "Bool",
				"description": "Pass true to disable notification for the message"
			},
			{
				"name": "protect_content",
				"type": "Bool",
				"description": "Pass true if the content of the message must be protected from forwarding and saving"
			},
			{
				"name": "effect_id",
				"type": "int64",
				"description": "Identifier of the effect to apply to the message"
			},
			{
				"name": "input_message_contents",
				"type": "vector<InputMessageContent>",
				"description": "Contents of messages to be sent. At most 10 messages can be added to an album. All messages must have the same value of show_caption_above_media"
			}
		],
		"description": "Sends 2-10 messages grouped together into an album on behalf of a business account; for bots only. Currently, only audio, document, photo and video messages can be grouped into an album. Documents and audio files can be only grouped in an album with messages of the same type. Returns sent messages",
		"inheritance": "TLBaseClass",
		"return_type": "businessMessages",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editBusinessMessageText",
		"methods": [
			{
				"name": "business_connection_id",
				"type": "string",
				"description": "Unique identifier of business connection on behalf of which the message was sent"
			},
			{
				"name": "chat_id",
				"type": "int53",
				"description": "The chat the message belongs to"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The new message reply markup; pass null if none"
			},
			{
				"name": "input_message_content",
				"type": "InputMessageContent",
				"description": "New text content of the message. Must be of type inputMessageText"
			}
		],
		"description": "Edits the text of a text or game message sent on behalf of a business account; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "businessMessage",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editBusinessMessageLiveLocation",
		"methods": [
			{
				"name": "business_connection_id",
				"type": "string",
				"description": "Unique identifier of business connection on behalf of which the message was sent"
			},
			{
				"name": "chat_id",
				"type": "int53",
				"description": "The chat the message belongs to"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The new message reply markup; pass null if none"
			},
			{
				"name": "location",
				"type": "location",
				"description": "New location content of the message; pass null to stop sharing the live location"
			},
			{
				"name": "live_period",
				"type": "int32",
				"description": "New time relative to the message send date, for which the location can be updated, in seconds. If 0x7FFFFFFF specified, then the location can be updated forever. Otherwise, must not exceed the current live_period by more than a day, and the live location expiration date must remain in the next 90 days. Pass 0 to keep the current live_period"
			},
			{
				"name": "heading",
				"type": "int32",
				"description": "The new direction in which the location moves, in degrees; 1-360. Pass 0 if unknown"
			},
			{
				"name": "proximity_alert_radius",
				"type": "int32",
				"description": "The new maximum distance for proximity alerts, in meters (0-100000). Pass 0 if the notification is disabled"
			}
		],
		"description": "Edits the content of a live location in a message sent on behalf of a business account; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "businessMessage",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editBusinessMessageMedia",
		"methods": [
			{
				"name": "business_connection_id",
				"type": "string",
				"description": "Unique identifier of business connection on behalf of which the message was sent"
			},
			{
				"name": "chat_id",
				"type": "int53",
				"description": "The chat the message belongs to"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The new message reply markup; pass null if none; for bots only"
			},
			{
				"name": "input_message_content",
				"type": "InputMessageContent",
				"description": "New content of the message. Must be one of the following types: inputMessageAnimation, inputMessageAudio, inputMessageDocument, inputMessagePhoto or inputMessageVideo"
			}
		],
		"description": "Edits the media content of a message with a text, an animation, an audio, a document, a photo or a video in a message sent on behalf of a business account; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "businessMessage",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editBusinessMessageCaption",
		"methods": [
			{
				"name": "business_connection_id",
				"type": "string",
				"description": "Unique identifier of business connection on behalf of which the message was sent"
			},
			{
				"name": "chat_id",
				"type": "int53",
				"description": "The chat the message belongs to"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The new message reply markup; pass null if none"
			},
			{
				"name": "caption",
				"type": "formattedText",
				"description": "New message content caption; pass null to remove caption; 0-getOption(\"message_caption_length_max\") characters"
			},
			{
				"name": "show_caption_above_media",
				"type": "Bool",
				"description": "Pass true to show the caption above the media; otherwise, the caption will be shown below the media. May be true only for animation, photo, and video messages"
			}
		],
		"description": "Edits the caption of a message sent on behalf of a business account; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "businessMessage",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editBusinessMessageReplyMarkup",
		"methods": [
			{
				"name": "business_connection_id",
				"type": "string",
				"description": "Unique identifier of business connection on behalf of which the message was sent"
			},
			{
				"name": "chat_id",
				"type": "int53",
				"description": "The chat the message belongs to"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The new message reply markup; pass null if none"
			}
		],
		"description": "Edits the reply markup of a message sent on behalf of a business account; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "businessMessage",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "stopBusinessPoll",
		"methods": [
			{
				"name": "business_connection_id",
				"type": "string",
				"description": "Unique identifier of business connection on behalf of which the message with the poll was sent"
			},
			{
				"name": "chat_id",
				"type": "int53",
				"description": "The chat the message belongs to"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message containing the poll"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The new message reply markup; pass null if none"
			}
		],
		"description": "Stops a poll sent on behalf of a business account; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "businessMessage",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setBusinessMessageIsPinned",
		"methods": [
			{
				"name": "business_connection_id",
				"type": "string",
				"description": "Unique identifier of business connection on behalf of which the message was sent"
			},
			{
				"name": "chat_id",
				"type": "int53",
				"description": "The chat the message belongs to"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "Pass true to pin the message, pass false to unpin it"
			}
		],
		"description": "Pins or unpins a message sent on behalf of a business account; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "checkQuickReplyShortcutName",
		"methods": [
			{
				"name": "name",
				"type": "string",
				"description": "The name of the shortcut; 1-32 characters"
			}
		],
		"description": "Checks validness of a name for a quick reply shortcut. Can be called synchronously",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": true
	},
	{
		"name": "loadQuickReplyShortcuts",
		"methods": null,
		"description": "Loads quick reply shortcuts created by the current user. The loaded data will be sent through updateQuickReplyShortcut and updateQuickReplyShortcuts",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setQuickReplyShortcutName",
		"methods": [
			{
				"name": "shortcut_id",
				"type": "int32",
				"description": "Unique identifier of the quick reply shortcut"
			},
			{
				"name": "name",
				"type": "string",
				"description": "New name for the shortcut. Use checkQuickReplyShortcutName to check its validness"
			}
		],
		"description": "Changes name of a quick reply shortcut",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteQuickReplyShortcut",
		"methods": [
			{
				"name": "shortcut_id",
				"type": "int32",
				"description": "Unique identifier of the quick reply shortcut"
			}
		],
		"description": "Deletes a quick reply shortcut",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "reorderQuickReplyShortcuts",
		"methods": [
			{
				"name": "shortcut_ids",
				"type": "vector<int32>",
				"description": "The new order of quick reply shortcuts"
			}
		],
		"description": "Changes the order of quick reply shortcuts",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "loadQuickReplyShortcutMessages",
		"methods": [
			{
				"name": "shortcut_id",
				"type": "int32",
				"description": "Unique identifier of the quick reply shortcut"
			}
		],
		"description": "Loads quick reply messages that can be sent by a given quick reply shortcut. The loaded messages will be sent through updateQuickReplyShortcutMessages",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteQuickReplyShortcutMessages",
		"methods": [
			{
				"name": "shortcut_id",
				"type": "int32",
				"description": "Unique identifier of the quick reply shortcut to which the messages belong"
			},
			{
				"name": "message_ids",
				"type": "vector<int53>",
				"description": "Unique identifiers of the messages"
			}
		],
		"description": "Deletes specified quick reply messages",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "addQuickReplyShortcutMessage",
		"methods": [
			{
				"name": "shortcut_name",
				"type": "string",
				"description": "Name of the target shortcut"
			},
			{
				"name": "reply_to_message_id",
				"type": "int53",
				"description": "Identifier of a quick reply message in the same shortcut to be replied; pass 0 if none"
			},
			{
				"name": "input_message_content",
				"type": "InputMessageContent",
				"description": "The content of the message to be added; inputMessagePoll, inputMessageForwarded and inputMessageLocation with live_period aren't supported"
			}
		],
		"description": "Adds a message to a quick reply shortcut. If shortcut doesn't exist and there are less than getOption(\"quick_reply_shortcut_count_max\") shortcuts, then a new shortcut is created. The shortcut must not contain more than getOption(\"quick_reply_shortcut_message_count_max\") messages after adding the new message. Returns the added message",
		"inheritance": "TLBaseClass",
		"return_type": "quickReplyMessage",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "addQuickReplyShortcutInlineQueryResultMessage",
		"methods": [
			{
				"name": "shortcut_name",
				"type": "string",
				"description": "Name of the target shortcut"
			},
			{
				"name": "reply_to_message_id",
				"type": "int53",
				"description": "Identifier of a quick reply message in the same shortcut to be replied; pass 0 if none"
			},
			{
				"name": "query_id",
				"type": "int64",
				"description": "Identifier of the inline query"
			},
			{
				"name": "result_id",
				"type": "string",
				"description": "Identifier of the inline query result"
			},
			{
				"name": "hide_via_bot",
				"type": "Bool",
				"description": "Pass true to hide the bot, via which the message is sent. Can be used only for bots getOption(\"animation_search_bot_username\"), getOption(\"photo_search_bot_username\"), and getOption(\"venue_search_bot_username\")"
			}
		],
		"description": "Adds a message to a quick reply shortcut via inline bot. If shortcut doesn't exist and there are less than getOption(\"quick_reply_shortcut_count_max\") shortcuts, then a new shortcut is created. The shortcut must not contain more than getOption(\"quick_reply_shortcut_message_count_max\") messages after adding the new message. Returns the added message",
		"inheritance": "TLBaseClass",
		"return_type": "quickReplyMessage",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "addQuickReplyShortcutMessageAlbum",
		"methods": [
			{
				"name": "shortcut_name",
				"type": "string",
				"description": "Name of the target shortcut"
			},
			{
				"name": "reply_to_message_id",
				"type": "int53",
				"description": "Identifier of a quick reply message in the same shortcut to be replied; pass 0 if none"
			},
			{
				"name": "input_message_contents",
				"type": "vector<InputMessageContent>",
				"description": "Contents of messages to be sent. At most 10 messages can be added to an album. All messages must have the same value of show_caption_above_media"
			}
		],
		"description": "Adds 2-10 messages grouped together into an album to a quick reply shortcut. Currently, only audio, document, photo and video messages can be grouped into an album. Documents and audio files can be only grouped in an album with messages of the same type. Returns sent messages",
		"inheritance": "TLBaseClass",
		"return_type": "quickReplyMessages",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "readdQuickReplyShortcutMessages",
		"methods": [
			{
				"name": "shortcut_name",
				"type": "string",
				"description": "Name of the target shortcut"
			},
			{
				"name": "message_ids",
				"type": "vector<int53>",
				"description": "Identifiers of the quick reply messages to readd. Message identifiers must be in a strictly increasing order"
			}
		],
		"description": "Readds quick reply messages which failed to add. Can be called only for messages for which messageSendingStateFailed.can_retry is true and after specified in messageSendingStateFailed.retry_after time passed. If a message is readded, the corresponding failed to send message is deleted. Returns the sent messages in the same order as the message identifiers passed in message_ids. If a message can't be readded, null will be returned instead of the message",
		"inheritance": "TLBaseClass",
		"return_type": "quickReplyMessages",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editQuickReplyMessage",
		"methods": [
			{
				"name": "shortcut_id",
				"type": "int32",
				"description": "Unique identifier of the quick reply shortcut with the message"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message"
			},
			{
				"name": "input_message_content",
				"type": "InputMessageContent",
				"description": "New content of the message. Must be one of the following types: inputMessageText, inputMessageAnimation, inputMessageAudio, inputMessageDocument, inputMessagePhoto or inputMessageVideo"
			}
		],
		"description": "Asynchronously edits the text, media or caption of a quick reply message. Use quickReplyMessage.can_be_edited to check whether a message can be edited. Media message can be edited only to a media message. The type of message content in an album can't be changed with exception of replacing a photo with a video or vice versa",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getForumTopicDefaultIcons",
		"methods": null,
		"description": "Returns the list of custom emoji, which can be used as forum topic icon by all users",
		"inheritance": "TLBaseClass",
		"return_type": "stickers",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "createForumTopic",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat"
			},
			{
				"name": "name",
				"type": "string",
				"description": "Name of the topic; 1-128 characters"
			},
			{
				"name": "icon",
				"type": "forumTopicIcon",
				"description": "Icon of the topic. Icon color must be one of 0x6FB9F0, 0xFFD67E, 0xCB86DB, 0x8EEE98, 0xFF93B2, or 0xFB6F5F. Telegram Premium users can use any custom emoji as topic icon, other users can use only a custom emoji returned by getForumTopicDefaultIcons"
			}
		],
		"description": "Creates a topic in a forum supergroup chat; requires can_manage_topics administrator or can_create_topics member right in the supergroup",
		"inheritance": "TLBaseClass",
		"return_type": "forumTopicInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editForumTopic",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat"
			},
			{
				"name": "message_thread_id",
				"type": "int53",
				"description": "Message thread identifier of the forum topic"
			},
			{
				"name": "name",
				"type": "string",
				"description": "New name of the topic; 0-128 characters. If empty, the previous topic name is kept"
			},
			{
				"name": "edit_icon_custom_emoji",
				"type": "Bool",
				"description": "Pass true to edit the icon of the topic. Icon of the General topic can't be edited"
			},
			{
				"name": "icon_custom_emoji_id",
				"type": "int64",
				"description": "Identifier of the new custom emoji for topic icon; pass 0 to remove the custom emoji. Ignored if edit_icon_custom_emoji is false. Telegram Premium users can use any custom emoji, other users can use only a custom emoji returned by getForumTopicDefaultIcons"
			}
		],
		"description": "Edits title and icon of a topic in a forum supergroup chat; requires can_manage_topics right in the supergroup unless the user is creator of the topic",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getForumTopic",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat"
			},
			{
				"name": "message_thread_id",
				"type": "int53",
				"description": "Message thread identifier of the forum topic"
			}
		],
		"description": "Returns information about a forum topic",
		"inheritance": "TLBaseClass",
		"return_type": "forumTopic",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getForumTopicLink",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat"
			},
			{
				"name": "message_thread_id",
				"type": "int53",
				"description": "Message thread identifier of the forum topic"
			}
		],
		"description": "Returns an HTTPS link to a topic in a forum chat. This is an offline method",
		"inheritance": "TLBaseClass",
		"return_type": "messageLink",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getForumTopics",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the forum chat"
			},
			{
				"name": "query",
				"type": "string",
				"description": "Query to search for in the forum topic's name"
			},
			{
				"name": "offset_date",
				"type": "int32",
				"description": "The date starting from which the results need to be fetched. Use 0 or any date in the future to get results from the last topic"
			},
			{
				"name": "offset_message_id",
				"type": "int53",
				"description": "The message identifier of the last message in the last found topic, or 0 for the first request"
			},
			{
				"name": "offset_message_thread_id",
				"type": "int53",
				"description": "The message thread identifier of the last found topic, or 0 for the first request"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of forum topics to be returned; up to 100. For optimal performance, the number of returned forum topics is chosen by TDLib and can be smaller than the specified limit"
			}
		],
		"description": "Returns found forum topics in a forum chat. This is a temporary method for getting information about topic list from the server",
		"inheritance": "TLBaseClass",
		"return_type": "forumTopics",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setForumTopicNotificationSettings",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_thread_id",
				"type": "int53",
				"description": "Message thread identifier of the forum topic"
			},
			{
				"name": "notification_settings",
				"type": "chatNotificationSettings",
				"description": "New notification settings for the forum topic. If the topic is muted for more than 366 days, it is considered to be muted forever"
			}
		],
		"description": "Changes the notification settings of a forum topic",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleForumTopicIsClosed",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat"
			},
			{
				"name": "message_thread_id",
				"type": "int53",
				"description": "Message thread identifier of the forum topic"
			},
			{
				"name": "is_closed",
				"type": "Bool",
				"description": "Pass true to close the topic; pass false to reopen it"
			}
		],
		"description": "Toggles whether a topic is closed in a forum supergroup chat; requires can_manage_topics right in the supergroup unless the user is creator of the topic",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleGeneralForumTopicIsHidden",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat"
			},
			{
				"name": "is_hidden",
				"type": "Bool",
				"description": "Pass true to hide and close the General topic; pass false to unhide it"
			}
		],
		"description": "Toggles whether a General topic is hidden in a forum supergroup chat; requires can_manage_topics right in the supergroup",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleForumTopicIsPinned",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_thread_id",
				"type": "int53",
				"description": "Message thread identifier of the forum topic"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "Pass true to pin the topic; pass false to unpin it"
			}
		],
		"description": "Changes the pinned state of a forum topic; requires can_manage_topics right in the supergroup. There can be up to getOption(\"pinned_forum_topic_count_max\") pinned forum topics",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setPinnedForumTopics",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_thread_ids",
				"type": "vector<int53>",
				"description": "The new list of pinned forum topics"
			}
		],
		"description": "Changes the order of pinned forum topics; requires can_manage_topics right in the supergroup",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteForumTopic",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat"
			},
			{
				"name": "message_thread_id",
				"type": "int53",
				"description": "Message thread identifier of the forum topic"
			}
		],
		"description": "Deletes all messages in a forum topic; requires can_delete_messages administrator right in the supergroup unless the user is creator of the topic, the topic has no messages from other users and has at most 11 messages",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getEmojiReaction",
		"methods": [
			{
				"name": "emoji",
				"type": "string",
				"description": "Text representation of the reaction"
			}
		],
		"description": "Returns information about an emoji reaction. Returns a 404 error if the reaction is not found",
		"inheritance": "TLBaseClass",
		"return_type": "emojiReaction",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getCustomEmojiReactionAnimations",
		"methods": null,
		"description": "Returns TGS stickers with generic animations for custom emoji reactions",
		"inheritance": "TLBaseClass",
		"return_type": "stickers",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getMessageAvailableReactions",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat to which the message belongs"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message"
			},
			{
				"name": "row_size",
				"type": "int32",
				"description": "Number of reaction per row, 5-25"
			}
		],
		"description": "Returns reactions, which can be added to a message. The list can change after updateActiveEmojiReactions, updateChatAvailableReactions for the chat, or updateMessageInteractionInfo for the message",
		"inheritance": "TLBaseClass",
		"return_type": "availableReactions",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "clearRecentReactions",
		"methods": null,
		"description": "Clears the list of recently used reactions",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "addMessageReaction",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat to which the message belongs"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message"
			},
			{
				"name": "reaction_type",
				"type": "ReactionType",
				"description": "Type of the reaction to add. Use addPendingPaidMessageReaction instead to add the paid reaction"
			},
			{
				"name": "is_big",
				"type": "Bool",
				"description": "Pass true if the reaction is added with a big animation"
			},
			{
				"name": "update_recent_reactions",
				"type": "Bool",
				"description": "Pass true if the reaction needs to be added to recent reactions; tags are never added to the list of recent reactions"
			}
		],
		"description": "Adds a reaction or a tag to a message. Use getMessageAvailableReactions to receive the list of available reactions for the message",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "removeMessageReaction",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat to which the message belongs"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message"
			},
			{
				"name": "reaction_type",
				"type": "ReactionType",
				"description": "Type of the reaction to remove. The paid reaction can't be removed"
			}
		],
		"description": "Removes a reaction from a message. A chosen reaction can always be removed",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatAvailablePaidMessageReactionSenders",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			}
		],
		"description": "Returns the list of message sender identifiers, which can be used to send a paid reaction in a chat",
		"inheritance": "TLBaseClass",
		"return_type": "messageSenders",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "addPendingPaidMessageReaction",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat to which the message belongs"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message"
			},
			{
				"name": "star_count",
				"type": "int53",
				"description": "Number of Telegram Stars to be used for the reaction. The total number of pending paid reactions must not exceed getOption(\"paid_reaction_star_count_max\")"
			},
			{
				"name": "type",
				"type": "PaidReactionType",
				"description": "Type of the paid reaction; pass null if the user didn't choose reaction type explicitly, for example, the reaction is set from the message bubble"
			}
		],
		"description": "Adds the paid message reaction to a message. Use getMessageAvailableReactions to check whether the reaction is available for the message",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "commitPendingPaidMessageReactions",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat to which the message belongs"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message"
			}
		],
		"description": "Applies all pending paid reactions on a message",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "removePendingPaidMessageReactions",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat to which the message belongs"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message"
			}
		],
		"description": "Removes all pending paid reactions on a message",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setPaidMessageReactionType",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat to which the message belongs"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message"
			},
			{
				"name": "type",
				"type": "PaidReactionType",
				"description": "New type of the paid reaction"
			}
		],
		"description": "Changes type of paid message reaction of the current user on a message. The message must have paid reaction added by the current user",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setMessageReactions",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat to which the message belongs"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message"
			},
			{
				"name": "reaction_types",
				"type": "vector<ReactionType>",
				"description": "Types of the reaction to set; pass an empty list to remove the reactions"
			},
			{
				"name": "is_big",
				"type": "Bool",
				"description": "Pass true if the reactions are added with a big animation"
			}
		],
		"description": "Sets reactions on a message; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getMessageAddedReactions",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat to which the message belongs"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message. Use message.interaction_info.reactions.can_get_added_reactions to check whether added reactions can be received for the message"
			},
			{
				"name": "reaction_type",
				"type": "ReactionType",
				"description": "Type of the reactions to return; pass null to return all added reactions; reactionTypePaid isn't supported"
			},
			{
				"name": "offset",
				"type": "string",
				"description": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of reactions to be returned; must be positive and can't be greater than 100"
			}
		],
		"description": "Returns reactions added for a message, along with their sender",
		"inheritance": "TLBaseClass",
		"return_type": "addedReactions",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setDefaultReactionType",
		"methods": [
			{
				"name": "reaction_type",
				"type": "ReactionType",
				"description": "New type of the default reaction. The paid reaction can't be set as default"
			}
		],
		"description": "Changes type of default reaction for the current user",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getSavedMessagesTags",
		"methods": [
			{
				"name": "saved_messages_topic_id",
				"type": "int53",
				"description": "Identifier of Saved Messages topic which tags will be returned; pass 0 to get all Saved Messages tags"
			}
		],
		"description": "Returns tags used in Saved Messages or a Saved Messages topic",
		"inheritance": "TLBaseClass",
		"return_type": "savedMessagesTags",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setSavedMessagesTagLabel",
		"methods": [
			{
				"name": "tag",
				"type": "ReactionType",
				"description": "The tag which label will be changed"
			},
			{
				"name": "label",
				"type": "string",
				"description": "New label for the tag; 0-12 characters"
			}
		],
		"description": "Changes label of a Saved Messages tag; for Telegram Premium users only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getMessageEffect",
		"methods": [
			{
				"name": "effect_id",
				"type": "int64",
				"description": "Unique identifier of the effect"
			}
		],
		"description": "Returns information about a message effect. Returns a 404 error if the effect is not found",
		"inheritance": "TLBaseClass",
		"return_type": "messageEffect",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchQuote",
		"methods": [
			{
				"name": "text",
				"type": "formattedText",
				"description": "Text in which to search for the quote"
			},
			{
				"name": "quote",
				"type": "formattedText",
				"description": "Quote to search for"
			},
			{
				"name": "quote_position",
				"type": "int32",
				"description": "Approximate quote position in UTF-16 code units"
			}
		],
		"description": "Searches for a given quote in a text. Returns found quote start position in UTF-16 code units. Returns a 404 error if the quote is not found. Can be called synchronously",
		"inheritance": "TLBaseClass",
		"return_type": "foundPosition",
		"isFunction": true,
		"isSynchronous": true
	},
	{
		"name": "getTextEntities",
		"methods": [
			{
				"name": "text",
				"type": "string",
				"description": "The text in which to look for entities"
			}
		],
		"description": "Returns all entities (mentions, hashtags, cashtags, bot commands, bank card numbers, URLs, and email addresses) found in the text. Can be called synchronously",
		"inheritance": "TLBaseClass",
		"return_type": "textEntities",
		"isFunction": true,
		"isSynchronous": true
	},
	{
		"name": "parseTextEntities",
		"methods": [
			{
				"name": "text",
				"type": "string",
				"description": "The text to parse"
			},
			{
				"name": "parse_mode",
				"type": "TextParseMode",
				"description": "Text parse mode"
			}
		],
		"description": "Parses Bold, Italic, Underline, Strikethrough, Spoiler, CustomEmoji, BlockQuote, ExpandableBlockQuote, Code, Pre, PreCode, TextUrl and MentionName entities from a marked-up text. Can be called synchronously",
		"inheritance": "TLBaseClass",
		"return_type": "formattedText",
		"isFunction": true,
		"isSynchronous": true
	},
	{
		"name": "parseMarkdown",
		"methods": [
			{
				"name": "text",
				"type": "formattedText",
				"description": "The text to parse. For example, \"__italic__ ~~strikethrough~~ ||spoiler|| **bold** `code` ```pre``` __[italic__ text_url](telegram.org) __italic**bold italic__bold**\""
			}
		],
		"description": "Parses Markdown entities in a human-friendly format, ignoring markup errors. Can be called synchronously",
		"inheritance": "TLBaseClass",
		"return_type": "formattedText",
		"isFunction": true,
		"isSynchronous": true
	},
	{
		"name": "getMarkdownText",
		"methods": [
			{
				"name": "text",
				"type": "formattedText",
				"description": "The text"
			}
		],
		"description": "Replaces text entities with Markdown formatting in a human-friendly format. Entities that can't be represented in Markdown unambiguously are kept as is. Can be called synchronously",
		"inheritance": "TLBaseClass",
		"return_type": "formattedText",
		"isFunction": true,
		"isSynchronous": true
	},
	{
		"name": "getCountryFlagEmoji",
		"methods": [
			{
				"name": "country_code",
				"type": "string",
				"description": "A two-letter ISO 3166-1 alpha-2 country code as received from getCountries"
			}
		],
		"description": "Returns an emoji for the given country. Returns an empty string on failure. Can be called synchronously",
		"inheritance": "TLBaseClass",
		"return_type": "text",
		"isFunction": true,
		"isSynchronous": true
	},
	{
		"name": "getFileMimeType",
		"methods": [
			{
				"name": "file_name",
				"type": "string",
				"description": "The name of the file or path to the file"
			}
		],
		"description": "Returns the MIME type of a file, guessed by its extension. Returns an empty string on failure. Can be called synchronously",
		"inheritance": "TLBaseClass",
		"return_type": "text",
		"isFunction": true,
		"isSynchronous": true
	},
	{
		"name": "getFileExtension",
		"methods": [
			{
				"name": "mime_type",
				"type": "string",
				"description": "The MIME type of the file"
			}
		],
		"description": "Returns the extension of a file, guessed by its MIME type. Returns an empty string on failure. Can be called synchronously",
		"inheritance": "TLBaseClass",
		"return_type": "text",
		"isFunction": true,
		"isSynchronous": true
	},
	{
		"name": "cleanFileName",
		"methods": [
			{
				"name": "file_name",
				"type": "string",
				"description": "File name or path to the file"
			}
		],
		"description": "Removes potentially dangerous characters from the name of a file. Returns an empty string on failure. Can be called synchronously",
		"inheritance": "TLBaseClass",
		"return_type": "text",
		"isFunction": true,
		"isSynchronous": true
	},
	{
		"name": "getLanguagePackString",
		"methods": [
			{
				"name": "language_pack_database_path",
				"type": "string",
				"description": "Path to the language pack database in which strings are stored"
			},
			{
				"name": "localization_target",
				"type": "string",
				"description": "Localization target to which the language pack belongs"
			},
			{
				"name": "language_pack_id",
				"type": "string",
				"description": "Language pack identifier"
			},
			{
				"name": "key",
				"type": "string",
				"description": "Language pack key of the string to be returned"
			}
		],
		"description": "Returns a string stored in the local database from the specified localization target and language pack by its key. Returns a 404 error if the string is not found. Can be called synchronously",
		"inheritance": "TLBaseClass",
		"return_type": "LanguagePackStringValue",
		"isFunction": true,
		"isSynchronous": true
	},
	{
		"name": "getJsonValue",
		"methods": [
			{
				"name": "json",
				"type": "string",
				"description": "The JSON-serialized string"
			}
		],
		"description": "Converts a JSON-serialized string to corresponding JsonValue object. Can be called synchronously",
		"inheritance": "TLBaseClass",
		"return_type": "JsonValue",
		"isFunction": true,
		"isSynchronous": true
	},
	{
		"name": "getJsonString",
		"methods": [
			{
				"name": "json_value",
				"type": "JsonValue",
				"description": "The JsonValue object"
			}
		],
		"description": "Converts a JsonValue object to corresponding JSON-serialized string. Can be called synchronously",
		"inheritance": "TLBaseClass",
		"return_type": "text",
		"isFunction": true,
		"isSynchronous": true
	},
	{
		"name": "getThemeParametersJsonString",
		"methods": [
			{
				"name": "theme",
				"type": "themeParameters",
				"description": "Theme parameters to convert to JSON"
			}
		],
		"description": "Converts a themeParameters object to corresponding JSON-serialized string. Can be called synchronously",
		"inheritance": "TLBaseClass",
		"return_type": "text",
		"isFunction": true,
		"isSynchronous": true
	},
	{
		"name": "setPollAnswer",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat to which the poll belongs"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message containing the poll"
			},
			{
				"name": "option_ids",
				"type": "vector<int32>",
				"description": "0-based identifiers of answer options, chosen by the user. User can choose more than 1 answer option only is the poll allows multiple answers"
			}
		],
		"description": "Changes the user answer to a poll. A poll in quiz mode can be answered only once",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getPollVoters",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat to which the poll belongs"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message containing the poll"
			},
			{
				"name": "option_id",
				"type": "int32",
				"description": "0-based identifier of the answer option"
			},
			{
				"name": "offset",
				"type": "int32",
				"description": "Number of voters to skip in the result; must be non-negative"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of voters to be returned; must be positive and can't be greater than 50. For optimal performance, the number of returned voters is chosen by TDLib and can be smaller than the specified limit, even if the end of the voter list has not been reached"
			}
		],
		"description": "Returns message senders voted for the specified option in a non-anonymous polls. For optimal performance, the number of returned users is chosen by TDLib",
		"inheritance": "TLBaseClass",
		"return_type": "messageSenders",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "stopPoll",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat to which the poll belongs"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message containing the poll. Use messageProperties.can_be_edited to check whether the poll can be stopped"
			},
			{
				"name": "reply_markup",
				"type": "ReplyMarkup",
				"description": "The new message reply markup; pass null if none; for bots only"
			}
		],
		"description": "Stops a poll",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "hideSuggestedAction",
		"methods": [
			{
				"name": "action",
				"type": "SuggestedAction",
				"description": "Suggested action to hide"
			}
		],
		"description": "Hides a suggested action",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "hideContactCloseBirthdays",
		"methods": null,
		"description": "Hides the list of contacts that have close birthdays for 24 hours",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getBusinessConnection",
		"methods": [
			{
				"name": "connection_id",
				"type": "string",
				"description": "Identifier of the business connection to return"
			}
		],
		"description": "Returns information about a business connection by its identifier; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "businessConnection",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getLoginUrlInfo",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier of the message with the button"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Message identifier of the message with the button. The message must not be scheduled"
			},
			{
				"name": "button_id",
				"type": "int53",
				"description": "Button identifier"
			}
		],
		"description": "Returns information about a button of type inlineKeyboardButtonTypeLoginUrl. The method needs to be called when the user presses the button",
		"inheritance": "TLBaseClass",
		"return_type": "LoginUrlInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getLoginUrl",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier of the message with the button"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Message identifier of the message with the button"
			},
			{
				"name": "button_id",
				"type": "int53",
				"description": "Button identifier"
			},
			{
				"name": "allow_write_access",
				"type": "Bool",
				"description": "Pass true to allow the bot to send messages to the current user"
			}
		],
		"description": "Returns an HTTP URL which can be used to automatically authorize the user on a website after clicking an inline button of type inlineKeyboardButtonTypeLoginUrl. Use the method getLoginUrlInfo to find whether a prior user confirmation is needed. If an error is returned, then the button must be handled as an ordinary URL button",
		"inheritance": "TLBaseClass",
		"return_type": "httpUrl",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "shareUsersWithBot",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat with the bot"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message with the button"
			},
			{
				"name": "button_id",
				"type": "int32",
				"description": "Identifier of the button"
			},
			{
				"name": "shared_user_ids",
				"type": "vector<int53>",
				"description": "Identifiers of the shared users"
			},
			{
				"name": "only_check",
				"type": "Bool",
				"description": "Pass true to check that the users can be shared by the button instead of actually sharing them"
			}
		],
		"description": "Shares users after pressing a keyboardButtonTypeRequestUsers button with the bot",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "shareChatWithBot",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat with the bot"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message with the button"
			},
			{
				"name": "button_id",
				"type": "int32",
				"description": "Identifier of the button"
			},
			{
				"name": "shared_chat_id",
				"type": "int53",
				"description": "Identifier of the shared chat"
			},
			{
				"name": "only_check",
				"type": "Bool",
				"description": "Pass true to check that the chat can be shared by the button instead of actually sharing it. Doesn't check bot_is_member and bot_administrator_rights restrictions. If the bot must be a member, then all chats from getGroupsInCommon and all chats, where the user can add the bot, are suitable. In the latter case the bot will be automatically added to the chat. If the bot must be an administrator, then all chats, where the bot already has requested rights or can be added to administrators by the user, are suitable. In the latter case the bot will be automatically granted requested rights"
			}
		],
		"description": "Shares a chat after pressing a keyboardButtonTypeRequestChat button with the bot",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getInlineQueryResults",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the target bot"
			},
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat where the query was sent"
			},
			{
				"name": "user_location",
				"type": "location",
				"description": "Location of the user; pass null if unknown or the bot doesn't need user's location"
			},
			{
				"name": "query",
				"type": "string",
				"description": "Text of the query"
			},
			{
				"name": "offset",
				"type": "string",
				"description": "Offset of the first entry to return; use empty string to get the first chunk of results"
			}
		],
		"description": "Sends an inline query to a bot and returns its results. Returns an error with code 502 if the bot fails to answer the query before the query timeout expires",
		"inheritance": "TLBaseClass",
		"return_type": "inlineQueryResults",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "answerInlineQuery",
		"methods": [
			{
				"name": "inline_query_id",
				"type": "int64",
				"description": "Identifier of the inline query"
			},
			{
				"name": "is_personal",
				"type": "Bool",
				"description": "Pass true if results may be cached and returned only for the user that sent the query. By default, results may be returned to any user who sends the same query"
			},
			{
				"name": "button",
				"type": "inlineQueryResultsButton",
				"description": "Button to be shown above inline query results; pass null if none"
			},
			{
				"name": "results",
				"type": "vector<InputInlineQueryResult>",
				"description": "The results of the query"
			},
			{
				"name": "cache_time",
				"type": "int32",
				"description": "Allowed time to cache the results of the query, in seconds"
			},
			{
				"name": "next_offset",
				"type": "string",
				"description": "Offset for the next inline query; pass an empty string if there are no more results"
			}
		],
		"description": "Sets the result of an inline query; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "savePreparedInlineMessage",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user"
			},
			{
				"name": "result",
				"type": "InputInlineQueryResult",
				"description": "The description of the message"
			},
			{
				"name": "chat_types",
				"type": "targetChatTypes",
				"description": "Types of the chats to which the message can be sent"
			}
		],
		"description": "Saves an inline message to be sent by the given user; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "preparedInlineMessageId",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getPreparedInlineMessage",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the bot that created the message"
			},
			{
				"name": "prepared_message_id",
				"type": "string",
				"description": "Identifier of the prepared message"
			}
		],
		"description": "Saves an inline message to be sent by the given user",
		"inheritance": "TLBaseClass",
		"return_type": "preparedInlineMessage",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getGrossingWebAppBots",
		"methods": [
			{
				"name": "offset",
				"type": "string",
				"description": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of bots to be returned; up to 100"
			}
		],
		"description": "Returns the most grossing Web App bots",
		"inheritance": "TLBaseClass",
		"return_type": "foundUsers",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchWebApp",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the target bot"
			},
			{
				"name": "web_app_short_name",
				"type": "string",
				"description": "Short name of the Web App"
			}
		],
		"description": "Returns information about a Web App by its short name. Returns a 404 error if the Web App is not found",
		"inheritance": "TLBaseClass",
		"return_type": "foundWebApp",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getWebAppPlaceholder",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the target bot"
			}
		],
		"description": "Returns a default placeholder for Web Apps of a bot. This is an offline method. Returns a 404 error if the placeholder isn't known",
		"inheritance": "TLBaseClass",
		"return_type": "outline",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getWebAppLinkUrl",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat in which the link was clicked; pass 0 if none"
			},
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the target bot"
			},
			{
				"name": "web_app_short_name",
				"type": "string",
				"description": "Short name of the Web App"
			},
			{
				"name": "start_parameter",
				"type": "string",
				"description": "Start parameter from internalLinkTypeWebApp"
			},
			{
				"name": "allow_write_access",
				"type": "Bool",
				"description": "Pass true if the current user allowed the bot to send them messages"
			},
			{
				"name": "parameters",
				"type": "webAppOpenParameters",
				"description": "Parameters to use to open the Web App"
			}
		],
		"description": "Returns an HTTPS URL of a Web App to open after a link of the type internalLinkTypeWebApp is clicked",
		"inheritance": "TLBaseClass",
		"return_type": "httpUrl",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getMainWebApp",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat in which the Web App is opened; pass 0 if none"
			},
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the target bot. If the bot is restricted for the current user, then show an error instead of calling the method"
			},
			{
				"name": "start_parameter",
				"type": "string",
				"description": "Start parameter from internalLinkTypeMainWebApp"
			},
			{
				"name": "parameters",
				"type": "webAppOpenParameters",
				"description": "Parameters to use to open the Web App"
			}
		],
		"description": "Returns information needed to open the main Web App of a bot",
		"inheritance": "TLBaseClass",
		"return_type": "mainWebApp",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getWebAppUrl",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the target bot. If the bot is restricted for the current user, then show an error instead of calling the method"
			},
			{
				"name": "url",
				"type": "string",
				"description": "The URL from a keyboardButtonTypeWebApp button, inlineQueryResultsButtonTypeWebApp button, or an empty string when the bot is opened from the side menu"
			},
			{
				"name": "parameters",
				"type": "webAppOpenParameters",
				"description": "Parameters to use to open the Web App"
			}
		],
		"description": "Returns an HTTPS URL of a Web App to open from the side menu, a keyboardButtonTypeWebApp button, or an inlineQueryResultsButtonTypeWebApp button",
		"inheritance": "TLBaseClass",
		"return_type": "httpUrl",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "sendWebAppData",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the target bot"
			},
			{
				"name": "button_text",
				"type": "string",
				"description": "Text of the keyboardButtonTypeWebApp button, which opened the Web App"
			},
			{
				"name": "data",
				"type": "string",
				"description": "The data"
			}
		],
		"description": "Sends data received from a keyboardButtonTypeWebApp Web App to a bot",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "openWebApp",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat in which the Web App is opened. The Web App can't be opened in secret chats"
			},
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the bot, providing the Web App. If the bot is restricted for the current user, then show an error instead of calling the method"
			},
			{
				"name": "url",
				"type": "string",
				"description": "The URL from an inlineKeyboardButtonTypeWebApp button, a botMenuButton button, an internalLinkTypeAttachmentMenuBot link, or an empty string otherwise"
			},
			{
				"name": "message_thread_id",
				"type": "int53",
				"description": "If not 0, the message thread identifier in which the message will be sent"
			},
			{
				"name": "reply_to",
				"type": "InputMessageReplyTo",
				"description": "Information about the message or story to be replied in the message sent by the Web App; pass null if none"
			},
			{
				"name": "parameters",
				"type": "webAppOpenParameters",
				"description": "Parameters to use to open the Web App"
			}
		],
		"description": "Informs TDLib that a Web App is being opened from the attachment menu, a botMenuButton button, an internalLinkTypeAttachmentMenuBot link, or an inlineKeyboardButtonTypeWebApp button. For each bot, a confirmation alert about data sent to the bot must be shown once",
		"inheritance": "TLBaseClass",
		"return_type": "webAppInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "closeWebApp",
		"methods": [
			{
				"name": "web_app_launch_id",
				"type": "int64",
				"description": "Identifier of Web App launch, received from openWebApp"
			}
		],
		"description": "Informs TDLib that a previously opened Web App was closed",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "answerWebAppQuery",
		"methods": [
			{
				"name": "web_app_query_id",
				"type": "string",
				"description": "Identifier of the Web App query"
			},
			{
				"name": "result",
				"type": "InputInlineQueryResult",
				"description": "The result of the query"
			}
		],
		"description": "Sets the result of interaction with a Web App and sends corresponding message on behalf of the user to the chat from which the query originated; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "sentWebAppMessage",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "checkWebAppFileDownload",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the bot, providing the Web App"
			},
			{
				"name": "file_name",
				"type": "string",
				"description": "Name of the file"
			},
			{
				"name": "url",
				"type": "string",
				"description": "URL of the file"
			}
		],
		"description": "Checks whether a file can be downloaded and saved locally by Web App request",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getCallbackQueryAnswer",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat with the message"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message from which the query originated. The message must not be scheduled"
			},
			{
				"name": "payload",
				"type": "CallbackQueryPayload",
				"description": "Query payload"
			}
		],
		"description": "Sends a callback query to a bot and returns an answer. Returns an error with code 502 if the bot fails to answer the query before the query timeout expires",
		"inheritance": "TLBaseClass",
		"return_type": "callbackQueryAnswer",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "answerCallbackQuery",
		"methods": [
			{
				"name": "callback_query_id",
				"type": "int64",
				"description": "Identifier of the callback query"
			},
			{
				"name": "text",
				"type": "string",
				"description": "Text of the answer"
			},
			{
				"name": "show_alert",
				"type": "Bool",
				"description": "Pass true to show an alert to the user instead of a toast notification"
			},
			{
				"name": "url",
				"type": "string",
				"description": "URL to be opened"
			},
			{
				"name": "cache_time",
				"type": "int32",
				"description": "Time during which the result of the query can be cached, in seconds"
			}
		],
		"description": "Sets the result of a callback query; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "answerShippingQuery",
		"methods": [
			{
				"name": "shipping_query_id",
				"type": "int64",
				"description": "Identifier of the shipping query"
			},
			{
				"name": "shipping_options",
				"type": "vector<shippingOption>",
				"description": "Available shipping options"
			},
			{
				"name": "error_message",
				"type": "string",
				"description": "An error message, empty on success"
			}
		],
		"description": "Sets the result of a shipping query; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "answerPreCheckoutQuery",
		"methods": [
			{
				"name": "pre_checkout_query_id",
				"type": "int64",
				"description": "Identifier of the pre-checkout query"
			},
			{
				"name": "error_message",
				"type": "string",
				"description": "An error message, empty on success"
			}
		],
		"description": "Sets the result of a pre-checkout query; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setGameScore",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "The chat to which the message with the game belongs"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message"
			},
			{
				"name": "edit_message",
				"type": "Bool",
				"description": "Pass true to edit the game message to include the current scoreboard"
			},
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			},
			{
				"name": "score",
				"type": "int32",
				"description": "The new score"
			},
			{
				"name": "force",
				"type": "Bool",
				"description": "Pass true to update the score even if it decreases. If the score is 0, the user will be deleted from the high score table"
			}
		],
		"description": "Updates the game score of the specified user in the game; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "message",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setInlineGameScore",
		"methods": [
			{
				"name": "inline_message_id",
				"type": "string",
				"description": "Inline message identifier"
			},
			{
				"name": "edit_message",
				"type": "Bool",
				"description": "Pass true to edit the game message to include the current scoreboard"
			},
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			},
			{
				"name": "score",
				"type": "int32",
				"description": "The new score"
			},
			{
				"name": "force",
				"type": "Bool",
				"description": "Pass true to update the score even if it decreases. If the score is 0, the user will be deleted from the high score table"
			}
		],
		"description": "Updates the game score of the specified user in a game; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getGameHighScores",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "The chat that contains the message with the game"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message"
			},
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			}
		],
		"description": "Returns the high scores for a game and some part of the high score table in the range of the specified user; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "gameHighScores",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getInlineGameHighScores",
		"methods": [
			{
				"name": "inline_message_id",
				"type": "string",
				"description": "Inline message identifier"
			},
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			}
		],
		"description": "Returns game high scores and some part of the high score table in the range of the specified user; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "gameHighScores",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteChatReplyMarkup",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "The message identifier of the used keyboard"
			}
		],
		"description": "Deletes the default reply markup from a chat. Must be called after a one-time keyboard or a replyMarkupForceReply reply markup has been used. An updateChatReplyMarkup update will be sent if the reply markup is changed",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "sendChatAction",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_thread_id",
				"type": "int53",
				"description": "If not 0, the message thread identifier in which the action was performed"
			},
			{
				"name": "business_connection_id",
				"type": "string",
				"description": "Unique identifier of business connection on behalf of which to send the request; for bots only"
			},
			{
				"name": "action",
				"type": "ChatAction",
				"description": "The action description; pass null to cancel the currently active action"
			}
		],
		"description": "Sends a notification about user activity in a chat",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "openChat",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			}
		],
		"description": "Informs TDLib that the chat is opened by the user. Many useful activities depend on the chat being opened or closed (e.g., in supergroups and channels all updates are received only for opened chats)",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "closeChat",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			}
		],
		"description": "Informs TDLib that the chat is closed by the user. Many useful activities depend on the chat being opened or closed",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "viewMessages",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_ids",
				"type": "vector<int53>",
				"description": "The identifiers of the messages being viewed"
			},
			{
				"name": "source",
				"type": "MessageSource",
				"description": "Source of the message view; pass null to guess the source based on chat open state"
			},
			{
				"name": "force_read",
				"type": "Bool",
				"description": "Pass true to mark as read the specified messages even the chat is closed"
			}
		],
		"description": "Informs TDLib that messages are being viewed by the user. Sponsored messages must be marked as viewed only when the entire text of the message is shown on the screen (excluding the button). Many useful activities depend on whether the messages are currently being viewed or not (e.g., marking messages as read, incrementing a view counter, updating a view counter, removing deleted messages in supergroups and channels)",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "openMessageContent",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier of the message"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the message with the opened content"
			}
		],
		"description": "Informs TDLib that the message content has been opened (e.g., the user has opened a photo, video, document, location or venue, or has listened to an audio file or voice note message). An updateMessageContentOpened update will be generated if something has changed",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "clickAnimatedEmojiMessage",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier of the message"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the clicked message"
			}
		],
		"description": "Informs TDLib that a message with an animated emoji was clicked by the user. Returns a big animated sticker to be played or a 404 error if usual animation needs to be played",
		"inheritance": "TLBaseClass",
		"return_type": "sticker",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getInternalLink",
		"methods": [
			{
				"name": "type",
				"type": "InternalLinkType",
				"description": "Expected type of the link"
			},
			{
				"name": "is_http",
				"type": "Bool",
				"description": "Pass true to create an HTTPS link (only available for some link types); pass false to create a tg: link"
			}
		],
		"description": "Returns an HTTPS or a tg: link with the given type. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "httpUrl",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getInternalLinkType",
		"methods": [
			{
				"name": "link",
				"type": "string",
				"description": "The link"
			}
		],
		"description": "Returns information about the type of internal link. Returns a 404 error if the link is not internal. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "InternalLinkType",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getExternalLinkInfo",
		"methods": [
			{
				"name": "link",
				"type": "string",
				"description": "The link"
			}
		],
		"description": "Returns information about an action to be done when the current user clicks an external link. Don't use this method for links from secret chats if link preview is disabled in secret chats",
		"inheritance": "TLBaseClass",
		"return_type": "LoginUrlInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getExternalLink",
		"methods": [
			{
				"name": "link",
				"type": "string",
				"description": "The HTTP link"
			},
			{
				"name": "allow_write_access",
				"type": "Bool",
				"description": "Pass true if the current user allowed the bot, returned in getExternalLinkInfo, to send them messages"
			}
		],
		"description": "Returns an HTTP URL which can be used to automatically authorize the current user on a website after clicking an HTTP link. Use the method getExternalLinkInfo to find whether a prior user confirmation is needed",
		"inheritance": "TLBaseClass",
		"return_type": "httpUrl",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "readAllChatMentions",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			}
		],
		"description": "Marks all mentions in a chat as read",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "readAllMessageThreadMentions",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_thread_id",
				"type": "int53",
				"description": "Message thread identifier in which mentions are marked as read"
			}
		],
		"description": "Marks all mentions in a forum topic as read",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "readAllChatReactions",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			}
		],
		"description": "Marks all reactions in a chat or a forum topic as read",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "readAllMessageThreadReactions",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_thread_id",
				"type": "int53",
				"description": "Message thread identifier in which reactions are marked as read"
			}
		],
		"description": "Marks all reactions in a forum topic as read",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "createPrivateChat",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			},
			{
				"name": "force",
				"type": "Bool",
				"description": "Pass true to create the chat without a network request. In this case all information about the chat except its type, title and photo can be incorrect"
			}
		],
		"description": "Returns an existing chat corresponding to a given user",
		"inheritance": "TLBaseClass",
		"return_type": "chat",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "createBasicGroupChat",
		"methods": [
			{
				"name": "basic_group_id",
				"type": "int53",
				"description": "Basic group identifier"
			},
			{
				"name": "force",
				"type": "Bool",
				"description": "Pass true to create the chat without a network request. In this case all information about the chat except its type, title and photo can be incorrect"
			}
		],
		"description": "Returns an existing chat corresponding to a known basic group",
		"inheritance": "TLBaseClass",
		"return_type": "chat",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "createSupergroupChat",
		"methods": [
			{
				"name": "supergroup_id",
				"type": "int53",
				"description": "Supergroup or channel identifier"
			},
			{
				"name": "force",
				"type": "Bool",
				"description": "Pass true to create the chat without a network request. In this case all information about the chat except its type, title and photo can be incorrect"
			}
		],
		"description": "Returns an existing chat corresponding to a known supergroup or channel",
		"inheritance": "TLBaseClass",
		"return_type": "chat",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "createSecretChat",
		"methods": [
			{
				"name": "secret_chat_id",
				"type": "int32",
				"description": "Secret chat identifier"
			}
		],
		"description": "Returns an existing chat corresponding to a known secret chat",
		"inheritance": "TLBaseClass",
		"return_type": "chat",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "createNewBasicGroupChat",
		"methods": [
			{
				"name": "user_ids",
				"type": "vector<int53>",
				"description": "Identifiers of users to be added to the basic group; may be empty to create a basic group without other members"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Title of the new basic group; 1-128 characters"
			},
			{
				"name": "message_auto_delete_time",
				"type": "int32",
				"description": "Message auto-delete time value, in seconds; must be from 0 up to 365 * 86400 and be divisible by 86400. If 0, then messages aren't deleted automatically"
			}
		],
		"description": "Creates a new basic group and sends a corresponding messageBasicGroupChatCreate. Returns information about the newly created chat",
		"inheritance": "TLBaseClass",
		"return_type": "createdBasicGroupChat",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "createNewSupergroupChat",
		"methods": [
			{
				"name": "title",
				"type": "string",
				"description": "Title of the new chat; 1-128 characters"
			},
			{
				"name": "is_forum",
				"type": "Bool",
				"description": "Pass true to create a forum supergroup chat"
			},
			{
				"name": "is_channel",
				"type": "Bool",
				"description": "Pass true to create a channel chat; ignored if a forum is created"
			},
			{
				"name": "description",
				"type": "string",
				"description": "Chat description; 0-255 characters"
			},
			{
				"name": "location",
				"type": "chatLocation",
				"description": "Chat location if a location-based supergroup is being created; pass null to create an ordinary supergroup chat"
			},
			{
				"name": "message_auto_delete_time",
				"type": "int32",
				"description": "Message auto-delete time value, in seconds; must be from 0 up to 365 * 86400 and be divisible by 86400. If 0, then messages aren't deleted automatically"
			},
			{
				"name": "for_import",
				"type": "Bool",
				"description": "Pass true to create a supergroup for importing messages using importMessages"
			}
		],
		"description": "Creates a new supergroup or channel and sends a corresponding messageSupergroupChatCreate. Returns the newly created chat",
		"inheritance": "TLBaseClass",
		"return_type": "chat",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "createNewSecretChat",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the target user"
			}
		],
		"description": "Creates a new secret chat. Returns the newly created chat",
		"inheritance": "TLBaseClass",
		"return_type": "chat",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "upgradeBasicGroupChatToSupergroupChat",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat to upgrade"
			}
		],
		"description": "Creates a new supergroup from an existing basic group and sends a corresponding messageChatUpgradeTo and messageChatUpgradeFrom; requires owner privileges. Deactivates the original basic group",
		"inheritance": "TLBaseClass",
		"return_type": "chat",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatListsToAddChat",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			}
		],
		"description": "Returns chat lists to which the chat can be added. This is an offline method",
		"inheritance": "TLBaseClass",
		"return_type": "chatLists",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "addChatToList",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "chat_list",
				"type": "ChatList",
				"description": "The chat list. Use getChatListsToAddChat to get suitable chat lists"
			}
		],
		"description": "Adds a chat to a chat list. A chat can't be simultaneously in Main and Archive chat lists, so it is automatically removed from another one if needed",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatFolder",
		"methods": [
			{
				"name": "chat_folder_id",
				"type": "int32",
				"description": "Chat folder identifier"
			}
		],
		"description": "Returns information about a chat folder by its identifier",
		"inheritance": "TLBaseClass",
		"return_type": "chatFolder",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "createChatFolder",
		"methods": [
			{
				"name": "folder",
				"type": "chatFolder",
				"description": "The new chat folder"
			}
		],
		"description": "Creates new chat folder. Returns information about the created chat folder. There can be up to getOption(\"chat_folder_count_max\") chat folders, but the limit can be increased with Telegram Premium",
		"inheritance": "TLBaseClass",
		"return_type": "chatFolderInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editChatFolder",
		"methods": [
			{
				"name": "chat_folder_id",
				"type": "int32",
				"description": "Chat folder identifier"
			},
			{
				"name": "folder",
				"type": "chatFolder",
				"description": "The edited chat folder"
			}
		],
		"description": "Edits existing chat folder. Returns information about the edited chat folder",
		"inheritance": "TLBaseClass",
		"return_type": "chatFolderInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteChatFolder",
		"methods": [
			{
				"name": "chat_folder_id",
				"type": "int32",
				"description": "Chat folder identifier"
			},
			{
				"name": "leave_chat_ids",
				"type": "vector<int53>",
				"description": "Identifiers of the chats to leave. The chats must be pinned or always included in the folder"
			}
		],
		"description": "Deletes existing chat folder",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatFolderChatsToLeave",
		"methods": [
			{
				"name": "chat_folder_id",
				"type": "int32",
				"description": "Chat folder identifier"
			}
		],
		"description": "Returns identifiers of pinned or always included chats from a chat folder, which are suggested to be left when the chat folder is deleted",
		"inheritance": "TLBaseClass",
		"return_type": "chats",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatFolderChatCount",
		"methods": [
			{
				"name": "folder",
				"type": "chatFolder",
				"description": "The new chat folder"
			}
		],
		"description": "Returns approximate number of chats in a being created chat folder. Main and archive chat lists must be fully preloaded for this function to work correctly",
		"inheritance": "TLBaseClass",
		"return_type": "count",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "reorderChatFolders",
		"methods": [
			{
				"name": "chat_folder_ids",
				"type": "vector<int32>",
				"description": "Identifiers of chat folders in the new correct order"
			},
			{
				"name": "main_chat_list_position",
				"type": "int32",
				"description": "Position of the main chat list among chat folders, 0-based. Can be non-zero only for Premium users"
			}
		],
		"description": "Changes the order of chat folders",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleChatFolderTags",
		"methods": [
			{
				"name": "are_tags_enabled",
				"type": "Bool",
				"description": "Pass true to enable folder tags; pass false to disable them"
			}
		],
		"description": "Toggles whether chat folder tags are enabled",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getRecommendedChatFolders",
		"methods": null,
		"description": "Returns recommended chat folders for the current user",
		"inheritance": "TLBaseClass",
		"return_type": "recommendedChatFolders",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatFolderDefaultIconName",
		"methods": [
			{
				"name": "folder",
				"type": "chatFolder",
				"description": "Chat folder"
			}
		],
		"description": "Returns default icon name for a folder. Can be called synchronously",
		"inheritance": "TLBaseClass",
		"return_type": "chatFolderIcon",
		"isFunction": true,
		"isSynchronous": true
	},
	{
		"name": "getChatsForChatFolderInviteLink",
		"methods": [
			{
				"name": "chat_folder_id",
				"type": "int32",
				"description": "Chat folder identifier"
			}
		],
		"description": "Returns identifiers of chats from a chat folder, suitable for adding to a chat folder invite link",
		"inheritance": "TLBaseClass",
		"return_type": "chats",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "createChatFolderInviteLink",
		"methods": [
			{
				"name": "chat_folder_id",
				"type": "int32",
				"description": "Chat folder identifier"
			},
			{
				"name": "name",
				"type": "string",
				"description": "Name of the link; 0-32 characters"
			},
			{
				"name": "chat_ids",
				"type": "vector<int53>",
				"description": "Identifiers of chats to be accessible by the invite link. Use getChatsForChatFolderInviteLink to get suitable chats. Basic groups will be automatically converted to supergroups before link creation"
			}
		],
		"description": "Creates a new invite link for a chat folder. A link can be created for a chat folder if it has only pinned and included chats",
		"inheritance": "TLBaseClass",
		"return_type": "chatFolderInviteLink",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatFolderInviteLinks",
		"methods": [
			{
				"name": "chat_folder_id",
				"type": "int32",
				"description": "Chat folder identifier"
			}
		],
		"description": "Returns invite links created by the current user for a shareable chat folder",
		"inheritance": "TLBaseClass",
		"return_type": "chatFolderInviteLinks",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editChatFolderInviteLink",
		"methods": [
			{
				"name": "chat_folder_id",
				"type": "int32",
				"description": "Chat folder identifier"
			},
			{
				"name": "invite_link",
				"type": "string",
				"description": "Invite link to be edited"
			},
			{
				"name": "name",
				"type": "string",
				"description": "New name of the link; 0-32 characters"
			},
			{
				"name": "chat_ids",
				"type": "vector<int53>",
				"description": "New identifiers of chats to be accessible by the invite link. Use getChatsForChatFolderInviteLink to get suitable chats. Basic groups will be automatically converted to supergroups before link editing"
			}
		],
		"description": "Edits an invite link for a chat folder",
		"inheritance": "TLBaseClass",
		"return_type": "chatFolderInviteLink",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteChatFolderInviteLink",
		"methods": [
			{
				"name": "chat_folder_id",
				"type": "int32",
				"description": "Chat folder identifier"
			},
			{
				"name": "invite_link",
				"type": "string",
				"description": "Invite link to be deleted"
			}
		],
		"description": "Deletes an invite link for a chat folder",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "checkChatFolderInviteLink",
		"methods": [
			{
				"name": "invite_link",
				"type": "string",
				"description": "Invite link to be checked"
			}
		],
		"description": "Checks the validity of an invite link for a chat folder and returns information about the corresponding chat folder",
		"inheritance": "TLBaseClass",
		"return_type": "chatFolderInviteLinkInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "addChatFolderByInviteLink",
		"methods": [
			{
				"name": "invite_link",
				"type": "string",
				"description": "Invite link for the chat folder"
			},
			{
				"name": "chat_ids",
				"type": "vector<int53>",
				"description": "Identifiers of the chats added to the chat folder. The chats are automatically joined if they aren't joined yet"
			}
		],
		"description": "Adds a chat folder by an invite link",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatFolderNewChats",
		"methods": [
			{
				"name": "chat_folder_id",
				"type": "int32",
				"description": "Chat folder identifier"
			}
		],
		"description": "Returns new chats added to a shareable chat folder by its owner. The method must be called at most once in getOption(\"chat_folder_new_chats_update_period\") for the given chat folder",
		"inheritance": "TLBaseClass",
		"return_type": "chats",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "processChatFolderNewChats",
		"methods": [
			{
				"name": "chat_folder_id",
				"type": "int32",
				"description": "Chat folder identifier"
			},
			{
				"name": "added_chat_ids",
				"type": "vector<int53>",
				"description": "Identifiers of the new chats, which are added to the chat folder. The chats are automatically joined if they aren't joined yet"
			}
		],
		"description": "Process new chats added to a shareable chat folder by its owner",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getArchiveChatListSettings",
		"methods": null,
		"description": "Returns settings for automatic moving of chats to and from the Archive chat lists",
		"inheritance": "TLBaseClass",
		"return_type": "archiveChatListSettings",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setArchiveChatListSettings",
		"methods": [
			{
				"name": "settings",
				"type": "archiveChatListSettings",
				"description": "New settings"
			}
		],
		"description": "Changes settings for automatic moving of chats to and from the Archive chat lists",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setChatTitle",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "title",
				"type": "string",
				"description": "New title of the chat; 1-128 characters"
			}
		],
		"description": "Changes the chat title. Supported only for basic groups, supergroups and channels. Requires can_change_info member right",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setChatPhoto",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "photo",
				"type": "InputChatPhoto",
				"description": "New chat photo; pass null to delete the chat photo"
			}
		],
		"description": "Changes the photo of a chat. Supported only for basic groups, supergroups and channels. Requires can_change_info member right",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setChatAccentColor",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "accent_color_id",
				"type": "int32",
				"description": "Identifier of the accent color to use. The chat must have at least accentColor.min_channel_chat_boost_level boost level to pass the corresponding color"
			},
			{
				"name": "background_custom_emoji_id",
				"type": "int64",
				"description": "Identifier of a custom emoji to be shown on the reply header and link preview background; 0 if none. Use chatBoostLevelFeatures.can_set_background_custom_emoji to check whether a custom emoji can be set"
			}
		],
		"description": "Changes accent color and background custom emoji of a channel chat. Requires can_change_info administrator right",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setChatProfileAccentColor",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "profile_accent_color_id",
				"type": "int32",
				"description": "Identifier of the accent color to use for profile; pass -1 if none. The chat must have at least profileAccentColor.min_supergroup_chat_boost_level for supergroups or profileAccentColor.min_channel_chat_boost_level for channels boost level to pass the corresponding color"
			},
			{
				"name": "profile_background_custom_emoji_id",
				"type": "int64",
				"description": "Identifier of a custom emoji to be shown on the chat's profile photo background; 0 if none. Use chatBoostLevelFeatures.can_set_profile_background_custom_emoji to check whether a custom emoji can be set"
			}
		],
		"description": "Changes accent color and background custom emoji for profile of a supergroup or channel chat. Requires can_change_info administrator right",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setChatMessageAutoDeleteTime",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_auto_delete_time",
				"type": "int32",
				"description": "New time value, in seconds; unless the chat is secret, it must be from 0 up to 365 * 86400 and be divisible by 86400. If 0, then messages aren't deleted automatically"
			}
		],
		"description": "Changes the message auto-delete or self-destruct (for secret chats) time in a chat. Requires change_info administrator right in basic groups, supergroups and channels. Message auto-delete time can't be changed in a chat with the current user (Saved Messages) and the chat 777000 (Telegram).",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setChatEmojiStatus",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "emoji_status",
				"type": "emojiStatus",
				"description": "New emoji status; pass null to remove emoji status"
			}
		],
		"description": "Changes the emoji status of a chat. Use chatBoostLevelFeatures.can_set_emoji_status to check whether an emoji status can be set. Requires can_change_info administrator right",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setChatPermissions",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "permissions",
				"type": "chatPermissions",
				"description": "New non-administrator members permissions in the chat"
			}
		],
		"description": "Changes the chat members permissions. Supported only for basic groups and supergroups. Requires can_restrict_members administrator right",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setChatBackground",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "background",
				"type": "InputBackground",
				"description": "The input background to use; pass null to create a new filled or chat theme background"
			},
			{
				"name": "type",
				"type": "BackgroundType",
				"description": "Background type; pass null to use default background type for the chosen background; backgroundTypeChatTheme isn't supported for private and secret chats. Use chatBoostLevelFeatures.chat_theme_background_count and chatBoostLevelFeatures.can_set_custom_background to check whether the background type can be set in the boosted chat"
			},
			{
				"name": "dark_theme_dimming",
				"type": "int32",
				"description": "Dimming of the background in dark themes, as a percentage; 0-100. Applied only to Wallpaper and Fill types of background"
			},
			{
				"name": "only_for_self",
				"type": "Bool",
				"description": "Pass true to set background only for self; pass false to set background for all chat users. Always false for backgrounds set in boosted chats. Background can be set for both users only by Telegram Premium users and if set background isn't of the type inputBackgroundPrevious"
			}
		],
		"description": "Sets the background in a specific chat. Supported only in private and secret chats with non-deleted users, and in chats with sufficient boost level and can_change_info administrator right",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteChatBackground",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "restore_previous",
				"type": "Bool",
				"description": "Pass true to restore previously set background. Can be used only in private and secret chats with non-deleted users if userFullInfo.set_chat_background == true. Supposed to be used from messageChatSetBackground messages with the currently set background that was set for both sides by the other user"
			}
		],
		"description": "Deletes background in a specific chat",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setChatTheme",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "theme_name",
				"type": "string",
				"description": "Name of the new chat theme; pass an empty string to return the default theme"
			}
		],
		"description": "Changes the chat theme. Supported only in private and secret chats",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setChatDraftMessage",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_thread_id",
				"type": "int53",
				"description": "If not 0, the message thread identifier in which the draft was changed"
			},
			{
				"name": "draft_message",
				"type": "draftMessage",
				"description": "New draft message; pass null to remove the draft. All files in draft message content must be of the type inputFileLocal. Media thumbnails and captions are ignored"
			}
		],
		"description": "Changes the draft message in a chat",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setChatNotificationSettings",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "notification_settings",
				"type": "chatNotificationSettings",
				"description": "New notification settings for the chat. If the chat is muted for more than 366 days, it is considered to be muted forever"
			}
		],
		"description": "Changes the notification settings of a chat. Notification settings of a chat with the current user (Saved Messages) can't be changed",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleChatHasProtectedContent",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "has_protected_content",
				"type": "Bool",
				"description": "New value of has_protected_content"
			}
		],
		"description": "Changes the ability of users to save, forward, or copy chat content. Supported only for basic groups, supergroups and channels. Requires owner privileges",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleChatViewAsTopics",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "view_as_topics",
				"type": "Bool",
				"description": "New value of view_as_topics"
			}
		],
		"description": "Changes the view_as_topics setting of a forum chat or Saved Messages",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleChatIsTranslatable",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "is_translatable",
				"type": "Bool",
				"description": "New value of is_translatable"
			}
		],
		"description": "Changes the translatable state of a chat",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleChatIsMarkedAsUnread",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "is_marked_as_unread",
				"type": "Bool",
				"description": "New value of is_marked_as_unread"
			}
		],
		"description": "Changes the marked as unread state of a chat",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleChatDefaultDisableNotification",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "default_disable_notification",
				"type": "Bool",
				"description": "New value of default_disable_notification"
			}
		],
		"description": "Changes the value of the default disable_notification parameter, used when a message is sent to a chat",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setChatAvailableReactions",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat"
			},
			{
				"name": "available_reactions",
				"type": "ChatAvailableReactions",
				"description": "Reactions available in the chat. All explicitly specified emoji reactions must be active. In channel chats up to the chat's boost level custom emoji reactions can be explicitly specified"
			}
		],
		"description": "Changes reactions, available in a chat. Available for basic groups, supergroups, and channels. Requires can_change_info member right",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setChatClientData",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "client_data",
				"type": "string",
				"description": "New value of client_data"
			}
		],
		"description": "Changes application-specific data associated with a chat",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setChatDescription",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat"
			},
			{
				"name": "description",
				"type": "string",
				"description": "New chat description; 0-255 characters"
			}
		],
		"description": "Changes information about a chat. Available for basic groups, supergroups, and channels. Requires can_change_info member right",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setChatDiscussionGroup",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the channel chat. Pass 0 to remove a link from the supergroup passed in the second argument to a linked channel chat (requires can_pin_messages member right in the supergroup)"
			},
			{
				"name": "discussion_chat_id",
				"type": "int53",
				"description": "Identifier of a new channel's discussion group. Use 0 to remove the discussion group. Use the method getSuitableDiscussionChats to find all suitable groups. Basic group chats must be first upgraded to supergroup chats. If new chat members don't have access to old messages in the supergroup, then toggleSupergroupIsAllHistoryAvailable must be used first to change that"
			}
		],
		"description": "Changes the discussion group of a channel chat; requires can_change_info administrator right in the channel if it is specified",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setChatLocation",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "location",
				"type": "chatLocation",
				"description": "New location for the chat; must be valid and not null"
			}
		],
		"description": "Changes the location of a chat. Available only for some location-based supergroups, use supergroupFullInfo.can_set_location to check whether the method is allowed to use",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setChatSlowModeDelay",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "slow_mode_delay",
				"type": "int32",
				"description": "New slow mode delay for the chat, in seconds; must be one of 0, 10, 30, 60, 300, 900, 3600"
			}
		],
		"description": "Changes the slow mode delay of a chat. Available only for supergroups; requires can_restrict_members right",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "pinChatMessage",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the new pinned message"
			},
			{
				"name": "disable_notification",
				"type": "Bool",
				"description": "Pass true to disable notification about the pinned message. Notifications are always disabled in channels and private chats"
			},
			{
				"name": "only_for_self",
				"type": "Bool",
				"description": "Pass true to pin the message only for self; private chats only"
			}
		],
		"description": "Pins a message in a chat. A message can be pinned only if messageProperties.can_be_pinned",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "unpinChatMessage",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the removed pinned message"
			}
		],
		"description": "Removes a pinned message from a chat; requires can_pin_messages member right if the chat is a basic group or supergroup, or can_edit_messages administrator right if the chat is a channel",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "unpinAllChatMessages",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat"
			}
		],
		"description": "Removes all pinned messages from a chat; requires can_pin_messages member right if the chat is a basic group or supergroup, or can_edit_messages administrator right if the chat is a channel",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "unpinAllMessageThreadMessages",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat"
			},
			{
				"name": "message_thread_id",
				"type": "int53",
				"description": "Message thread identifier in which messages will be unpinned"
			}
		],
		"description": "Removes all pinned messages from a forum topic; requires can_pin_messages member right in the supergroup",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "joinChat",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			}
		],
		"description": "Adds the current user as a new member to a chat. Private and secret chats can't be joined using this method. May return an error with a message \"INVITE_REQUEST_SENT\" if only a join request was created",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "leaveChat",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			}
		],
		"description": "Removes the current user from chat members. Private and secret chats can't be left using this method",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "addChatMember",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user"
			},
			{
				"name": "forward_limit",
				"type": "int32",
				"description": "The number of earlier messages from the chat to be forwarded to the new member; up to 100. Ignored for supergroups and channels, or if the added user is a bot"
			}
		],
		"description": "Adds a new member to a chat; requires can_invite_users member right. Members can't be added to private or secret chats. Returns information about members that weren't added",
		"inheritance": "TLBaseClass",
		"return_type": "failedToAddMembers",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "addChatMembers",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "user_ids",
				"type": "vector<int53>",
				"description": "Identifiers of the users to be added to the chat. The maximum number of added users is 20 for supergroups and 100 for channels"
			}
		],
		"description": "Adds multiple new members to a chat; requires can_invite_users member right. Currently, this method is only available for supergroups and channels. This method can't be used to join a chat. Members can't be added to a channel if it has more than 200 members. Returns information about members that weren't added",
		"inheritance": "TLBaseClass",
		"return_type": "failedToAddMembers",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setChatMemberStatus",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "member_id",
				"type": "MessageSender",
				"description": "Member identifier. Chats can be only banned and unbanned in supergroups and channels"
			},
			{
				"name": "status",
				"type": "ChatMemberStatus",
				"description": "The new status of the member in the chat"
			}
		],
		"description": "Changes the status of a chat member; requires can_invite_users member right to add a chat member, can_promote_members administrator right to change administrator rights of the member, and can_restrict_members administrator right to change restrictions of a user. This function is currently not suitable for transferring chat ownership; use transferChatOwnership instead. Use addChatMember or banChatMember if some additional parameters needs to be passed",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "banChatMember",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "member_id",
				"type": "MessageSender",
				"description": "Member identifier"
			},
			{
				"name": "banned_until_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the user will be unbanned; 0 if never. If the user is banned for more than 366 days or for less than 30 seconds from the current time, the user is considered to be banned forever. Ignored in basic groups and if a chat is banned"
			},
			{
				"name": "revoke_messages",
				"type": "Bool",
				"description": "Pass true to delete all messages in the chat for the user that is being removed. Always true for supergroups and channels"
			}
		],
		"description": "Bans a member in a chat; requires can_restrict_members administrator right. Members can't be banned in private or secret chats. In supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless unbanned first",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "canTransferOwnership",
		"methods": null,
		"description": "Checks whether the current session can be used to transfer a chat ownership to another user",
		"inheritance": "TLBaseClass",
		"return_type": "CanTransferOwnershipResult",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "transferChatOwnership",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user to which transfer the ownership. The ownership can't be transferred to a bot or to a deleted user"
			},
			{
				"name": "password",
				"type": "string",
				"description": "The 2-step verification password of the current user"
			}
		],
		"description": "Changes the owner of a chat; requires owner privileges in the chat. Use the method canTransferOwnership to check whether the ownership can be transferred from the current session. Available only for supergroups and channel chats",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatMember",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "member_id",
				"type": "MessageSender",
				"description": "Member identifier"
			}
		],
		"description": "Returns information about a single member of a chat",
		"inheritance": "TLBaseClass",
		"return_type": "chatMember",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchChatMembers",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "query",
				"type": "string",
				"description": "Query to search for"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of users to be returned; up to 200"
			},
			{
				"name": "filter",
				"type": "ChatMembersFilter",
				"description": "The type of users to search for; pass null to search among all chat members"
			}
		],
		"description": "Searches for a specified query in the first name, last name and usernames of the members of a specified chat. Requires administrator rights if the chat is a channel",
		"inheritance": "TLBaseClass",
		"return_type": "chatMembers",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatAdministrators",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			}
		],
		"description": "Returns a list of administrators of the chat with their custom titles",
		"inheritance": "TLBaseClass",
		"return_type": "chatAdministrators",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "clearAllDraftMessages",
		"methods": [
			{
				"name": "exclude_secret_chats",
				"type": "Bool",
				"description": "Pass true to keep local message drafts in secret chats"
			}
		],
		"description": "Clears message drafts in all chats",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getSavedNotificationSound",
		"methods": [
			{
				"name": "notification_sound_id",
				"type": "int64",
				"description": "Identifier of the notification sound"
			}
		],
		"description": "Returns saved notification sound by its identifier. Returns a 404 error if there is no saved notification sound with the specified identifier",
		"inheritance": "TLBaseClass",
		"return_type": "notificationSounds",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getSavedNotificationSounds",
		"methods": null,
		"description": "Returns the list of saved notification sounds. If a sound isn't in the list, then default sound needs to be used",
		"inheritance": "TLBaseClass",
		"return_type": "notificationSounds",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "addSavedNotificationSound",
		"methods": [
			{
				"name": "sound",
				"type": "InputFile",
				"description": "Notification sound file to add"
			}
		],
		"description": "Adds a new notification sound to the list of saved notification sounds. The new notification sound is added to the top of the list. If it is already in the list, its position isn't changed",
		"inheritance": "TLBaseClass",
		"return_type": "notificationSound",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "removeSavedNotificationSound",
		"methods": [
			{
				"name": "notification_sound_id",
				"type": "int64",
				"description": "Identifier of the notification sound"
			}
		],
		"description": "Removes a notification sound from the list of saved notification sounds",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatNotificationSettingsExceptions",
		"methods": [
			{
				"name": "scope",
				"type": "NotificationSettingsScope",
				"description": "If specified, only chats from the scope will be returned; pass null to return chats from all scopes"
			},
			{
				"name": "compare_sound",
				"type": "Bool",
				"description": "Pass true to include in the response chats with only non-default sound"
			}
		],
		"description": "Returns the list of chats with non-default notification settings for new messages",
		"inheritance": "TLBaseClass",
		"return_type": "chats",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getScopeNotificationSettings",
		"methods": [
			{
				"name": "scope",
				"type": "NotificationSettingsScope",
				"description": "Types of chats for which to return the notification settings information"
			}
		],
		"description": "Returns the notification settings for chats of a given type",
		"inheritance": "TLBaseClass",
		"return_type": "scopeNotificationSettings",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setScopeNotificationSettings",
		"methods": [
			{
				"name": "scope",
				"type": "NotificationSettingsScope",
				"description": "Types of chats for which to change the notification settings"
			},
			{
				"name": "notification_settings",
				"type": "scopeNotificationSettings",
				"description": "The new notification settings for the given scope"
			}
		],
		"description": "Changes notification settings for chats of a given type",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setReactionNotificationSettings",
		"methods": [
			{
				"name": "notification_settings",
				"type": "reactionNotificationSettings",
				"description": "The new notification settings for reactions"
			}
		],
		"description": "Changes notification settings for reactions",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "resetAllNotificationSettings",
		"methods": null,
		"description": "Resets all chat and scope notification settings to their default values. By default, all chats are unmuted and message previews are shown",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleChatIsPinned",
		"methods": [
			{
				"name": "chat_list",
				"type": "ChatList",
				"description": "Chat list in which to change the pinned state of the chat"
			},
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "is_pinned",
				"type": "Bool",
				"description": "Pass true to pin the chat; pass false to unpin it"
			}
		],
		"description": "Changes the pinned state of a chat. There can be up to getOption(\"pinned_chat_count_max\")/getOption(\"pinned_archived_chat_count_max\") pinned non-secret chats and the same number of secret chats in the main/archive chat list. The limit can be increased with Telegram Premium",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setPinnedChats",
		"methods": [
			{
				"name": "chat_list",
				"type": "ChatList",
				"description": "Chat list in which to change the order of pinned chats"
			},
			{
				"name": "chat_ids",
				"type": "vector<int53>",
				"description": "The new list of pinned chats"
			}
		],
		"description": "Changes the order of pinned chats",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "readChatList",
		"methods": [
			{
				"name": "chat_list",
				"type": "ChatList",
				"description": "Chat list in which to mark all chats as read"
			}
		],
		"description": "Traverse all chats in a chat list and marks all messages in the chats as read",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getCurrentWeather",
		"methods": [
			{
				"name": "location",
				"type": "location",
				"description": "The location"
			}
		],
		"description": "Returns the current weather in the given location",
		"inheritance": "TLBaseClass",
		"return_type": "currentWeather",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getStory",
		"methods": [
			{
				"name": "story_sender_chat_id",
				"type": "int53",
				"description": "Identifier of the chat that posted the story"
			},
			{
				"name": "story_id",
				"type": "int32",
				"description": "Story identifier"
			},
			{
				"name": "only_local",
				"type": "Bool",
				"description": "Pass true to get only locally available information without sending network requests"
			}
		],
		"description": "Returns a story",
		"inheritance": "TLBaseClass",
		"return_type": "story",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatsToSendStories",
		"methods": null,
		"description": "Returns supergroup and channel chats in which the current user has the right to post stories. The chats must be rechecked with canSendStory before actually trying to post a story there",
		"inheritance": "TLBaseClass",
		"return_type": "chats",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "canSendStory",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier. Pass Saved Messages chat identifier when posting a story on behalf of the current user"
			}
		],
		"description": "Checks whether the current user can send a story on behalf of a chat; requires can_post_stories right for supergroup and channel chats",
		"inheritance": "TLBaseClass",
		"return_type": "CanSendStoryResult",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "sendStory",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat that will post the story. Pass Saved Messages chat identifier when posting a story on behalf of the current user"
			},
			{
				"name": "content",
				"type": "InputStoryContent",
				"description": "Content of the story"
			},
			{
				"name": "areas",
				"type": "inputStoryAreas",
				"description": "Clickable rectangle areas to be shown on the story media; pass null if none"
			},
			{
				"name": "caption",
				"type": "formattedText",
				"description": "Story caption; pass null to use an empty caption; 0-getOption(\"story_caption_length_max\") characters; can have entities only if getOption(\"can_use_text_entities_in_story_caption\")"
			},
			{
				"name": "privacy_settings",
				"type": "StoryPrivacySettings",
				"description": "The privacy settings for the story; ignored for stories sent to supergroup and channel chats"
			},
			{
				"name": "active_period",
				"type": "int32",
				"description": "Period after which the story is moved to archive, in seconds; must be one of 6 * 3600, 12 * 3600, 86400, or 2 * 86400 for Telegram Premium users, and 86400 otherwise"
			},
			{
				"name": "from_story_full_id",
				"type": "storyFullId",
				"description": "Full identifier of the original story, which content was used to create the story; pass null if the story isn't repost of another story"
			},
			{
				"name": "is_posted_to_chat_page",
				"type": "Bool",
				"description": "Pass true to keep the story accessible after expiration"
			},
			{
				"name": "protect_content",
				"type": "Bool",
				"description": "Pass true if the content of the story must be protected from forwarding and screenshotting"
			}
		],
		"description": "Sends a new story to a chat; requires can_post_stories right for supergroup and channel chats. Returns a temporary story",
		"inheritance": "TLBaseClass",
		"return_type": "story",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editStory",
		"methods": [
			{
				"name": "story_sender_chat_id",
				"type": "int53",
				"description": "Identifier of the chat that posted the story"
			},
			{
				"name": "story_id",
				"type": "int32",
				"description": "Identifier of the story to edit"
			},
			{
				"name": "content",
				"type": "InputStoryContent",
				"description": "New content of the story; pass null to keep the current content"
			},
			{
				"name": "areas",
				"type": "inputStoryAreas",
				"description": "New clickable rectangle areas to be shown on the story media; pass null to keep the current areas. Areas can't be edited if story content isn't changed"
			},
			{
				"name": "caption",
				"type": "formattedText",
				"description": "New story caption; pass null to keep the current caption"
			}
		],
		"description": "Changes content and caption of a story. Can be called only if story.can_be_edited == true",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editStoryCover",
		"methods": [
			{
				"name": "story_sender_chat_id",
				"type": "int53",
				"description": "Identifier of the chat that posted the story"
			},
			{
				"name": "story_id",
				"type": "int32",
				"description": "Identifier of the story to edit"
			},
			{
				"name": "cover_frame_timestamp",
				"type": "double",
				"description": "New timestamp of the frame, which will be used as video thumbnail"
			}
		],
		"description": "Changes cover of a video story. Can be called only if story.can_be_edited == true and the story isn't being edited now",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setStoryPrivacySettings",
		"methods": [
			{
				"name": "story_id",
				"type": "int32",
				"description": "Identifier of the story"
			},
			{
				"name": "privacy_settings",
				"type": "StoryPrivacySettings",
				"description": "The new privacy settings for the story"
			}
		],
		"description": "Changes privacy settings of a story. The method can be called only for stories posted on behalf of the current user and if story.can_be_edited == true",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleStoryIsPostedToChatPage",
		"methods": [
			{
				"name": "story_sender_chat_id",
				"type": "int53",
				"description": "Identifier of the chat that posted the story"
			},
			{
				"name": "story_id",
				"type": "int32",
				"description": "Identifier of the story"
			},
			{
				"name": "is_posted_to_chat_page",
				"type": "Bool",
				"description": "Pass true to make the story accessible after expiration; pass false to make it private"
			}
		],
		"description": "Toggles whether a story is accessible after expiration. Can be called only if story.can_toggle_is_posted_to_chat_page == true",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteStory",
		"methods": [
			{
				"name": "story_sender_chat_id",
				"type": "int53",
				"description": "Identifier of the chat that posted the story"
			},
			{
				"name": "story_id",
				"type": "int32",
				"description": "Identifier of the story to delete"
			}
		],
		"description": "Deletes a previously sent story. Can be called only if story.can_be_deleted == true",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getStoryNotificationSettingsExceptions",
		"methods": null,
		"description": "Returns the list of chats with non-default notification settings for stories",
		"inheritance": "TLBaseClass",
		"return_type": "chats",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "loadActiveStories",
		"methods": [
			{
				"name": "story_list",
				"type": "StoryList",
				"description": "The story list in which to load active stories"
			}
		],
		"description": "Loads more active stories from a story list. The loaded stories will be sent through updates. Active stories are sorted by the pair (active_stories.order, active_stories.story_sender_chat_id) in descending order. Returns a 404 error if all active stories have been loaded",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setChatActiveStoriesList",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat that posted stories"
			},
			{
				"name": "story_list",
				"type": "StoryList",
				"description": "New list for active stories posted by the chat"
			}
		],
		"description": "Changes story list in which stories from the chat are shown",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatActiveStories",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			}
		],
		"description": "Returns the list of active stories posted by the given chat",
		"inheritance": "TLBaseClass",
		"return_type": "chatActiveStories",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatPostedToChatPageStories",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "from_story_id",
				"type": "int32",
				"description": "Identifier of the story starting from which stories must be returned; use 0 to get results from pinned and the newest story"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of stories to be returned. For optimal performance, the number of returned stories is chosen by TDLib and can be smaller than the specified limit"
			}
		],
		"description": "Returns the list of stories that posted by the given chat to its chat page. If from_story_id == 0, then pinned stories are returned first. Then, stories are returned in reverse chronological order (i.e., in order of decreasing story_id). For optimal performance, the number of returned stories is chosen by TDLib",
		"inheritance": "TLBaseClass",
		"return_type": "stories",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatArchivedStories",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "from_story_id",
				"type": "int32",
				"description": "Identifier of the story starting from which stories must be returned; use 0 to get results from the last story"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of stories to be returned. For optimal performance, the number of returned stories is chosen by TDLib and can be smaller than the specified limit"
			}
		],
		"description": "Returns the list of all stories posted by the given chat; requires can_edit_stories right in the chat. The stories are returned in reverse chronological order (i.e., in order of decreasing story_id). For optimal performance, the number of returned stories is chosen by TDLib",
		"inheritance": "TLBaseClass",
		"return_type": "stories",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setChatPinnedStories",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat that posted the stories"
			},
			{
				"name": "story_ids",
				"type": "vector<int32>",
				"description": "New list of pinned stories. All stories must be posted to the chat page first. There can be up to getOption(\"pinned_story_count_max\") pinned stories on a chat page"
			}
		],
		"description": "Changes the list of pinned stories on a chat page; requires can_edit_stories right in the chat",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "openStory",
		"methods": [
			{
				"name": "story_sender_chat_id",
				"type": "int53",
				"description": "The identifier of the sender of the opened story"
			},
			{
				"name": "story_id",
				"type": "int32",
				"description": "The identifier of the story"
			}
		],
		"description": "Informs TDLib that a story is opened and is being viewed by the user",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "closeStory",
		"methods": [
			{
				"name": "story_sender_chat_id",
				"type": "int53",
				"description": "The identifier of the sender of the story to close"
			},
			{
				"name": "story_id",
				"type": "int32",
				"description": "The identifier of the story"
			}
		],
		"description": "Informs TDLib that a story is closed by the user",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getStoryAvailableReactions",
		"methods": [
			{
				"name": "row_size",
				"type": "int32",
				"description": "Number of reaction per row, 5-25"
			}
		],
		"description": "Returns reactions, which can be chosen for a story",
		"inheritance": "TLBaseClass",
		"return_type": "availableReactions",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setStoryReaction",
		"methods": [
			{
				"name": "story_sender_chat_id",
				"type": "int53",
				"description": "The identifier of the sender of the story"
			},
			{
				"name": "story_id",
				"type": "int32",
				"description": "The identifier of the story"
			},
			{
				"name": "reaction_type",
				"type": "ReactionType",
				"description": "Type of the reaction to set; pass null to remove the reaction. Custom emoji reactions can be used only by Telegram Premium users. Paid reactions can't be set"
			},
			{
				"name": "update_recent_reactions",
				"type": "Bool",
				"description": "Pass true if the reaction needs to be added to recent reactions"
			}
		],
		"description": "Changes chosen reaction on a story that has already been sent",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getStoryInteractions",
		"methods": [
			{
				"name": "story_id",
				"type": "int32",
				"description": "Story identifier"
			},
			{
				"name": "query",
				"type": "string",
				"description": "Query to search for in names, usernames and titles; may be empty to get all relevant interactions"
			},
			{
				"name": "only_contacts",
				"type": "Bool",
				"description": "Pass true to get only interactions by contacts; pass false to get all relevant interactions"
			},
			{
				"name": "prefer_forwards",
				"type": "Bool",
				"description": "Pass true to get forwards and reposts first, then reactions, then other views; pass false to get interactions sorted just by interaction date"
			},
			{
				"name": "prefer_with_reaction",
				"type": "Bool",
				"description": "Pass true to get interactions with reaction first; pass false to get interactions sorted just by interaction date. Ignored if prefer_forwards == true"
			},
			{
				"name": "offset",
				"type": "string",
				"description": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of story interactions to return"
			}
		],
		"description": "Returns interactions with a story. The method can be called only for stories posted on behalf of the current user",
		"inheritance": "TLBaseClass",
		"return_type": "storyInteractions",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatStoryInteractions",
		"methods": [
			{
				"name": "story_sender_chat_id",
				"type": "int53",
				"description": "The identifier of the sender of the story"
			},
			{
				"name": "story_id",
				"type": "int32",
				"description": "Story identifier"
			},
			{
				"name": "reaction_type",
				"type": "ReactionType",
				"description": "Pass the default heart reaction or a suggested reaction type to receive only interactions with the specified reaction type; pass null to receive all interactions; reactionTypePaid isn't supported"
			},
			{
				"name": "prefer_forwards",
				"type": "Bool",
				"description": "Pass true to get forwards and reposts first, then reactions, then other views; pass false to get interactions sorted just by interaction date"
			},
			{
				"name": "offset",
				"type": "string",
				"description": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of story interactions to return"
			}
		],
		"description": "Returns interactions with a story posted in a chat. Can be used only if story is posted on behalf of a chat and the user is an administrator in the chat",
		"inheritance": "TLBaseClass",
		"return_type": "storyInteractions",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "reportStory",
		"methods": [
			{
				"name": "story_sender_chat_id",
				"type": "int53",
				"description": "The identifier of the sender of the story to report"
			},
			{
				"name": "story_id",
				"type": "int32",
				"description": "The identifier of the story to report"
			},
			{
				"name": "option_id",
				"type": "bytes",
				"description": "Option identifier chosen by the user; leave empty for the initial request"
			},
			{
				"name": "text",
				"type": "string",
				"description": "Additional report details; 0-1024 characters; leave empty for the initial request"
			}
		],
		"description": "Reports a story to the Telegram moderators",
		"inheritance": "TLBaseClass",
		"return_type": "ReportStoryResult",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "activateStoryStealthMode",
		"methods": null,
		"description": "Activates stealth mode for stories, which hides all views of stories from the current user in the last \"story_stealth_mode_past_period\" seconds and for the next \"story_stealth_mode_future_period\" seconds; for Telegram Premium users only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getStoryPublicForwards",
		"methods": [
			{
				"name": "story_sender_chat_id",
				"type": "int53",
				"description": "The identifier of the sender of the story"
			},
			{
				"name": "story_id",
				"type": "int32",
				"description": "The identifier of the story"
			},
			{
				"name": "offset",
				"type": "string",
				"description": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of messages and stories to be returned; must be positive and can't be greater than 100. For optimal performance, the number of returned objects is chosen by TDLib and can be smaller than the specified limit"
			}
		],
		"description": "Returns forwards of a story as a message to public chats and reposts by public channels. Can be used only if the story is posted on behalf of the current user or story.can_get_statistics == true. For optimal performance, the number of returned messages and stories is chosen by TDLib",
		"inheritance": "TLBaseClass",
		"return_type": "publicForwards",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatBoostLevelFeatures",
		"methods": [
			{
				"name": "is_channel",
				"type": "Bool",
				"description": "Pass true to get the list of features for channels; pass false to get the list of features for supergroups"
			},
			{
				"name": "level",
				"type": "int32",
				"description": "Chat boost level"
			}
		],
		"description": "Returns the list of features available on the specific chat boost level. This is an offline method",
		"inheritance": "TLBaseClass",
		"return_type": "chatBoostLevelFeatures",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatBoostFeatures",
		"methods": [
			{
				"name": "is_channel",
				"type": "Bool",
				"description": "Pass true to get the list of features for channels; pass false to get the list of features for supergroups"
			}
		],
		"description": "Returns the list of features available for different chat boost levels. This is an offline method",
		"inheritance": "TLBaseClass",
		"return_type": "chatBoostFeatures",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getAvailableChatBoostSlots",
		"methods": null,
		"description": "Returns the list of available chat boost slots for the current user",
		"inheritance": "TLBaseClass",
		"return_type": "chatBoostSlots",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatBoostStatus",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat"
			}
		],
		"description": "Returns the current boost status for a supergroup or a channel chat",
		"inheritance": "TLBaseClass",
		"return_type": "chatBoostStatus",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "boostChat",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat"
			},
			{
				"name": "slot_ids",
				"type": "vector<int32>",
				"description": "Identifiers of boost slots of the current user from which to apply boosts to the chat"
			}
		],
		"description": "Boosts a chat and returns the list of available chat boost slots for the current user after the boost",
		"inheritance": "TLBaseClass",
		"return_type": "chatBoostSlots",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatBoostLink",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat"
			}
		],
		"description": "Returns an HTTPS link to boost the specified supergroup or channel chat",
		"inheritance": "TLBaseClass",
		"return_type": "chatBoostLink",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatBoostLinkInfo",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "The link to boost a chat"
			}
		],
		"description": "Returns information about a link to boost a chat. Can be called for any internal link of the type internalLinkTypeChatBoost",
		"inheritance": "TLBaseClass",
		"return_type": "chatBoostLinkInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatBoosts",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat"
			},
			{
				"name": "only_gift_codes",
				"type": "Bool",
				"description": "Pass true to receive only boosts received from gift codes and giveaways created by the chat"
			},
			{
				"name": "offset",
				"type": "string",
				"description": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of boosts to be returned; up to 100. For optimal performance, the number of returned boosts can be smaller than the specified limit"
			}
		],
		"description": "Returns the list of boosts applied to a chat; requires administrator rights in the chat",
		"inheritance": "TLBaseClass",
		"return_type": "foundChatBoosts",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getUserChatBoosts",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat"
			},
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user"
			}
		],
		"description": "Returns the list of boosts applied to a chat by a given user; requires administrator rights in the chat; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "foundChatBoosts",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getAttachmentMenuBot",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Bot's user identifier"
			}
		],
		"description": "Returns information about a bot that can be added to attachment or side menu",
		"inheritance": "TLBaseClass",
		"return_type": "attachmentMenuBot",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleBotIsAddedToAttachmentMenu",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Bot's user identifier"
			},
			{
				"name": "is_added",
				"type": "Bool",
				"description": "Pass true to add the bot to attachment menu; pass false to remove the bot from attachment menu"
			},
			{
				"name": "allow_write_access",
				"type": "Bool",
				"description": "Pass true if the current user allowed the bot to send them messages. Ignored if is_added is false"
			}
		],
		"description": "Adds or removes a bot to attachment and side menu. Bot can be added to the menu, only if userTypeBot.can_be_added_to_attachment_menu == true",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getThemedEmojiStatuses",
		"methods": null,
		"description": "Returns up to 8 emoji statuses, which must be shown right after the default Premium Badge in the emoji status list for self status",
		"inheritance": "TLBaseClass",
		"return_type": "emojiStatusCustomEmojis",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getRecentEmojiStatuses",
		"methods": null,
		"description": "Returns recent emoji statuses for self status",
		"inheritance": "TLBaseClass",
		"return_type": "emojiStatuses",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getUpgradedGiftEmojiStatuses",
		"methods": null,
		"description": "Returns available upgraded gift emoji statuses for self status",
		"inheritance": "TLBaseClass",
		"return_type": "emojiStatuses",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getDefaultEmojiStatuses",
		"methods": null,
		"description": "Returns default emoji statuses for self status",
		"inheritance": "TLBaseClass",
		"return_type": "emojiStatusCustomEmojis",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "clearRecentEmojiStatuses",
		"methods": null,
		"description": "Clears the list of recently used emoji statuses for self status",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getThemedChatEmojiStatuses",
		"methods": null,
		"description": "Returns up to 8 emoji statuses, which must be shown in the emoji status list for chats",
		"inheritance": "TLBaseClass",
		"return_type": "emojiStatusCustomEmojis",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getDefaultChatEmojiStatuses",
		"methods": null,
		"description": "Returns default emoji statuses for chats",
		"inheritance": "TLBaseClass",
		"return_type": "emojiStatusCustomEmojis",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getDisallowedChatEmojiStatuses",
		"methods": null,
		"description": "Returns the list of emoji statuses, which can't be used as chat emoji status, even they are from a sticker set with is_allowed_as_chat_emoji_status == true",
		"inheritance": "TLBaseClass",
		"return_type": "emojiStatusCustomEmojis",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "downloadFile",
		"methods": [
			{
				"name": "file_id",
				"type": "int32",
				"description": "Identifier of the file to download"
			},
			{
				"name": "priority",
				"type": "int32",
				"description": "Priority of the download (1-32). The higher the priority, the earlier the file will be downloaded. If the priorities of two files are equal, then the last one for which downloadFile/addFileToDownloads was called will be downloaded first"
			},
			{
				"name": "offset",
				"type": "int53",
				"description": "The starting position from which the file needs to be downloaded"
			},
			{
				"name": "limit",
				"type": "int53",
				"description": "Number of bytes which need to be downloaded starting from the \"offset\" position before the download will automatically be canceled; use 0 to download without a limit"
			},
			{
				"name": "synchronous",
				"type": "Bool",
				"description": "Pass true to return response only after the file download has succeeded, has failed, has been canceled, or a new downloadFile request with different offset/limit parameters was sent; pass false to return file state immediately, just after the download has been started"
			}
		],
		"description": "Downloads a file from the cloud. Download progress and completion of the download will be notified through updateFile updates",
		"inheritance": "TLBaseClass",
		"return_type": "file",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getFileDownloadedPrefixSize",
		"methods": [
			{
				"name": "file_id",
				"type": "int32",
				"description": "Identifier of the file"
			},
			{
				"name": "offset",
				"type": "int53",
				"description": "Offset from which downloaded prefix size needs to be calculated"
			}
		],
		"description": "Returns file downloaded prefix size from a given offset, in bytes",
		"inheritance": "TLBaseClass",
		"return_type": "fileDownloadedPrefixSize",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "cancelDownloadFile",
		"methods": [
			{
				"name": "file_id",
				"type": "int32",
				"description": "Identifier of a file to stop downloading"
			},
			{
				"name": "only_if_pending",
				"type": "Bool",
				"description": "Pass true to stop downloading only if it hasn't been started, i.e. request hasn't been sent to server"
			}
		],
		"description": "Stops the downloading of a file. If a file has already been downloaded, does nothing",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getSuggestedFileName",
		"methods": [
			{
				"name": "file_id",
				"type": "int32",
				"description": "Identifier of the file"
			},
			{
				"name": "directory",
				"type": "string",
				"description": "Directory in which the file is expected to be saved"
			}
		],
		"description": "Returns suggested name for saving a file in a given directory",
		"inheritance": "TLBaseClass",
		"return_type": "text",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "preliminaryUploadFile",
		"methods": [
			{
				"name": "file",
				"type": "InputFile",
				"description": "File to upload"
			},
			{
				"name": "file_type",
				"type": "FileType",
				"description": "File type; pass null if unknown"
			},
			{
				"name": "priority",
				"type": "int32",
				"description": "Priority of the upload (1-32). The higher the priority, the earlier the file will be uploaded. If the priorities of two files are equal, then the first one for which preliminaryUploadFile was called will be uploaded first"
			}
		],
		"description": "Preliminary uploads a file to the cloud before sending it in a message, which can be useful for uploading of being recorded voice and video notes. In all other cases there is no need to preliminary upload a file. Updates updateFile will be used to notify about upload progress. The upload will not be completed until the file is sent in a message",
		"inheritance": "TLBaseClass",
		"return_type": "file",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "cancelPreliminaryUploadFile",
		"methods": [
			{
				"name": "file_id",
				"type": "int32",
				"description": "Identifier of the file to stop uploading"
			}
		],
		"description": "Stops the preliminary uploading of a file. Supported only for files uploaded by using preliminaryUploadFile",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "writeGeneratedFilePart",
		"methods": [
			{
				"name": "generation_id",
				"type": "int64",
				"description": "The identifier of the generation process"
			},
			{
				"name": "offset",
				"type": "int53",
				"description": "The offset from which to write the data to the file"
			},
			{
				"name": "data",
				"type": "bytes",
				"description": "The data to write"
			}
		],
		"description": "Writes a part of a generated file. This method is intended to be used only if the application has no direct access to TDLib's file system, because it is usually slower than a direct write to the destination file",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setFileGenerationProgress",
		"methods": [
			{
				"name": "generation_id",
				"type": "int64",
				"description": "The identifier of the generation process"
			},
			{
				"name": "expected_size",
				"type": "int53",
				"description": "Expected size of the generated file, in bytes; 0 if unknown"
			},
			{
				"name": "local_prefix_size",
				"type": "int53",
				"description": "The number of bytes already generated"
			}
		],
		"description": "Informs TDLib on a file generation progress",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "finishFileGeneration",
		"methods": [
			{
				"name": "generation_id",
				"type": "int64",
				"description": "The identifier of the generation process"
			},
			{
				"name": "error",
				"type": "error",
				"description": "If passed, the file generation has failed and must be terminated; pass null if the file generation succeeded"
			}
		],
		"description": "Finishes the file generation",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "readFilePart",
		"methods": [
			{
				"name": "file_id",
				"type": "int32",
				"description": "Identifier of the file. The file must be located in the TDLib file cache"
			},
			{
				"name": "offset",
				"type": "int53",
				"description": "The offset from which to read the file"
			},
			{
				"name": "count",
				"type": "int53",
				"description": "Number of bytes to read. An error will be returned if there are not enough bytes available in the file from the specified position. Pass 0 to read all available data from the specified position"
			}
		],
		"description": "Reads a part of a file from the TDLib file cache and returns read bytes. This method is intended to be used only if the application has no direct access to TDLib's file system, because it is usually slower than a direct read from the file",
		"inheritance": "TLBaseClass",
		"return_type": "filePart",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteFile",
		"methods": [
			{
				"name": "file_id",
				"type": "int32",
				"description": "Identifier of the file to delete"
			}
		],
		"description": "Deletes a file from the TDLib file cache",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "addFileToDownloads",
		"methods": [
			{
				"name": "file_id",
				"type": "int32",
				"description": "Identifier of the file to download"
			},
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier of the message with the file"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Message identifier"
			},
			{
				"name": "priority",
				"type": "int32",
				"description": "Priority of the download (1-32). The higher the priority, the earlier the file will be downloaded. If the priorities of two files are equal, then the last one for which downloadFile/addFileToDownloads was called will be downloaded first"
			}
		],
		"description": "Adds a file from a message to the list of file downloads. Download progress and completion of the download will be notified through updateFile updates. If message database is used, the list of file downloads is persistent across application restarts. The downloading is independent of download using downloadFile, i.e. it continues if downloadFile is canceled or is used to download a part of the file",
		"inheritance": "TLBaseClass",
		"return_type": "file",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleDownloadIsPaused",
		"methods": [
			{
				"name": "file_id",
				"type": "int32",
				"description": "Identifier of the downloaded file"
			},
			{
				"name": "is_paused",
				"type": "Bool",
				"description": "Pass true if the download is paused"
			}
		],
		"description": "Changes pause state of a file in the file download list",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleAllDownloadsArePaused",
		"methods": [
			{
				"name": "are_paused",
				"type": "Bool",
				"description": "Pass true to pause all downloads; pass false to unpause them"
			}
		],
		"description": "Changes pause state of all files in the file download list",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "removeFileFromDownloads",
		"methods": [
			{
				"name": "file_id",
				"type": "int32",
				"description": "Identifier of the downloaded file"
			},
			{
				"name": "delete_from_cache",
				"type": "Bool",
				"description": "Pass true to delete the file from the TDLib file cache"
			}
		],
		"description": "Removes a file from the file download list",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "removeAllFilesFromDownloads",
		"methods": [
			{
				"name": "only_active",
				"type": "Bool",
				"description": "Pass true to remove only active downloads, including paused"
			},
			{
				"name": "only_completed",
				"type": "Bool",
				"description": "Pass true to remove only completed downloads"
			},
			{
				"name": "delete_from_cache",
				"type": "Bool",
				"description": "Pass true to delete the file from the TDLib file cache"
			}
		],
		"description": "Removes all files from the file download list",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchFileDownloads",
		"methods": [
			{
				"name": "query",
				"type": "string",
				"description": "Query to search for; may be empty to return all downloaded files"
			},
			{
				"name": "only_active",
				"type": "Bool",
				"description": "Pass true to search only for active downloads, including paused"
			},
			{
				"name": "only_completed",
				"type": "Bool",
				"description": "Pass true to search only for completed downloads"
			},
			{
				"name": "offset",
				"type": "string",
				"description": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of files to be returned"
			}
		],
		"description": "Searches for files in the file download list or recently downloaded files from the list",
		"inheritance": "TLBaseClass",
		"return_type": "foundFileDownloads",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setApplicationVerificationToken",
		"methods": [
			{
				"name": "verification_id",
				"type": "int53",
				"description": "Unique identifier for the verification process as received from updateApplicationVerificationRequired or updateApplicationRecaptchaVerificationRequired"
			},
			{
				"name": "token",
				"type": "string",
				"description": "Play Integrity API token for the Android application, or secret from push notification for the iOS application for application verification, or reCAPTCHA token for reCAPTCHA verifications; pass an empty string to abort verification and receive error VERIFICATION_FAILED for the request"
			}
		],
		"description": "Application or reCAPTCHA verification has been completed. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getMessageFileType",
		"methods": [
			{
				"name": "message_file_head",
				"type": "string",
				"description": "Beginning of the message file; up to 100 first lines"
			}
		],
		"description": "Returns information about a file with messages exported from another application",
		"inheritance": "TLBaseClass",
		"return_type": "MessageFileType",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getMessageImportConfirmationText",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of a chat to which the messages will be imported. It must be an identifier of a private chat with a mutual contact or an identifier of a supergroup chat with can_change_info member right"
			}
		],
		"description": "Returns a confirmation text to be shown to the user before starting message import",
		"inheritance": "TLBaseClass",
		"return_type": "text",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "importMessages",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of a chat to which the messages will be imported. It must be an identifier of a private chat with a mutual contact or an identifier of a supergroup chat with can_change_info member right"
			},
			{
				"name": "message_file",
				"type": "InputFile",
				"description": "File with messages to import. Only inputFileLocal and inputFileGenerated are supported. The file must not be previously uploaded"
			},
			{
				"name": "attached_files",
				"type": "vector<InputFile>",
				"description": "Files used in the imported messages. Only inputFileLocal and inputFileGenerated are supported. The files must not be previously uploaded"
			}
		],
		"description": "Imports messages exported from another app",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "replacePrimaryChatInviteLink",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			}
		],
		"description": "Replaces current primary invite link for a chat with a new primary invite link. Available for basic groups, supergroups, and channels. Requires administrator privileges and can_invite_users right",
		"inheritance": "TLBaseClass",
		"return_type": "chatInviteLink",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "createChatInviteLink",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "name",
				"type": "string",
				"description": "Invite link name; 0-32 characters"
			},
			{
				"name": "expiration_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the link will expire; pass 0 if never"
			},
			{
				"name": "member_limit",
				"type": "int32",
				"description": "The maximum number of chat members that can join the chat via the link simultaneously; 0-99999; pass 0 if not limited"
			},
			{
				"name": "creates_join_request",
				"type": "Bool",
				"description": "Pass true if users joining the chat via the link need to be approved by chat administrators. In this case, member_limit must be 0"
			}
		],
		"description": "Creates a new invite link for a chat. Available for basic groups, supergroups, and channels. Requires administrator privileges and can_invite_users right in the chat",
		"inheritance": "TLBaseClass",
		"return_type": "chatInviteLink",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "createChatSubscriptionInviteLink",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "name",
				"type": "string",
				"description": "Invite link name; 0-32 characters"
			},
			{
				"name": "subscription_pricing",
				"type": "starSubscriptionPricing",
				"description": "Information about subscription plan that will be applied to the users joining the chat via the link. Subscription period must be 2592000 in production environment, and 60 or 300 if Telegram test environment is used"
			}
		],
		"description": "Creates a new subscription invite link for a channel chat. Requires can_invite_users right in the chat",
		"inheritance": "TLBaseClass",
		"return_type": "chatInviteLink",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editChatInviteLink",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "invite_link",
				"type": "string",
				"description": "Invite link to be edited"
			},
			{
				"name": "name",
				"type": "string",
				"description": "Invite link name; 0-32 characters"
			},
			{
				"name": "expiration_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the link will expire; pass 0 if never"
			},
			{
				"name": "member_limit",
				"type": "int32",
				"description": "The maximum number of chat members that can join the chat via the link simultaneously; 0-99999; pass 0 if not limited"
			},
			{
				"name": "creates_join_request",
				"type": "Bool",
				"description": "Pass true if users joining the chat via the link need to be approved by chat administrators. In this case, member_limit must be 0"
			}
		],
		"description": "Edits a non-primary invite link for a chat. Available for basic groups, supergroups, and channels. If the link creates a subscription, then expiration_date, member_limit and creates_join_request must not be used. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links",
		"inheritance": "TLBaseClass",
		"return_type": "chatInviteLink",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editChatSubscriptionInviteLink",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "invite_link",
				"type": "string",
				"description": "Invite link to be edited"
			},
			{
				"name": "name",
				"type": "string",
				"description": "Invite link name; 0-32 characters"
			}
		],
		"description": "Edits a subscription invite link for a channel chat. Requires can_invite_users right in the chat for own links and owner privileges for other links",
		"inheritance": "TLBaseClass",
		"return_type": "chatInviteLink",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatInviteLink",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "invite_link",
				"type": "string",
				"description": "Invite link to get"
			}
		],
		"description": "Returns information about an invite link. Requires administrator privileges and can_invite_users right in the chat to get own links and owner privileges to get other links",
		"inheritance": "TLBaseClass",
		"return_type": "chatInviteLink",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatInviteLinkCounts",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			}
		],
		"description": "Returns the list of chat administrators with number of their invite links. Requires owner privileges in the chat",
		"inheritance": "TLBaseClass",
		"return_type": "chatInviteLinkCounts",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatInviteLinks",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "creator_user_id",
				"type": "int53",
				"description": "User identifier of a chat administrator. Must be an identifier of the current user for non-owner"
			},
			{
				"name": "is_revoked",
				"type": "Bool",
				"description": "Pass true if revoked links needs to be returned instead of active or expired"
			},
			{
				"name": "offset_date",
				"type": "int32",
				"description": "Creation date of an invite link starting after which to return invite links; use 0 to get results from the beginning"
			},
			{
				"name": "offset_invite_link",
				"type": "string",
				"description": "Invite link starting after which to return invite links; use empty string to get results from the beginning"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of invite links to return; up to 100"
			}
		],
		"description": "Returns invite links for a chat created by specified administrator. Requires administrator privileges and can_invite_users right in the chat to get own links and owner privileges to get other links",
		"inheritance": "TLBaseClass",
		"return_type": "chatInviteLinks",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatInviteLinkMembers",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "invite_link",
				"type": "string",
				"description": "Invite link for which to return chat members"
			},
			{
				"name": "only_with_expired_subscription",
				"type": "Bool",
				"description": "Pass true if the link is a subscription link and only members with expired subscription must be returned"
			},
			{
				"name": "offset_member",
				"type": "chatInviteLinkMember",
				"description": "A chat member from which to return next chat members; pass null to get results from the beginning"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of chat members to return; up to 100"
			}
		],
		"description": "Returns chat members joined a chat via an invite link. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links",
		"inheritance": "TLBaseClass",
		"return_type": "chatInviteLinkMembers",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "revokeChatInviteLink",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "invite_link",
				"type": "string",
				"description": "Invite link to be revoked"
			}
		],
		"description": "Revokes invite link for a chat. Available for basic groups, supergroups, and channels. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links. If a primary link is revoked, then additionally to the revoked link returns new primary link",
		"inheritance": "TLBaseClass",
		"return_type": "chatInviteLinks",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteRevokedChatInviteLink",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "invite_link",
				"type": "string",
				"description": "Invite link to revoke"
			}
		],
		"description": "Deletes revoked chat invite links. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteAllRevokedChatInviteLinks",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "creator_user_id",
				"type": "int53",
				"description": "User identifier of a chat administrator, which links will be deleted. Must be an identifier of the current user for non-owner"
			}
		],
		"description": "Deletes all revoked chat invite links created by a given chat administrator. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "checkChatInviteLink",
		"methods": [
			{
				"name": "invite_link",
				"type": "string",
				"description": "Invite link to be checked"
			}
		],
		"description": "Checks the validity of an invite link for a chat and returns information about the corresponding chat",
		"inheritance": "TLBaseClass",
		"return_type": "chatInviteLinkInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "joinChatByInviteLink",
		"methods": [
			{
				"name": "invite_link",
				"type": "string",
				"description": "Invite link to use"
			}
		],
		"description": "Uses an invite link to add the current user to the chat if possible. May return an error with a message \"INVITE_REQUEST_SENT\" if only a join request was created",
		"inheritance": "TLBaseClass",
		"return_type": "chat",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatJoinRequests",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "invite_link",
				"type": "string",
				"description": "Invite link for which to return join requests. If empty, all join requests will be returned. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links"
			},
			{
				"name": "query",
				"type": "string",
				"description": "A query to search for in the first names, last names and usernames of the users to return"
			},
			{
				"name": "offset_request",
				"type": "chatJoinRequest",
				"description": "A chat join request from which to return next requests; pass null to get results from the beginning"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of requests to join the chat to return"
			}
		],
		"description": "Returns pending join requests in a chat",
		"inheritance": "TLBaseClass",
		"return_type": "chatJoinRequests",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "processChatJoinRequest",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user that sent the request"
			},
			{
				"name": "approve",
				"type": "Bool",
				"description": "Pass true to approve the request; pass false to decline it"
			}
		],
		"description": "Handles a pending join request in a chat",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "processChatJoinRequests",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "invite_link",
				"type": "string",
				"description": "Invite link for which to process join requests. If empty, all join requests will be processed. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links"
			},
			{
				"name": "approve",
				"type": "Bool",
				"description": "Pass true to approve all requests; pass false to decline them"
			}
		],
		"description": "Handles all pending join requests for a given link in a chat",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "createCall",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user to be called"
			},
			{
				"name": "protocol",
				"type": "callProtocol",
				"description": "The call protocols supported by the application"
			},
			{
				"name": "is_video",
				"type": "Bool",
				"description": "Pass true to create a video call"
			},
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Identifier of the group call to which the user will be added after exchanging private key via the call; pass 0 if none"
			}
		],
		"description": "Creates a new call",
		"inheritance": "TLBaseClass",
		"return_type": "callId",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "acceptCall",
		"methods": [
			{
				"name": "call_id",
				"type": "int32",
				"description": "Call identifier"
			},
			{
				"name": "protocol",
				"type": "callProtocol",
				"description": "The call protocols supported by the application"
			}
		],
		"description": "Accepts an incoming call",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "sendCallSignalingData",
		"methods": [
			{
				"name": "call_id",
				"type": "int32",
				"description": "Call identifier"
			},
			{
				"name": "data",
				"type": "bytes",
				"description": "The data"
			}
		],
		"description": "Sends call signaling data",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "discardCall",
		"methods": [
			{
				"name": "call_id",
				"type": "int32",
				"description": "Call identifier"
			},
			{
				"name": "is_disconnected",
				"type": "Bool",
				"description": "Pass true if the user was disconnected"
			},
			{
				"name": "duration",
				"type": "int32",
				"description": "The call duration, in seconds"
			},
			{
				"name": "is_video",
				"type": "Bool",
				"description": "Pass true if the call was a video call"
			},
			{
				"name": "connection_id",
				"type": "int64",
				"description": "Identifier of the connection used during the call"
			}
		],
		"description": "Discards a call",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "sendCallRating",
		"methods": [
			{
				"name": "call_id",
				"type": "int32",
				"description": "Call identifier"
			},
			{
				"name": "rating",
				"type": "int32",
				"description": "Call rating; 1-5"
			},
			{
				"name": "comment",
				"type": "string",
				"description": "An optional user comment if the rating is less than 5"
			},
			{
				"name": "problems",
				"type": "vector<CallProblem>",
				"description": "List of the exact types of problems with the call, specified by the user"
			}
		],
		"description": "Sends a call rating",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "sendCallDebugInformation",
		"methods": [
			{
				"name": "call_id",
				"type": "int32",
				"description": "Call identifier"
			},
			{
				"name": "debug_information",
				"type": "string",
				"description": "Debug information in application-specific format"
			}
		],
		"description": "Sends debug information for a call to Telegram servers",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "sendCallLog",
		"methods": [
			{
				"name": "call_id",
				"type": "int32",
				"description": "Call identifier"
			},
			{
				"name": "log_file",
				"type": "InputFile",
				"description": "Call log file. Only inputFileLocal and inputFileGenerated are supported"
			}
		],
		"description": "Sends log file for a call to Telegram servers",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getVideoChatAvailableParticipants",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			}
		],
		"description": "Returns the list of participant identifiers, on whose behalf a video chat in the chat can be joined",
		"inheritance": "TLBaseClass",
		"return_type": "messageSenders",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setVideoChatDefaultParticipant",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "default_participant_id",
				"type": "MessageSender",
				"description": "Default group call participant identifier to join the video chats"
			}
		],
		"description": "Changes default participant identifier, on whose behalf a video chat in the chat will be joined",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "createVideoChat",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of a chat in which the video chat will be created"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Group call title; if empty, chat title will be used"
			},
			{
				"name": "start_date",
				"type": "int32",
				"description": "Point in time (Unix timestamp) when the group call is expected to be started by an administrator; 0 to start the video chat immediately. The date must be at least 10 seconds and at most 8 days in the future"
			},
			{
				"name": "is_rtmp_stream",
				"type": "Bool",
				"description": "Pass true to create an RTMP stream instead of an ordinary video chat"
			}
		],
		"description": "Creates a video chat (a group call bound to a chat). Available only for basic groups, supergroups and channels; requires can_manage_video_chats administrator right",
		"inheritance": "TLBaseClass",
		"return_type": "groupCallId",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "createGroupCall",
		"methods": [
			{
				"name": "call_id",
				"type": "int32",
				"description": "Call identifier"
			}
		],
		"description": "Creates a group call from a one-to-one call",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getVideoChatRtmpUrl",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			}
		],
		"description": "Returns RTMP URL for streaming to the chat; requires can_manage_video_chats administrator right",
		"inheritance": "TLBaseClass",
		"return_type": "rtmpUrl",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "replaceVideoChatRtmpUrl",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			}
		],
		"description": "Replaces the current RTMP URL for streaming to the chat; requires owner privileges",
		"inheritance": "TLBaseClass",
		"return_type": "rtmpUrl",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getGroupCall",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Group call identifier"
			}
		],
		"description": "Returns information about a group call",
		"inheritance": "TLBaseClass",
		"return_type": "groupCall",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "startScheduledGroupCall",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Group call identifier"
			}
		],
		"description": "Starts a scheduled group call",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleGroupCallEnabledStartNotification",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Group call identifier"
			},
			{
				"name": "enabled_start_notification",
				"type": "Bool",
				"description": "New value of the enabled_start_notification setting"
			}
		],
		"description": "Toggles whether the current user will receive a notification when the group call starts; scheduled group calls only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "joinGroupCall",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Group call identifier"
			},
			{
				"name": "participant_id",
				"type": "MessageSender",
				"description": "Identifier of a group call participant, which will be used to join the call; pass null to join as self; video chats only"
			},
			{
				"name": "audio_source_id",
				"type": "int32",
				"description": "Caller audio channel synchronization source identifier; received from tgcalls"
			},
			{
				"name": "payload",
				"type": "string",
				"description": "Group call join payload; received from tgcalls"
			},
			{
				"name": "is_muted",
				"type": "Bool",
				"description": "Pass true to join the call with muted microphone"
			},
			{
				"name": "is_my_video_enabled",
				"type": "Bool",
				"description": "Pass true if the user's video is enabled"
			},
			{
				"name": "invite_hash",
				"type": "string",
				"description": "If non-empty, invite hash to be used to join the group call without being muted by administrators"
			},
			{
				"name": "key_fingerprint",
				"type": "int64",
				"description": "Fingerprint of the encryption key for E2E group calls not bound to a chat; pass 0 for voice chats"
			}
		],
		"description": "Joins an active group call. Returns join response payload for tgcalls",
		"inheritance": "TLBaseClass",
		"return_type": "text",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "startGroupCallScreenSharing",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Group call identifier"
			},
			{
				"name": "audio_source_id",
				"type": "int32",
				"description": "Screen sharing audio channel synchronization source identifier; received from tgcalls"
			},
			{
				"name": "payload",
				"type": "string",
				"description": "Group call join payload; received from tgcalls"
			}
		],
		"description": "Starts screen sharing in a joined group call. Returns join response payload for tgcalls",
		"inheritance": "TLBaseClass",
		"return_type": "text",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleGroupCallScreenSharingIsPaused",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Group call identifier"
			},
			{
				"name": "is_paused",
				"type": "Bool",
				"description": "Pass true to pause screen sharing; pass false to unpause it"
			}
		],
		"description": "Pauses or unpauses screen sharing in a joined group call",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "endGroupCallScreenSharing",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Group call identifier"
			}
		],
		"description": "Ends screen sharing in a joined group call",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setGroupCallTitle",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Group call identifier"
			},
			{
				"name": "title",
				"type": "string",
				"description": "New group call title; 1-64 characters"
			}
		],
		"description": "Sets group call title. Requires groupCall.can_be_managed group call flag",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleGroupCallMuteNewParticipants",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Group call identifier"
			},
			{
				"name": "mute_new_participants",
				"type": "Bool",
				"description": "New value of the mute_new_participants setting"
			}
		],
		"description": "Toggles whether new participants of a group call can be unmuted only by administrators of the group call. Requires groupCall.can_toggle_mute_new_participants group call flag",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "inviteGroupCallParticipants",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Group call identifier"
			},
			{
				"name": "user_ids",
				"type": "vector<int53>",
				"description": "User identifiers. At most 10 users can be invited simultaneously"
			}
		],
		"description": "Invites users to an active group call. Sends a service message of type messageInviteVideoChatParticipants for video chats",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getGroupCallInviteLink",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Group call identifier"
			},
			{
				"name": "can_self_unmute",
				"type": "Bool",
				"description": "Pass true if the invite link needs to contain an invite hash, passing which to joinGroupCall would allow the invited user to unmute themselves. Requires groupCall.can_be_managed group call flag"
			}
		],
		"description": "Returns invite link to a video chat in a public chat",
		"inheritance": "TLBaseClass",
		"return_type": "httpUrl",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "revokeGroupCallInviteLink",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Group call identifier"
			}
		],
		"description": "Revokes invite link for a group call. Requires groupCall.can_be_managed group call flag",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "startGroupCallRecording",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Group call identifier"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Group call recording title; 0-64 characters"
			},
			{
				"name": "record_video",
				"type": "Bool",
				"description": "Pass true to record a video file instead of an audio file"
			},
			{
				"name": "use_portrait_orientation",
				"type": "Bool",
				"description": "Pass true to use portrait orientation for video instead of landscape one"
			}
		],
		"description": "Starts recording of an active group call. Requires groupCall.can_be_managed group call flag",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "endGroupCallRecording",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Group call identifier"
			}
		],
		"description": "Ends recording of an active group call. Requires groupCall.can_be_managed group call flag",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleGroupCallIsMyVideoPaused",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Group call identifier"
			},
			{
				"name": "is_my_video_paused",
				"type": "Bool",
				"description": "Pass true if the current user's video is paused"
			}
		],
		"description": "Toggles whether current user's video is paused",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleGroupCallIsMyVideoEnabled",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Group call identifier"
			},
			{
				"name": "is_my_video_enabled",
				"type": "Bool",
				"description": "Pass true if the current user's video is enabled"
			}
		],
		"description": "Toggles whether current user's video is enabled",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setGroupCallParticipantIsSpeaking",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Group call identifier"
			},
			{
				"name": "audio_source",
				"type": "int32",
				"description": "Group call participant's synchronization audio source identifier, or 0 for the current user"
			},
			{
				"name": "is_speaking",
				"type": "Bool",
				"description": "Pass true if the user is speaking"
			}
		],
		"description": "Informs TDLib that speaking state of a participant of an active group has changed",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleGroupCallParticipantIsMuted",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Group call identifier"
			},
			{
				"name": "participant_id",
				"type": "MessageSender",
				"description": "Participant identifier"
			},
			{
				"name": "is_muted",
				"type": "Bool",
				"description": "Pass true to mute the user; pass false to unmute them"
			}
		],
		"description": "Toggles whether a participant of an active group call is muted, unmuted, or allowed to unmute themselves",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setGroupCallParticipantVolumeLevel",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Group call identifier"
			},
			{
				"name": "participant_id",
				"type": "MessageSender",
				"description": "Participant identifier"
			},
			{
				"name": "volume_level",
				"type": "int32",
				"description": "New participant's volume level; 1-20000 in hundreds of percents"
			}
		],
		"description": "Changes volume level of a participant of an active group call. If the current user can manage the group call, then the participant's volume level will be changed for all users with the default volume level",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleGroupCallParticipantIsHandRaised",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Group call identifier"
			},
			{
				"name": "participant_id",
				"type": "MessageSender",
				"description": "Participant identifier"
			},
			{
				"name": "is_hand_raised",
				"type": "Bool",
				"description": "Pass true if the user's hand needs to be raised. Only self hand can be raised. Requires groupCall.can_be_managed group call flag to lower other's hand"
			}
		],
		"description": "Toggles whether a group call participant hand is rased",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "loadGroupCallParticipants",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Group call identifier. The group call must be previously received through getGroupCall and must be joined or being joined"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of participants to load; up to 100"
			}
		],
		"description": "Loads more participants of a group call. The loaded participants will be received through updates. Use the field groupCall.loaded_all_participants to check whether all participants have already been loaded",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "leaveGroupCall",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Group call identifier"
			}
		],
		"description": "Leaves a group call",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "endGroupCall",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Group call identifier"
			}
		],
		"description": "Ends a group call. Requires groupCall.can_be_managed",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getGroupCallStreams",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Group call identifier"
			}
		],
		"description": "Returns information about available group call streams",
		"inheritance": "TLBaseClass",
		"return_type": "groupCallStreams",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getGroupCallStreamSegment",
		"methods": [
			{
				"name": "group_call_id",
				"type": "int32",
				"description": "Group call identifier"
			},
			{
				"name": "time_offset",
				"type": "int53",
				"description": "Point in time when the stream segment begins; Unix timestamp in milliseconds"
			},
			{
				"name": "scale",
				"type": "int32",
				"description": "Segment duration scale; 0-1. Segment's duration is 1000/(2**scale) milliseconds"
			},
			{
				"name": "channel_id",
				"type": "int32",
				"description": "Identifier of an audio/video channel to get as received from tgcalls"
			},
			{
				"name": "video_quality",
				"type": "GroupCallVideoQuality",
				"description": "Video quality as received from tgcalls; pass null to get the worst available quality"
			}
		],
		"description": "Returns a file with a segment of a group call stream in a modified OGG format for audio or MPEG-4 format for video",
		"inheritance": "TLBaseClass",
		"return_type": "filePart",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setMessageSenderBlockList",
		"methods": [
			{
				"name": "sender_id",
				"type": "MessageSender",
				"description": "Identifier of a message sender to block/unblock"
			},
			{
				"name": "block_list",
				"type": "BlockList",
				"description": "New block list for the message sender; pass null to unblock the message sender"
			}
		],
		"description": "Changes the block list of a message sender. Currently, only users and supergroup chats can be blocked",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "blockMessageSenderFromReplies",
		"methods": [
			{
				"name": "message_id",
				"type": "int53",
				"description": "The identifier of an incoming message in the Replies chat"
			},
			{
				"name": "delete_message",
				"type": "Bool",
				"description": "Pass true to delete the message"
			},
			{
				"name": "delete_all_messages",
				"type": "Bool",
				"description": "Pass true to delete all messages from the same sender"
			},
			{
				"name": "report_spam",
				"type": "Bool",
				"description": "Pass true to report the sender to the Telegram moderators"
			}
		],
		"description": "Blocks an original sender of a message in the Replies chat",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getBlockedMessageSenders",
		"methods": [
			{
				"name": "block_list",
				"type": "BlockList",
				"description": "Block list from which to return users"
			},
			{
				"name": "offset",
				"type": "int32",
				"description": "Number of users and chats to skip in the result; must be non-negative"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of users and chats to return; up to 100"
			}
		],
		"description": "Returns users and chats that were blocked by the current user",
		"inheritance": "TLBaseClass",
		"return_type": "messageSenders",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "addContact",
		"methods": [
			{
				"name": "contact",
				"type": "contact",
				"description": "The contact to add or edit; phone number may be empty and needs to be specified only if known, vCard is ignored"
			},
			{
				"name": "share_phone_number",
				"type": "Bool",
				"description": "Pass true to share the current user's phone number with the new contact. A corresponding rule to userPrivacySettingShowPhoneNumber will be added if needed. Use the field userFullInfo.need_phone_number_privacy_exception to check whether the current user needs to be asked to share their phone number"
			}
		],
		"description": "Adds a user to the contact list or edits an existing contact by their user identifier",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "importContacts",
		"methods": [
			{
				"name": "contacts",
				"type": "vector<contact>",
				"description": "The list of contacts to import or edit; contacts' vCard are ignored and are not imported"
			}
		],
		"description": "Adds new contacts or edits existing contacts by their phone numbers; contacts' user identifiers are ignored",
		"inheritance": "TLBaseClass",
		"return_type": "importedContacts",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getContacts",
		"methods": null,
		"description": "Returns all contacts of the user",
		"inheritance": "TLBaseClass",
		"return_type": "users",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchContacts",
		"methods": [
			{
				"name": "query",
				"type": "string",
				"description": "Query to search for; may be empty to return all contacts"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of users to be returned"
			}
		],
		"description": "Searches for the specified query in the first names, last names and usernames of the known user contacts",
		"inheritance": "TLBaseClass",
		"return_type": "users",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "removeContacts",
		"methods": [
			{
				"name": "user_ids",
				"type": "vector<int53>",
				"description": "Identifiers of users to be deleted"
			}
		],
		"description": "Removes users from the contact list",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getImportedContactCount",
		"methods": null,
		"description": "Returns the total number of imported contacts",
		"inheritance": "TLBaseClass",
		"return_type": "count",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "changeImportedContacts",
		"methods": [
			{
				"name": "contacts",
				"type": "vector<contact>",
				"description": "The new list of contacts, contact's vCard are ignored and are not imported"
			}
		],
		"description": "Changes imported contacts using the list of contacts saved on the device. Imports newly added contacts and, if at least the file database is enabled, deletes recently deleted contacts. Query result depends on the result of the previous query, so only one query is possible at the same time",
		"inheritance": "TLBaseClass",
		"return_type": "importedContacts",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "clearImportedContacts",
		"methods": null,
		"description": "Clears all imported contacts, contact list remains unchanged",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setCloseFriends",
		"methods": [
			{
				"name": "user_ids",
				"type": "vector<int53>",
				"description": "User identifiers of close friends; the users must be contacts of the current user"
			}
		],
		"description": "Changes the list of close friends of the current user",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getCloseFriends",
		"methods": null,
		"description": "Returns all close friends of the current user",
		"inheritance": "TLBaseClass",
		"return_type": "users",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setUserPersonalProfilePhoto",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			},
			{
				"name": "photo",
				"type": "InputChatPhoto",
				"description": "Profile photo to set; pass null to delete the photo; inputChatPhotoPrevious isn't supported in this function"
			}
		],
		"description": "Changes a personal profile photo of a contact user",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "suggestUserProfilePhoto",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			},
			{
				"name": "photo",
				"type": "InputChatPhoto",
				"description": "Profile photo to suggest; inputChatPhotoPrevious isn't supported in this function"
			}
		],
		"description": "Suggests a profile photo to another regular user with common messages and allowing non-paid messages",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleBotCanManageEmojiStatus",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "User identifier of the bot"
			},
			{
				"name": "can_manage_emoji_status",
				"type": "Bool",
				"description": "Pass true if the bot is allowed to change emoji status of the user; pass false otherwise"
			}
		],
		"description": "Toggles whether the bot can manage emoji status of the current user",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setUserEmojiStatus",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user"
			},
			{
				"name": "emoji_status",
				"type": "emojiStatus",
				"description": "New emoji status; pass null to switch to the default badge"
			}
		],
		"description": "Changes the emoji status of a user; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchUserByPhoneNumber",
		"methods": [
			{
				"name": "phone_number",
				"type": "string",
				"description": "Phone number to search for"
			},
			{
				"name": "only_local",
				"type": "Bool",
				"description": "Pass true to get only locally available information without sending network requests"
			}
		],
		"description": "Searches a user by their phone number. Returns a 404 error if the user can't be found",
		"inheritance": "TLBaseClass",
		"return_type": "user",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "sharePhoneNumber",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user with whom to share the phone number. The user must be a mutual contact"
			}
		],
		"description": "Shares the phone number of the current user with a mutual contact. Supposed to be called when the user clicks on chatActionBarSharePhoneNumber",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getUserProfilePhotos",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			},
			{
				"name": "offset",
				"type": "int32",
				"description": "The number of photos to skip; must be non-negative"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of photos to be returned; up to 100"
			}
		],
		"description": "Returns the profile photos of a user. Personal and public photo aren't returned",
		"inheritance": "TLBaseClass",
		"return_type": "chatPhotos",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getStickerOutline",
		"methods": [
			{
				"name": "sticker_file_id",
				"type": "int32",
				"description": "File identifier of the sticker"
			},
			{
				"name": "for_animated_emoji",
				"type": "Bool",
				"description": "Pass true to get the outline scaled for animated emoji"
			},
			{
				"name": "for_clicked_animated_emoji_message",
				"type": "Bool",
				"description": "Pass true to get the outline scaled for clicked animated emoji message"
			}
		],
		"description": "Returns outline of a sticker. This is an offline method. Returns a 404 error if the outline isn't known",
		"inheritance": "TLBaseClass",
		"return_type": "outline",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getStickers",
		"methods": [
			{
				"name": "sticker_type",
				"type": "StickerType",
				"description": "Type of the stickers to return"
			},
			{
				"name": "query",
				"type": "string",
				"description": "Search query; a space-separated list of emojis or a keyword prefix. If empty, returns all known installed stickers"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of stickers to be returned"
			},
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier for which to return stickers. Available custom emoji stickers may be different for different chats"
			}
		],
		"description": "Returns stickers from the installed sticker sets that correspond to any of the given emoji or can be found by sticker-specific keywords. If the query is non-empty, then favorite, recently used or trending stickers may also be returned",
		"inheritance": "TLBaseClass",
		"return_type": "stickers",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getAllStickerEmojis",
		"methods": [
			{
				"name": "sticker_type",
				"type": "StickerType",
				"description": "Type of the stickers to search for"
			},
			{
				"name": "query",
				"type": "string",
				"description": "Search query"
			},
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier for which to find stickers"
			},
			{
				"name": "return_only_main_emoji",
				"type": "Bool",
				"description": "Pass true if only main emoji for each found sticker must be included in the result"
			}
		],
		"description": "Returns unique emoji that correspond to stickers to be found by the getStickers(sticker_type, query, 1000000, chat_id)",
		"inheritance": "TLBaseClass",
		"return_type": "emojis",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchStickers",
		"methods": [
			{
				"name": "sticker_type",
				"type": "StickerType",
				"description": "Type of the stickers to return"
			},
			{
				"name": "emojis",
				"type": "string",
				"description": "Space-separated list of emojis to search for"
			},
			{
				"name": "query",
				"type": "string",
				"description": "Query to search for; may be empty to search for emoji only"
			},
			{
				"name": "input_language_codes",
				"type": "vector<string>",
				"description": "List of possible IETF language tags of the user's input language; may be empty if unknown"
			},
			{
				"name": "offset",
				"type": "int32",
				"description": "The offset from which to return the stickers; must be non-negative"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of stickers to be returned; 0-100"
			}
		],
		"description": "Searches for stickers from public sticker sets that correspond to any of the given emoji",
		"inheritance": "TLBaseClass",
		"return_type": "stickers",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getGreetingStickers",
		"methods": null,
		"description": "Returns greeting stickers from regular sticker sets that can be used for the start page of other users",
		"inheritance": "TLBaseClass",
		"return_type": "stickers",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getPremiumStickers",
		"methods": [
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of stickers to be returned; 0-100"
			}
		],
		"description": "Returns premium stickers from regular sticker sets",
		"inheritance": "TLBaseClass",
		"return_type": "stickers",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getInstalledStickerSets",
		"methods": [
			{
				"name": "sticker_type",
				"type": "StickerType",
				"description": "Type of the sticker sets to return"
			}
		],
		"description": "Returns a list of installed sticker sets",
		"inheritance": "TLBaseClass",
		"return_type": "stickerSets",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getArchivedStickerSets",
		"methods": [
			{
				"name": "sticker_type",
				"type": "StickerType",
				"description": "Type of the sticker sets to return"
			},
			{
				"name": "offset_sticker_set_id",
				"type": "int64",
				"description": "Identifier of the sticker set from which to return the result; use 0 to get results from the beginning"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of sticker sets to return; up to 100"
			}
		],
		"description": "Returns a list of archived sticker sets",
		"inheritance": "TLBaseClass",
		"return_type": "stickerSets",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getTrendingStickerSets",
		"methods": [
			{
				"name": "sticker_type",
				"type": "StickerType",
				"description": "Type of the sticker sets to return"
			},
			{
				"name": "offset",
				"type": "int32",
				"description": "The offset from which to return the sticker sets; must be non-negative"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of sticker sets to be returned; up to 100. For optimal performance, the number of returned sticker sets is chosen by TDLib and can be smaller than the specified limit, even if the end of the list has not been reached"
			}
		],
		"description": "Returns a list of trending sticker sets. For optimal performance, the number of returned sticker sets is chosen by TDLib",
		"inheritance": "TLBaseClass",
		"return_type": "trendingStickerSets",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getAttachedStickerSets",
		"methods": [
			{
				"name": "file_id",
				"type": "int32",
				"description": "File identifier"
			}
		],
		"description": "Returns a list of sticker sets attached to a file, including regular, mask, and emoji sticker sets. Currently, only animations, photos, and videos can have attached sticker sets",
		"inheritance": "TLBaseClass",
		"return_type": "stickerSets",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getStickerSet",
		"methods": [
			{
				"name": "set_id",
				"type": "int64",
				"description": "Identifier of the sticker set"
			}
		],
		"description": "Returns information about a sticker set by its identifier",
		"inheritance": "TLBaseClass",
		"return_type": "stickerSet",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getStickerSetName",
		"methods": [
			{
				"name": "set_id",
				"type": "int64",
				"description": "Identifier of the sticker set"
			}
		],
		"description": "Returns name of a sticker set by its identifier",
		"inheritance": "TLBaseClass",
		"return_type": "text",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchStickerSet",
		"methods": [
			{
				"name": "name",
				"type": "string",
				"description": "Name of the sticker set"
			},
			{
				"name": "ignore_cache",
				"type": "Bool",
				"description": "Pass true to ignore local cache of sticker sets and always send a network request"
			}
		],
		"description": "Searches for a sticker set by its name",
		"inheritance": "TLBaseClass",
		"return_type": "stickerSet",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchInstalledStickerSets",
		"methods": [
			{
				"name": "sticker_type",
				"type": "StickerType",
				"description": "Type of the sticker sets to search for"
			},
			{
				"name": "query",
				"type": "string",
				"description": "Query to search for"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of sticker sets to return"
			}
		],
		"description": "Searches for installed sticker sets by looking for specified query in their title and name",
		"inheritance": "TLBaseClass",
		"return_type": "stickerSets",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchStickerSets",
		"methods": [
			{
				"name": "sticker_type",
				"type": "StickerType",
				"description": "Type of the sticker sets to return"
			},
			{
				"name": "query",
				"type": "string",
				"description": "Query to search for"
			}
		],
		"description": "Searches for sticker sets by looking for specified query in their title and name. Excludes installed sticker sets from the results",
		"inheritance": "TLBaseClass",
		"return_type": "stickerSets",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "changeStickerSet",
		"methods": [
			{
				"name": "set_id",
				"type": "int64",
				"description": "Identifier of the sticker set"
			},
			{
				"name": "is_installed",
				"type": "Bool",
				"description": "The new value of is_installed"
			},
			{
				"name": "is_archived",
				"type": "Bool",
				"description": "The new value of is_archived. A sticker set can't be installed and archived simultaneously"
			}
		],
		"description": "Installs/uninstalls or activates/archives a sticker set",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "viewTrendingStickerSets",
		"methods": [
			{
				"name": "sticker_set_ids",
				"type": "vector<int64>",
				"description": "Identifiers of viewed trending sticker sets"
			}
		],
		"description": "Informs the server that some trending sticker sets have been viewed by the user",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "reorderInstalledStickerSets",
		"methods": [
			{
				"name": "sticker_type",
				"type": "StickerType",
				"description": "Type of the sticker sets to reorder"
			},
			{
				"name": "sticker_set_ids",
				"type": "vector<int64>",
				"description": "Identifiers of installed sticker sets in the new correct order"
			}
		],
		"description": "Changes the order of installed sticker sets",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getRecentStickers",
		"methods": [
			{
				"name": "is_attached",
				"type": "Bool",
				"description": "Pass true to return stickers and masks that were recently attached to photos or video files; pass false to return recently sent stickers"
			}
		],
		"description": "Returns a list of recently used stickers",
		"inheritance": "TLBaseClass",
		"return_type": "stickers",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "addRecentSticker",
		"methods": [
			{
				"name": "is_attached",
				"type": "Bool",
				"description": "Pass true to add the sticker to the list of stickers recently attached to photo or video files; pass false to add the sticker to the list of recently sent stickers"
			},
			{
				"name": "sticker",
				"type": "InputFile",
				"description": "Sticker file to add"
			}
		],
		"description": "Manually adds a new sticker to the list of recently used stickers. The new sticker is added to the top of the list. If the sticker was already in the list, it is removed from the list first. Only stickers belonging to a sticker set or in WEBP or WEBM format can be added to this list. Emoji stickers can't be added to recent stickers",
		"inheritance": "TLBaseClass",
		"return_type": "stickers",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "removeRecentSticker",
		"methods": [
			{
				"name": "is_attached",
				"type": "Bool",
				"description": "Pass true to remove the sticker from the list of stickers recently attached to photo or video files; pass false to remove the sticker from the list of recently sent stickers"
			},
			{
				"name": "sticker",
				"type": "InputFile",
				"description": "Sticker file to delete"
			}
		],
		"description": "Removes a sticker from the list of recently used stickers",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "clearRecentStickers",
		"methods": [
			{
				"name": "is_attached",
				"type": "Bool",
				"description": "Pass true to clear the list of stickers recently attached to photo or video files; pass false to clear the list of recently sent stickers"
			}
		],
		"description": "Clears the list of recently used stickers",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getFavoriteStickers",
		"methods": null,
		"description": "Returns favorite stickers",
		"inheritance": "TLBaseClass",
		"return_type": "stickers",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "addFavoriteSticker",
		"methods": [
			{
				"name": "sticker",
				"type": "InputFile",
				"description": "Sticker file to add"
			}
		],
		"description": "Adds a new sticker to the list of favorite stickers. The new sticker is added to the top of the list. If the sticker was already in the list, it is removed from the list first. Only stickers belonging to a sticker set or in WEBP or WEBM format can be added to this list. Emoji stickers can't be added to favorite stickers",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "removeFavoriteSticker",
		"methods": [
			{
				"name": "sticker",
				"type": "InputFile",
				"description": "Sticker file to delete from the list"
			}
		],
		"description": "Removes a sticker from the list of favorite stickers",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getStickerEmojis",
		"methods": [
			{
				"name": "sticker",
				"type": "InputFile",
				"description": "Sticker file identifier"
			}
		],
		"description": "Returns emoji corresponding to a sticker. The list is only for informational purposes, because a sticker is always sent with a fixed emoji from the corresponding Sticker object",
		"inheritance": "TLBaseClass",
		"return_type": "emojis",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchEmojis",
		"methods": [
			{
				"name": "text",
				"type": "string",
				"description": "Text to search for"
			},
			{
				"name": "input_language_codes",
				"type": "vector<string>",
				"description": "List of possible IETF language tags of the user's input language; may be empty if unknown"
			}
		],
		"description": "Searches for emojis by keywords. Supported only if the file database is enabled. Order of results is unspecified",
		"inheritance": "TLBaseClass",
		"return_type": "emojiKeywords",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getKeywordEmojis",
		"methods": [
			{
				"name": "text",
				"type": "string",
				"description": "Text to search for"
			},
			{
				"name": "input_language_codes",
				"type": "vector<string>",
				"description": "List of possible IETF language tags of the user's input language; may be empty if unknown"
			}
		],
		"description": "Return emojis matching the keyword. Supported only if the file database is enabled. Order of results is unspecified",
		"inheritance": "TLBaseClass",
		"return_type": "emojis",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getEmojiCategories",
		"methods": [
			{
				"name": "type",
				"type": "EmojiCategoryType",
				"description": "Type of emoji categories to return; pass null to get default emoji categories"
			}
		],
		"description": "Returns available emoji categories",
		"inheritance": "TLBaseClass",
		"return_type": "emojiCategories",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getAnimatedEmoji",
		"methods": [
			{
				"name": "emoji",
				"type": "string",
				"description": "The emoji"
			}
		],
		"description": "Returns an animated emoji corresponding to a given emoji. Returns a 404 error if the emoji has no animated emoji",
		"inheritance": "TLBaseClass",
		"return_type": "animatedEmoji",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getEmojiSuggestionsUrl",
		"methods": [
			{
				"name": "language_code",
				"type": "string",
				"description": "Language code for which the emoji replacements will be suggested"
			}
		],
		"description": "Returns an HTTP URL which can be used to automatically log in to the translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation",
		"inheritance": "TLBaseClass",
		"return_type": "httpUrl",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getCustomEmojiStickers",
		"methods": [
			{
				"name": "custom_emoji_ids",
				"type": "vector<int64>",
				"description": "Identifiers of custom emoji stickers. At most 200 custom emoji stickers can be received simultaneously"
			}
		],
		"description": "Returns the list of custom emoji stickers by their identifiers. Stickers are returned in arbitrary order. Only found stickers are returned",
		"inheritance": "TLBaseClass",
		"return_type": "stickers",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getDefaultChatPhotoCustomEmojiStickers",
		"methods": null,
		"description": "Returns default list of custom emoji stickers for placing on a chat photo",
		"inheritance": "TLBaseClass",
		"return_type": "stickers",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getDefaultProfilePhotoCustomEmojiStickers",
		"methods": null,
		"description": "Returns default list of custom emoji stickers for placing on a profile photo",
		"inheritance": "TLBaseClass",
		"return_type": "stickers",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getDefaultBackgroundCustomEmojiStickers",
		"methods": null,
		"description": "Returns default list of custom emoji stickers for reply background",
		"inheritance": "TLBaseClass",
		"return_type": "stickers",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getSavedAnimations",
		"methods": null,
		"description": "Returns saved animations",
		"inheritance": "TLBaseClass",
		"return_type": "animations",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "addSavedAnimation",
		"methods": [
			{
				"name": "animation",
				"type": "InputFile",
				"description": "The animation file to be added. Only animations known to the server (i.e., successfully sent via a message) can be added to the list"
			}
		],
		"description": "Manually adds a new animation to the list of saved animations. The new animation is added to the beginning of the list. If the animation was already in the list, it is removed first. Only non-secret video animations with MIME type \"video/mp4\" can be added to the list",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "removeSavedAnimation",
		"methods": [
			{
				"name": "animation",
				"type": "InputFile",
				"description": "Animation file to be removed"
			}
		],
		"description": "Removes an animation from the list of saved animations",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getRecentInlineBots",
		"methods": null,
		"description": "Returns up to 20 recently used inline bots in the order of their last usage",
		"inheritance": "TLBaseClass",
		"return_type": "users",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getOwnedBots",
		"methods": null,
		"description": "Returns the list of bots owned by the current user",
		"inheritance": "TLBaseClass",
		"return_type": "users",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchHashtags",
		"methods": [
			{
				"name": "prefix",
				"type": "string",
				"description": "Hashtag prefix to search for"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of hashtags to be returned"
			}
		],
		"description": "Searches for recently used hashtags by their prefix",
		"inheritance": "TLBaseClass",
		"return_type": "hashtags",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "removeRecentHashtag",
		"methods": [
			{
				"name": "hashtag",
				"type": "string",
				"description": "Hashtag to delete"
			}
		],
		"description": "Removes a hashtag from the list of recently used hashtags",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getLinkPreview",
		"methods": [
			{
				"name": "text",
				"type": "formattedText",
				"description": "Message text with formatting"
			},
			{
				"name": "link_preview_options",
				"type": "linkPreviewOptions",
				"description": "Options to be used for generation of the link preview; pass null to use default link preview options"
			}
		],
		"description": "Returns a link preview by the text of a message. Do not call this function too often. Returns a 404 error if the text has no link preview",
		"inheritance": "TLBaseClass",
		"return_type": "linkPreview",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getWebPageInstantView",
		"methods": [
			{
				"name": "url",
				"type": "string",
				"description": "The web page URL"
			},
			{
				"name": "only_local",
				"type": "Bool",
				"description": "Pass true to get only locally available information without sending network requests"
			}
		],
		"description": "Returns an instant view version of a web page if available. This is an offline method if only_local is true. Returns a 404 error if the web page has no instant view page",
		"inheritance": "TLBaseClass",
		"return_type": "webPageInstantView",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setProfilePhoto",
		"methods": [
			{
				"name": "photo",
				"type": "InputChatPhoto",
				"description": "Profile photo to set"
			},
			{
				"name": "is_public",
				"type": "Bool",
				"description": "Pass true to set a public photo, which will be visible even the main photo is hidden by privacy settings"
			}
		],
		"description": "Changes a profile photo for the current user",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteProfilePhoto",
		"methods": [
			{
				"name": "profile_photo_id",
				"type": "int64",
				"description": "Identifier of the profile photo to delete"
			}
		],
		"description": "Deletes a profile photo",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setAccentColor",
		"methods": [
			{
				"name": "accent_color_id",
				"type": "int32",
				"description": "Identifier of the accent color to use"
			},
			{
				"name": "background_custom_emoji_id",
				"type": "int64",
				"description": "Identifier of a custom emoji to be shown on the reply header and link preview background; 0 if none"
			}
		],
		"description": "Changes accent color and background custom emoji for the current user; for Telegram Premium users only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setProfileAccentColor",
		"methods": [
			{
				"name": "profile_accent_color_id",
				"type": "int32",
				"description": "Identifier of the accent color to use for profile; pass -1 if none"
			},
			{
				"name": "profile_background_custom_emoji_id",
				"type": "int64",
				"description": "Identifier of a custom emoji to be shown on the user's profile photo background; 0 if none"
			}
		],
		"description": "Changes accent color and background custom emoji for profile of the current user; for Telegram Premium users only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setName",
		"methods": [
			{
				"name": "first_name",
				"type": "string",
				"description": "The new value of the first name for the current user; 1-64 characters"
			},
			{
				"name": "last_name",
				"type": "string",
				"description": "The new value of the optional last name for the current user; 0-64 characters"
			}
		],
		"description": "Changes the first and last name of the current user",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setBio",
		"methods": [
			{
				"name": "bio",
				"type": "string",
				"description": "The new value of the user bio; 0-getOption(\"bio_length_max\") characters without line feeds"
			}
		],
		"description": "Changes the bio of the current user",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setUsername",
		"methods": [
			{
				"name": "username",
				"type": "string",
				"description": "The new value of the username. Use an empty string to remove the username. The username can't be completely removed if there is another active or disabled username"
			}
		],
		"description": "Changes the editable username of the current user",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleUsernameIsActive",
		"methods": [
			{
				"name": "username",
				"type": "string",
				"description": "The username to change"
			},
			{
				"name": "is_active",
				"type": "Bool",
				"description": "Pass true to activate the username; pass false to disable it"
			}
		],
		"description": "Changes active state for a username of the current user. The editable username can't be disabled. May return an error with a message \"USERNAMES_ACTIVE_TOO_MUCH\" if the maximum number of active usernames has been reached",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "reorderActiveUsernames",
		"methods": [
			{
				"name": "usernames",
				"type": "vector<string>",
				"description": "The new order of active usernames. All currently active usernames must be specified"
			}
		],
		"description": "Changes order of active usernames of the current user",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setBirthdate",
		"methods": [
			{
				"name": "birthdate",
				"type": "birthdate",
				"description": "The new value of the current user's birthdate; pass null to remove the birthdate"
			}
		],
		"description": "Changes the birthdate of the current user",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setPersonalChat",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the new personal chat; pass 0 to remove the chat. Use getSuitablePersonalChats to get suitable chats"
			}
		],
		"description": "Changes the personal chat of the current user",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setEmojiStatus",
		"methods": [
			{
				"name": "emoji_status",
				"type": "emojiStatus",
				"description": "New emoji status; pass null to switch to the default badge"
			}
		],
		"description": "Changes the emoji status of the current user; for Telegram Premium users only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleHasSponsoredMessagesEnabled",
		"methods": [
			{
				"name": "has_sponsored_messages_enabled",
				"type": "Bool",
				"description": "Pass true to enable sponsored messages for the current user; false to disable them"
			}
		],
		"description": "Toggles whether the current user has sponsored messages enabled. The setting has no effect for users without Telegram Premium for which sponsored messages are always enabled",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setBusinessLocation",
		"methods": [
			{
				"name": "location",
				"type": "businessLocation",
				"description": "The new location of the business; pass null to remove the location"
			}
		],
		"description": "Changes the business location of the current user. Requires Telegram Business subscription",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setBusinessOpeningHours",
		"methods": [
			{
				"name": "opening_hours",
				"type": "businessOpeningHours",
				"description": "The new opening hours of the business; pass null to remove the opening hours; up to 28 time intervals can be specified"
			}
		],
		"description": "Changes the business opening hours of the current user. Requires Telegram Business subscription",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setBusinessGreetingMessageSettings",
		"methods": [
			{
				"name": "greeting_message_settings",
				"type": "businessGreetingMessageSettings",
				"description": "The new settings for the greeting message of the business; pass null to disable the greeting message"
			}
		],
		"description": "Changes the business greeting message settings of the current user. Requires Telegram Business subscription",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setBusinessAwayMessageSettings",
		"methods": [
			{
				"name": "away_message_settings",
				"type": "businessAwayMessageSettings",
				"description": "The new settings for the away message of the business; pass null to disable the away message"
			}
		],
		"description": "Changes the business away message settings of the current user. Requires Telegram Business subscription",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setBusinessStartPage",
		"methods": [
			{
				"name": "start_page",
				"type": "inputBusinessStartPage",
				"description": "The new start page of the business; pass null to remove custom start page"
			}
		],
		"description": "Changes the business start page of the current user. Requires Telegram Business subscription",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "sendPhoneNumberCode",
		"methods": [
			{
				"name": "phone_number",
				"type": "string",
				"description": "The phone number, in international format"
			},
			{
				"name": "settings",
				"type": "phoneNumberAuthenticationSettings",
				"description": "Settings for the authentication of the user's phone number; pass null to use default settings"
			},
			{
				"name": "type",
				"type": "PhoneNumberCodeType",
				"description": "Type of the request for which the code is sent"
			}
		],
		"description": "Sends a code to the specified phone number. Aborts previous phone number verification if there was one. On success, returns information about the sent code",
		"inheritance": "TLBaseClass",
		"return_type": "authenticationCodeInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "sendPhoneNumberFirebaseSms",
		"methods": [
			{
				"name": "token",
				"type": "string",
				"description": "Play Integrity API or SafetyNet Attestation API token for the Android application, or secret from push notification for the iOS application"
			}
		],
		"description": "Sends Firebase Authentication SMS to the specified phone number. Works only when received a code of the type authenticationCodeTypeFirebaseAndroid or authenticationCodeTypeFirebaseIos",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "reportPhoneNumberCodeMissing",
		"methods": [
			{
				"name": "mobile_network_code",
				"type": "string",
				"description": "Current mobile network code"
			}
		],
		"description": "Reports that authentication code wasn't delivered via SMS to the specified phone number; for official mobile applications only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "resendPhoneNumberCode",
		"methods": [
			{
				"name": "reason",
				"type": "ResendCodeReason",
				"description": "Reason of code resending; pass null if unknown"
			}
		],
		"description": "Resends the authentication code sent to a phone number. Works only if the previously received authenticationCodeInfo next_code_type was not null and the server-specified timeout has passed",
		"inheritance": "TLBaseClass",
		"return_type": "authenticationCodeInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "checkPhoneNumberCode",
		"methods": [
			{
				"name": "code",
				"type": "string",
				"description": "Authentication code to check"
			}
		],
		"description": "Check the authentication code and completes the request for which the code was sent if appropriate",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getBusinessConnectedBot",
		"methods": null,
		"description": "Returns the business bot that is connected to the current user account. Returns a 404 error if there is no connected bot",
		"inheritance": "TLBaseClass",
		"return_type": "businessConnectedBot",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setBusinessConnectedBot",
		"methods": [
			{
				"name": "bot",
				"type": "businessConnectedBot",
				"description": "Connection settings for the bot"
			}
		],
		"description": "Adds or changes business bot that is connected to the current user account",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteBusinessConnectedBot",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Unique user identifier for the bot"
			}
		],
		"description": "Deletes the business bot that is connected to the current user account",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleBusinessConnectedBotChatIsPaused",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "is_paused",
				"type": "Bool",
				"description": "Pass true to pause the connected bot in the chat; pass false to resume the bot"
			}
		],
		"description": "Pauses or resumes the connected business bot in a specific chat",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "removeBusinessConnectedBotFromChat",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			}
		],
		"description": "Removes the connected business bot from a specific chat by adding the chat to businessRecipients.excluded_chat_ids",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getBusinessChatLinks",
		"methods": null,
		"description": "Returns business chat links created for the current account",
		"inheritance": "TLBaseClass",
		"return_type": "businessChatLinks",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "createBusinessChatLink",
		"methods": [
			{
				"name": "link_info",
				"type": "inputBusinessChatLink",
				"description": "Information about the link to create"
			}
		],
		"description": "Creates a business chat link for the current account. Requires Telegram Business subscription. There can be up to getOption(\"business_chat_link_count_max\") links created. Returns the created link",
		"inheritance": "TLBaseClass",
		"return_type": "businessChatLink",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editBusinessChatLink",
		"methods": [
			{
				"name": "link",
				"type": "string",
				"description": "The link to edit"
			},
			{
				"name": "link_info",
				"type": "inputBusinessChatLink",
				"description": "New description of the link"
			}
		],
		"description": "Edits a business chat link of the current account. Requires Telegram Business subscription. Returns the edited link",
		"inheritance": "TLBaseClass",
		"return_type": "businessChatLink",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteBusinessChatLink",
		"methods": [
			{
				"name": "link",
				"type": "string",
				"description": "The link to delete"
			}
		],
		"description": "Deletes a business chat link of the current account",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getBusinessChatLinkInfo",
		"methods": [
			{
				"name": "link_name",
				"type": "string",
				"description": "Name of the link"
			}
		],
		"description": "Returns information about a business chat link",
		"inheritance": "TLBaseClass",
		"return_type": "businessChatLinkInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getUserLink",
		"methods": null,
		"description": "Returns an HTTPS link, which can be used to get information about the current user",
		"inheritance": "TLBaseClass",
		"return_type": "userLink",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchUserByToken",
		"methods": [
			{
				"name": "token",
				"type": "string",
				"description": "Token to search for"
			}
		],
		"description": "Searches a user by a token from the user's link",
		"inheritance": "TLBaseClass",
		"return_type": "user",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setCommands",
		"methods": [
			{
				"name": "scope",
				"type": "BotCommandScope",
				"description": "The scope to which the commands are relevant; pass null to change commands in the default bot command scope"
			},
			{
				"name": "language_code",
				"type": "string",
				"description": "A two-letter ISO 639-1 language code. If empty, the commands will be applied to all users from the given scope, for which language there are no dedicated commands"
			},
			{
				"name": "commands",
				"type": "vector<botCommand>",
				"description": "List of the bot's commands"
			}
		],
		"description": "Sets the list of commands supported by the bot for the given user scope and language; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteCommands",
		"methods": [
			{
				"name": "scope",
				"type": "BotCommandScope",
				"description": "The scope to which the commands are relevant; pass null to delete commands in the default bot command scope"
			},
			{
				"name": "language_code",
				"type": "string",
				"description": "A two-letter ISO 639-1 language code or an empty string"
			}
		],
		"description": "Deletes commands supported by the bot for the given user scope and language; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getCommands",
		"methods": [
			{
				"name": "scope",
				"type": "BotCommandScope",
				"description": "The scope to which the commands are relevant; pass null to get commands in the default bot command scope"
			},
			{
				"name": "language_code",
				"type": "string",
				"description": "A two-letter ISO 639-1 language code or an empty string"
			}
		],
		"description": "Returns the list of commands supported by the bot for the given user scope and language; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "botCommands",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setMenuButton",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user or 0 to set menu button for all users"
			},
			{
				"name": "menu_button",
				"type": "botMenuButton",
				"description": "New menu button"
			}
		],
		"description": "Sets menu button for the given user or for all users; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getMenuButton",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user or 0 to get the default menu button"
			}
		],
		"description": "Returns menu button set by the bot for the given user; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "botMenuButton",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setDefaultGroupAdministratorRights",
		"methods": [
			{
				"name": "default_group_administrator_rights",
				"type": "chatAdministratorRights",
				"description": "Default administrator rights for adding the bot to basic group and supergroup chats; pass null to remove default rights"
			}
		],
		"description": "Sets default administrator rights for adding the bot to basic group and supergroup chats; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setDefaultChannelAdministratorRights",
		"methods": [
			{
				"name": "default_channel_administrator_rights",
				"type": "chatAdministratorRights",
				"description": "Default administrator rights for adding the bot to channels; pass null to remove default rights"
			}
		],
		"description": "Sets default administrator rights for adding the bot to channel chats; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "canBotSendMessages",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the target bot"
			}
		],
		"description": "Checks whether the specified bot can send messages to the user. Returns a 404 error if can't and the access can be granted by call to allowBotToSendMessages",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "allowBotToSendMessages",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the target bot"
			}
		],
		"description": "Allows the specified bot to send messages to the user",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "sendWebAppCustomRequest",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the bot"
			},
			{
				"name": "method",
				"type": "string",
				"description": "The method name"
			},
			{
				"name": "parameters",
				"type": "string",
				"description": "JSON-serialized method parameters"
			}
		],
		"description": "Sends a custom request from a Web App",
		"inheritance": "TLBaseClass",
		"return_type": "customRequestResult",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getBotMediaPreviews",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the target bot. The bot must have the main Web App"
			}
		],
		"description": "Returns the list of media previews of a bot",
		"inheritance": "TLBaseClass",
		"return_type": "botMediaPreviews",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getBotMediaPreviewInfo",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the target bot. The bot must be owned and must have the main Web App"
			},
			{
				"name": "language_code",
				"type": "string",
				"description": "A two-letter ISO 639-1 language code for which to get previews. If empty, then default previews are returned"
			}
		],
		"description": "Returns the list of media previews for the given language and the list of languages for which the bot has dedicated previews",
		"inheritance": "TLBaseClass",
		"return_type": "botMediaPreviewInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "addBotMediaPreview",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the target bot. The bot must be owned and must have the main Web App"
			},
			{
				"name": "language_code",
				"type": "string",
				"description": "A two-letter ISO 639-1 language code for which preview is added. If empty, then the preview will be shown to all users for whose languages there are no dedicated previews. If non-empty, then there must be an official language pack of the same name, which is returned by getLocalizationTargetInfo"
			},
			{
				"name": "content",
				"type": "InputStoryContent",
				"description": "Content of the added preview"
			}
		],
		"description": "Adds a new media preview to the beginning of the list of media previews of a bot. Returns the added preview after addition is completed server-side. The total number of previews must not exceed getOption(\"bot_media_preview_count_max\") for the given language",
		"inheritance": "TLBaseClass",
		"return_type": "botMediaPreview",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editBotMediaPreview",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the target bot. The bot must be owned and must have the main Web App"
			},
			{
				"name": "language_code",
				"type": "string",
				"description": "Language code of the media preview to edit"
			},
			{
				"name": "file_id",
				"type": "int32",
				"description": "File identifier of the media to replace"
			},
			{
				"name": "content",
				"type": "InputStoryContent",
				"description": "Content of the new preview"
			}
		],
		"description": "Replaces media preview in the list of media previews of a bot. Returns the new preview after edit is completed server-side",
		"inheritance": "TLBaseClass",
		"return_type": "botMediaPreview",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "reorderBotMediaPreviews",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the target bot. The bot must be owned and must have the main Web App"
			},
			{
				"name": "language_code",
				"type": "string",
				"description": "Language code of the media previews to reorder"
			},
			{
				"name": "file_ids",
				"type": "vector<int32>",
				"description": "File identifiers of the media in the new order"
			}
		],
		"description": "Changes order of media previews in the list of media previews of a bot",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteBotMediaPreviews",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the target bot. The bot must be owned and must have the main Web App"
			},
			{
				"name": "language_code",
				"type": "string",
				"description": "Language code of the media previews to delete"
			},
			{
				"name": "file_ids",
				"type": "vector<int32>",
				"description": "File identifiers of the media to delete"
			}
		],
		"description": "Delete media previews from the list of media previews of a bot",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setBotName",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the target bot"
			},
			{
				"name": "language_code",
				"type": "string",
				"description": "A two-letter ISO 639-1 language code. If empty, the name will be shown to all users for whose languages there is no dedicated name"
			},
			{
				"name": "name",
				"type": "string",
				"description": "New bot's name on the specified language; 0-64 characters; must be non-empty if language code is empty"
			}
		],
		"description": "Sets the name of a bot. Can be called only if userTypeBot.can_be_edited == true",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getBotName",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the target bot"
			},
			{
				"name": "language_code",
				"type": "string",
				"description": "A two-letter ISO 639-1 language code or an empty string"
			}
		],
		"description": "Returns the name of a bot in the given language. Can be called only if userTypeBot.can_be_edited == true",
		"inheritance": "TLBaseClass",
		"return_type": "text",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setBotProfilePhoto",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the target bot"
			},
			{
				"name": "photo",
				"type": "InputChatPhoto",
				"description": "Profile photo to set; pass null to delete the chat photo"
			}
		],
		"description": "Changes a profile photo for a bot",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleBotUsernameIsActive",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the target bot"
			},
			{
				"name": "username",
				"type": "string",
				"description": "The username to change"
			},
			{
				"name": "is_active",
				"type": "Bool",
				"description": "Pass true to activate the username; pass false to disable it"
			}
		],
		"description": "Changes active state for a username of a bot. The editable username can't be disabled. May return an error with a message \"USERNAMES_ACTIVE_TOO_MUCH\" if the maximum number of active usernames has been reached. Can be called only if userTypeBot.can_be_edited == true",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "reorderBotActiveUsernames",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the target bot"
			},
			{
				"name": "usernames",
				"type": "vector<string>",
				"description": "The new order of active usernames. All currently active usernames must be specified"
			}
		],
		"description": "Changes order of active usernames of a bot. Can be called only if userTypeBot.can_be_edited == true",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setBotInfoDescription",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the target bot"
			},
			{
				"name": "language_code",
				"type": "string",
				"description": "A two-letter ISO 639-1 language code. If empty, the description will be shown to all users for whose languages there is no dedicated description"
			},
			{
				"name": "description",
				"type": "string",
				"description": "New bot's description on the specified language"
			}
		],
		"description": "Sets the text shown in the chat with a bot if the chat is empty. Can be called only if userTypeBot.can_be_edited == true",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getBotInfoDescription",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the target bot"
			},
			{
				"name": "language_code",
				"type": "string",
				"description": "A two-letter ISO 639-1 language code or an empty string"
			}
		],
		"description": "Returns the text shown in the chat with a bot if the chat is empty in the given language. Can be called only if userTypeBot.can_be_edited == true",
		"inheritance": "TLBaseClass",
		"return_type": "text",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setBotInfoShortDescription",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the target bot"
			},
			{
				"name": "language_code",
				"type": "string",
				"description": "A two-letter ISO 639-1 language code. If empty, the short description will be shown to all users for whose languages there is no dedicated description"
			},
			{
				"name": "short_description",
				"type": "string",
				"description": "New bot's short description on the specified language"
			}
		],
		"description": "Sets the text shown on a bot's profile page and sent together with the link when users share the bot. Can be called only if userTypeBot.can_be_edited == true",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getBotInfoShortDescription",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the target bot"
			},
			{
				"name": "language_code",
				"type": "string",
				"description": "A two-letter ISO 639-1 language code or an empty string"
			}
		],
		"description": "Returns the text shown on a bot's profile page and sent together with the link when users share the bot in the given language. Can be called only if userTypeBot.can_be_edited == true",
		"inheritance": "TLBaseClass",
		"return_type": "text",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setMessageSenderBotVerification",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the owned bot, which will verify the user or the chat"
			},
			{
				"name": "verified_id",
				"type": "MessageSender",
				"description": "Identifier of the user or the supergroup or channel chat, which will be verified by the bot"
			},
			{
				"name": "custom_description",
				"type": "string",
				"description": "Custom description of verification reason; 0-getOption(\"bot_verification_custom_description_length_max\"). If empty, then \"was verified by organization \"organization_name\"\" will be used as description. Can be specified only if the bot is allowed to provide custom description"
			}
		],
		"description": "Changes the verification status of a user or a chat by an owned bot",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "removeMessageSenderBotVerification",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the owned bot, which verified the user or the chat"
			},
			{
				"name": "verified_id",
				"type": "MessageSender",
				"description": "Identifier of the user or the supergroup or channel chat, which verification is removed"
			}
		],
		"description": "Removes the verification status of a user or a chat by an owned bot",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getActiveSessions",
		"methods": null,
		"description": "Returns all active sessions of the current user",
		"inheritance": "TLBaseClass",
		"return_type": "sessions",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "terminateSession",
		"methods": [
			{
				"name": "session_id",
				"type": "int64",
				"description": "Session identifier"
			}
		],
		"description": "Terminates a session of the current user",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "terminateAllOtherSessions",
		"methods": null,
		"description": "Terminates all other sessions of the current user",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "confirmSession",
		"methods": [
			{
				"name": "session_id",
				"type": "int64",
				"description": "Session identifier"
			}
		],
		"description": "Confirms an unconfirmed session of the current user from another device",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleSessionCanAcceptCalls",
		"methods": [
			{
				"name": "session_id",
				"type": "int64",
				"description": "Session identifier"
			},
			{
				"name": "can_accept_calls",
				"type": "Bool",
				"description": "Pass true to allow accepting incoming calls by the session; pass false otherwise"
			}
		],
		"description": "Toggles whether a session can accept incoming calls",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleSessionCanAcceptSecretChats",
		"methods": [
			{
				"name": "session_id",
				"type": "int64",
				"description": "Session identifier"
			},
			{
				"name": "can_accept_secret_chats",
				"type": "Bool",
				"description": "Pass true to allow accepting secret chats by the session; pass false otherwise"
			}
		],
		"description": "Toggles whether a session can accept incoming secret chats",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setInactiveSessionTtl",
		"methods": [
			{
				"name": "inactive_session_ttl_days",
				"type": "int32",
				"description": "New number of days of inactivity before sessions will be automatically terminated; 1-366 days"
			}
		],
		"description": "Changes the period of inactivity after which sessions will automatically be terminated",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getConnectedWebsites",
		"methods": null,
		"description": "Returns all website where the current user used Telegram to log in",
		"inheritance": "TLBaseClass",
		"return_type": "connectedWebsites",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "disconnectWebsite",
		"methods": [
			{
				"name": "website_id",
				"type": "int64",
				"description": "Website identifier"
			}
		],
		"description": "Disconnects website from the current user's Telegram account",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "disconnectAllWebsites",
		"methods": null,
		"description": "Disconnects all websites from the current user's Telegram account",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setSupergroupUsername",
		"methods": [
			{
				"name": "supergroup_id",
				"type": "int53",
				"description": "Identifier of the supergroup or channel"
			},
			{
				"name": "username",
				"type": "string",
				"description": "New value of the username. Use an empty string to remove the username. The username can't be completely removed if there is another active or disabled username"
			}
		],
		"description": "Changes the editable username of a supergroup or channel, requires owner privileges in the supergroup or channel",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleSupergroupUsernameIsActive",
		"methods": [
			{
				"name": "supergroup_id",
				"type": "int53",
				"description": "Identifier of the supergroup or channel"
			},
			{
				"name": "username",
				"type": "string",
				"description": "The username to change"
			},
			{
				"name": "is_active",
				"type": "Bool",
				"description": "Pass true to activate the username; pass false to disable it"
			}
		],
		"description": "Changes active state for a username of a supergroup or channel, requires owner privileges in the supergroup or channel. The editable username can't be disabled. May return an error with a message \"USERNAMES_ACTIVE_TOO_MUCH\" if the maximum number of active usernames has been reached",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "disableAllSupergroupUsernames",
		"methods": [
			{
				"name": "supergroup_id",
				"type": "int53",
				"description": "Identifier of the supergroup or channel"
			}
		],
		"description": "Disables all active non-editable usernames of a supergroup or channel, requires owner privileges in the supergroup or channel",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "reorderSupergroupActiveUsernames",
		"methods": [
			{
				"name": "supergroup_id",
				"type": "int53",
				"description": "Identifier of the supergroup or channel"
			},
			{
				"name": "usernames",
				"type": "vector<string>",
				"description": "The new order of active usernames. All currently active usernames must be specified"
			}
		],
		"description": "Changes order of active usernames of a supergroup or channel, requires owner privileges in the supergroup or channel",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setSupergroupStickerSet",
		"methods": [
			{
				"name": "supergroup_id",
				"type": "int53",
				"description": "Identifier of the supergroup"
			},
			{
				"name": "sticker_set_id",
				"type": "int64",
				"description": "New value of the supergroup sticker set identifier. Use 0 to remove the supergroup sticker set"
			}
		],
		"description": "Changes the sticker set of a supergroup; requires can_change_info administrator right",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setSupergroupCustomEmojiStickerSet",
		"methods": [
			{
				"name": "supergroup_id",
				"type": "int53",
				"description": "Identifier of the supergroup"
			},
			{
				"name": "custom_emoji_sticker_set_id",
				"type": "int64",
				"description": "New value of the custom emoji sticker set identifier for the supergroup. Use 0 to remove the custom emoji sticker set in the supergroup"
			}
		],
		"description": "Changes the custom emoji sticker set of a supergroup; requires can_change_info administrator right. The chat must have at least chatBoostFeatures.min_custom_emoji_sticker_set_boost_level boost level to pass the corresponding color",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setSupergroupUnrestrictBoostCount",
		"methods": [
			{
				"name": "supergroup_id",
				"type": "int53",
				"description": "Identifier of the supergroup"
			},
			{
				"name": "unrestrict_boost_count",
				"type": "int32",
				"description": "New value of the unrestrict_boost_count supergroup setting; 0-8. Use 0 to remove the setting"
			}
		],
		"description": "Changes the number of times the supergroup must be boosted by a user to ignore slow mode and chat permission restrictions; requires can_restrict_members administrator right",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleSupergroupSignMessages",
		"methods": [
			{
				"name": "supergroup_id",
				"type": "int53",
				"description": "Identifier of the channel"
			},
			{
				"name": "sign_messages",
				"type": "Bool",
				"description": "New value of sign_messages"
			},
			{
				"name": "show_message_sender",
				"type": "Bool",
				"description": "New value of show_message_sender"
			}
		],
		"description": "Toggles whether sender signature or link to the account is added to sent messages in a channel; requires can_change_info member right",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleSupergroupJoinToSendMessages",
		"methods": [
			{
				"name": "supergroup_id",
				"type": "int53",
				"description": "Identifier of the supergroup that isn't a broadcast group"
			},
			{
				"name": "join_to_send_messages",
				"type": "Bool",
				"description": "New value of join_to_send_messages"
			}
		],
		"description": "Toggles whether joining is mandatory to send messages to a discussion supergroup; requires can_restrict_members administrator right",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleSupergroupJoinByRequest",
		"methods": [
			{
				"name": "supergroup_id",
				"type": "int53",
				"description": "Identifier of the supergroup that isn't a broadcast group"
			},
			{
				"name": "join_by_request",
				"type": "Bool",
				"description": "New value of join_by_request"
			}
		],
		"description": "Toggles whether all users directly joining the supergroup need to be approved by supergroup administrators; requires can_restrict_members administrator right",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleSupergroupIsAllHistoryAvailable",
		"methods": [
			{
				"name": "supergroup_id",
				"type": "int53",
				"description": "The identifier of the supergroup"
			},
			{
				"name": "is_all_history_available",
				"type": "Bool",
				"description": "The new value of is_all_history_available"
			}
		],
		"description": "Toggles whether the message history of a supergroup is available to new members; requires can_change_info member right",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleSupergroupCanHaveSponsoredMessages",
		"methods": [
			{
				"name": "supergroup_id",
				"type": "int53",
				"description": "The identifier of the channel"
			},
			{
				"name": "can_have_sponsored_messages",
				"type": "Bool",
				"description": "The new value of can_have_sponsored_messages"
			}
		],
		"description": "Toggles whether sponsored messages are shown in the channel chat; requires owner privileges in the channel. The chat must have at least chatBoostFeatures.min_sponsored_message_disable_boost_level boost level to disable sponsored messages",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleSupergroupHasHiddenMembers",
		"methods": [
			{
				"name": "supergroup_id",
				"type": "int53",
				"description": "Identifier of the supergroup"
			},
			{
				"name": "has_hidden_members",
				"type": "Bool",
				"description": "New value of has_hidden_members"
			}
		],
		"description": "Toggles whether non-administrators can receive only administrators and bots using getSupergroupMembers or searchChatMembers. Can be called only if supergroupFullInfo.can_hide_members == true",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleSupergroupHasAggressiveAntiSpamEnabled",
		"methods": [
			{
				"name": "supergroup_id",
				"type": "int53",
				"description": "The identifier of the supergroup, which isn't a broadcast group"
			},
			{
				"name": "has_aggressive_anti_spam_enabled",
				"type": "Bool",
				"description": "The new value of has_aggressive_anti_spam_enabled"
			}
		],
		"description": "Toggles whether aggressive anti-spam checks are enabled in the supergroup. Can be called only if supergroupFullInfo.can_toggle_aggressive_anti_spam == true",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleSupergroupIsForum",
		"methods": [
			{
				"name": "supergroup_id",
				"type": "int53",
				"description": "Identifier of the supergroup"
			},
			{
				"name": "is_forum",
				"type": "Bool",
				"description": "New value of is_forum"
			}
		],
		"description": "Toggles whether the supergroup is a forum; requires owner privileges in the supergroup. Discussion supergroups can't be converted to forums",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleSupergroupIsBroadcastGroup",
		"methods": [
			{
				"name": "supergroup_id",
				"type": "int53",
				"description": "Identifier of the supergroup"
			}
		],
		"description": "Upgrades supergroup to a broadcast group; requires owner privileges in the supergroup",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "reportSupergroupSpam",
		"methods": [
			{
				"name": "supergroup_id",
				"type": "int53",
				"description": "Supergroup identifier"
			},
			{
				"name": "message_ids",
				"type": "vector<int53>",
				"description": "Identifiers of messages to report. Use messageProperties.can_report_supergroup_spam to check whether the message can be reported"
			}
		],
		"description": "Reports messages in a supergroup as spam; requires administrator rights in the supergroup",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "reportSupergroupAntiSpamFalsePositive",
		"methods": [
			{
				"name": "supergroup_id",
				"type": "int53",
				"description": "Supergroup identifier"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the erroneously deleted message from chatEventMessageDeleted"
			}
		],
		"description": "Reports a false deletion of a message by aggressive anti-spam checks; requires administrator rights in the supergroup. Can be called only for messages from chatEventMessageDeleted with can_report_anti_spam_false_positive == true",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getSupergroupMembers",
		"methods": [
			{
				"name": "supergroup_id",
				"type": "int53",
				"description": "Identifier of the supergroup or channel"
			},
			{
				"name": "filter",
				"type": "SupergroupMembersFilter",
				"description": "The type of users to return; pass null to use supergroupMembersFilterRecent"
			},
			{
				"name": "offset",
				"type": "int32",
				"description": "Number of users to skip"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of users to be returned; up to 200"
			}
		],
		"description": "Returns information about members or banned users in a supergroup or channel. Can be used only if supergroupFullInfo.can_get_members == true; additionally, administrator privileges may be required for some filters",
		"inheritance": "TLBaseClass",
		"return_type": "chatMembers",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "closeSecretChat",
		"methods": [
			{
				"name": "secret_chat_id",
				"type": "int32",
				"description": "Secret chat identifier"
			}
		],
		"description": "Closes a secret chat, effectively transferring its state to secretChatStateClosed",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatEventLog",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "query",
				"type": "string",
				"description": "Search query by which to filter events"
			},
			{
				"name": "from_event_id",
				"type": "int64",
				"description": "Identifier of an event from which to return results. Use 0 to get results from the latest events"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of events to return; up to 100"
			},
			{
				"name": "filters",
				"type": "chatEventLogFilters",
				"description": "The types of events to return; pass null to get chat events of all types"
			},
			{
				"name": "user_ids",
				"type": "vector<int53>",
				"description": "User identifiers by which to filter events. By default, events relating to all users will be returned"
			}
		],
		"description": "Returns a list of service actions taken by chat members and administrators in the last 48 hours. Available only for supergroups and channels. Requires administrator rights. Returns results in reverse chronological order (i.e., in order of decreasing event_id)",
		"inheritance": "TLBaseClass",
		"return_type": "chatEvents",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getTimeZones",
		"methods": null,
		"description": "Returns the list of supported time zones",
		"inheritance": "TLBaseClass",
		"return_type": "timeZones",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getPaymentForm",
		"methods": [
			{
				"name": "input_invoice",
				"type": "InputInvoice",
				"description": "The invoice"
			},
			{
				"name": "theme",
				"type": "themeParameters",
				"description": "Preferred payment form theme; pass null to use the default theme"
			}
		],
		"description": "Returns an invoice payment form. This method must be called when the user presses inline button of the type inlineKeyboardButtonTypeBuy, or wants to buy access to media in a messagePaidMedia message",
		"inheritance": "TLBaseClass",
		"return_type": "paymentForm",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "validateOrderInfo",
		"methods": [
			{
				"name": "input_invoice",
				"type": "InputInvoice",
				"description": "The invoice"
			},
			{
				"name": "order_info",
				"type": "orderInfo",
				"description": "The order information, provided by the user; pass null if empty"
			},
			{
				"name": "allow_save",
				"type": "Bool",
				"description": "Pass true to save the order information"
			}
		],
		"description": "Validates the order information provided by a user and returns the available shipping options for a flexible invoice",
		"inheritance": "TLBaseClass",
		"return_type": "validatedOrderInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "sendPaymentForm",
		"methods": [
			{
				"name": "input_invoice",
				"type": "InputInvoice",
				"description": "The invoice"
			},
			{
				"name": "payment_form_id",
				"type": "int64",
				"description": "Payment form identifier returned by getPaymentForm"
			},
			{
				"name": "order_info_id",
				"type": "string",
				"description": "Identifier returned by validateOrderInfo, or an empty string"
			},
			{
				"name": "shipping_option_id",
				"type": "string",
				"description": "Identifier of a chosen shipping option, if applicable"
			},
			{
				"name": "credentials",
				"type": "InputCredentials",
				"description": "The credentials chosen by user for payment; pass null for a payment in Telegram Stars"
			},
			{
				"name": "tip_amount",
				"type": "int53",
				"description": "Chosen by the user amount of tip in the smallest units of the currency"
			}
		],
		"description": "Sends a filled-out payment form to the bot for final verification",
		"inheritance": "TLBaseClass",
		"return_type": "paymentResult",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getPaymentReceipt",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier of the messagePaymentSuccessful message"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Message identifier"
			}
		],
		"description": "Returns information about a successful payment",
		"inheritance": "TLBaseClass",
		"return_type": "paymentReceipt",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getSavedOrderInfo",
		"methods": null,
		"description": "Returns saved order information. Returns a 404 error if there is no saved order information",
		"inheritance": "TLBaseClass",
		"return_type": "orderInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteSavedOrderInfo",
		"methods": null,
		"description": "Deletes saved order information",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteSavedCredentials",
		"methods": null,
		"description": "Deletes saved credentials for all payment provider bots",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getAvailableGifts",
		"methods": null,
		"description": "Returns gifts that can be sent to other users and channel chats",
		"inheritance": "TLBaseClass",
		"return_type": "gifts",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "sendGift",
		"methods": [
			{
				"name": "gift_id",
				"type": "int64",
				"description": "Identifier of the gift to send"
			},
			{
				"name": "owner_id",
				"type": "MessageSender",
				"description": "Identifier of the user or the channel chat that will receive the gift"
			},
			{
				"name": "text",
				"type": "formattedText",
				"description": "Text to show along with the gift; 0-getOption(\"gift_text_length_max\") characters. Only Bold, Italic, Underline, Strikethrough, Spoiler, and CustomEmoji entities are allowed. Must be empty if the receiver enabled paid messages"
			},
			{
				"name": "is_private",
				"type": "Bool",
				"description": "Pass true to show gift text and sender only to the gift receiver; otherwise, everyone will be able to see them"
			},
			{
				"name": "pay_for_upgrade",
				"type": "Bool",
				"description": "Pass true to additionally pay for the gift upgrade and allow the receiver to upgrade it for free"
			}
		],
		"description": "Sends a gift to another user or channel chat. May return an error with a message \"STARGIFT_USAGE_LIMITED\" if the gift was sold out",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "sellGift",
		"methods": [
			{
				"name": "received_gift_id",
				"type": "string",
				"description": "Identifier of the gift"
			}
		],
		"description": "Sells a gift for Telegram Stars",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleGiftIsSaved",
		"methods": [
			{
				"name": "received_gift_id",
				"type": "string",
				"description": "Identifier of the gift"
			},
			{
				"name": "is_saved",
				"type": "Bool",
				"description": "Pass true to display the gift on the user's or the channel's profile page; pass false to remove it from the profile page"
			}
		],
		"description": "Toggles whether a gift is shown on the current user's or the channel's profile page; requires can_post_messages administrator right in the channel chat",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setPinnedGifts",
		"methods": [
			{
				"name": "owner_id",
				"type": "MessageSender",
				"description": "Identifier of the user or the channel chat that received the gifts"
			},
			{
				"name": "received_gift_ids",
				"type": "vector<string>",
				"description": "New list of pinned gifts. All gifts must be upgraded and saved on the profile page first. There can be up to getOption(\"pinned_gift_count_max\") pinned gifts"
			}
		],
		"description": "Changes the list of pinned gifts on the current user's or the channel's profile page; requires can_post_messages administrator right in the channel chat",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "toggleChatGiftNotifications",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the channel chat"
			},
			{
				"name": "are_enabled",
				"type": "Bool",
				"description": "Pass true to enable notifications about new gifts owned by the channel chat; pass false to disable the notifications"
			}
		],
		"description": "Toggles whether notifications for new gifts received by a channel chat are sent to the current user; requires can_post_messages administrator right in the chat",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getGiftUpgradePreview",
		"methods": [
			{
				"name": "gift_id",
				"type": "int64",
				"description": "Identifier of the gift"
			}
		],
		"description": "Returns examples of possible upgraded gifts for a regular gift",
		"inheritance": "TLBaseClass",
		"return_type": "giftUpgradePreview",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "upgradeGift",
		"methods": [
			{
				"name": "received_gift_id",
				"type": "string",
				"description": "Identifier of the gift"
			},
			{
				"name": "keep_original_details",
				"type": "Bool",
				"description": "Pass true to keep the original gift text, sender and receiver in the upgraded gift"
			},
			{
				"name": "star_count",
				"type": "int53",
				"description": "The amount of Telegram Stars required to pay for the upgrade. It the gift has prepaid_upgrade_star_count > 0, then pass 0, otherwise, pass gift.upgrade_star_count"
			}
		],
		"description": "Upgrades a regular gift",
		"inheritance": "TLBaseClass",
		"return_type": "upgradeGiftResult",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "transferGift",
		"methods": [
			{
				"name": "received_gift_id",
				"type": "string",
				"description": "Identifier of the gift"
			},
			{
				"name": "new_owner_id",
				"type": "MessageSender",
				"description": "Identifier of the user or the channel chat that will receive the gift"
			},
			{
				"name": "star_count",
				"type": "int53",
				"description": "The amount of Telegram Stars required to pay for the transfer"
			}
		],
		"description": "Sends an upgraded gift to another user or a channel chat",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getReceivedGifts",
		"methods": [
			{
				"name": "owner_id",
				"type": "MessageSender",
				"description": "Identifier of the gift receiver"
			},
			{
				"name": "exclude_unsaved",
				"type": "Bool",
				"description": "Pass true to exclude gifts that aren't saved to the chat's profile page. Always true for gifts received by other users and channel chats without can_post_messages administrator right"
			},
			{
				"name": "exclude_saved",
				"type": "Bool",
				"description": "Pass true to exclude gifts that are saved to the chat's profile page. Always false for gifts received by other users and channel chats without can_post_messages administrator right"
			},
			{
				"name": "exclude_unlimited",
				"type": "Bool",
				"description": "Pass true to exclude gifts that can be purchased unlimited number of times"
			},
			{
				"name": "exclude_limited",
				"type": "Bool",
				"description": "Pass true to exclude gifts that can be purchased limited number of times"
			},
			{
				"name": "exclude_upgraded",
				"type": "Bool",
				"description": "Pass true to exclude upgraded gifts"
			},
			{
				"name": "sort_by_price",
				"type": "Bool",
				"description": "Pass true to sort results by gift price instead of send date"
			},
			{
				"name": "offset",
				"type": "string",
				"description": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of gifts to be returned; must be positive and can't be greater than 100. For optimal performance, the number of returned objects is chosen by TDLib and can be smaller than the specified limit"
			}
		],
		"description": "Returns gifts received by the given user or chat",
		"inheritance": "TLBaseClass",
		"return_type": "receivedGifts",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getReceivedGift",
		"methods": [
			{
				"name": "received_gift_id",
				"type": "string",
				"description": "Identifier of the gift"
			}
		],
		"description": "Returns information about a received gift",
		"inheritance": "TLBaseClass",
		"return_type": "receivedGift",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getUpgradedGift",
		"methods": [
			{
				"name": "name",
				"type": "string",
				"description": "Unique name of the upgraded gift"
			}
		],
		"description": "Returns information about an upgraded gift by its name",
		"inheritance": "TLBaseClass",
		"return_type": "upgradedGift",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getUpgradedGiftWithdrawalUrl",
		"methods": [
			{
				"name": "received_gift_id",
				"type": "string",
				"description": "Identifier of the gift"
			},
			{
				"name": "password",
				"type": "string",
				"description": "The 2-step verification password of the current user"
			}
		],
		"description": "Returns a URL for upgraded gift withdrawal in the TON blockchain as an NFT; requires owner privileges for gifts owned by a chat",
		"inheritance": "TLBaseClass",
		"return_type": "httpUrl",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "createInvoiceLink",
		"methods": [
			{
				"name": "business_connection_id",
				"type": "string",
				"description": "Unique identifier of business connection on behalf of which to send the request"
			},
			{
				"name": "invoice",
				"type": "InputMessageContent",
				"description": "Information about the invoice of the type inputMessageInvoice"
			}
		],
		"description": "Creates a link for the given invoice; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "httpUrl",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "refundStarPayment",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user that did the payment"
			},
			{
				"name": "telegram_payment_charge_id",
				"type": "string",
				"description": "Telegram payment identifier"
			}
		],
		"description": "Refunds a previously done payment in Telegram Stars; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getSupportUser",
		"methods": null,
		"description": "Returns a user that can be contacted to get support",
		"inheritance": "TLBaseClass",
		"return_type": "user",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getBackgroundUrl",
		"methods": [
			{
				"name": "name",
				"type": "string",
				"description": "Background name"
			},
			{
				"name": "type",
				"type": "BackgroundType",
				"description": "Background type; backgroundTypeChatTheme isn't supported"
			}
		],
		"description": "Constructs a persistent HTTP URL for a background",
		"inheritance": "TLBaseClass",
		"return_type": "httpUrl",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchBackground",
		"methods": [
			{
				"name": "name",
				"type": "string",
				"description": "The name of the background"
			}
		],
		"description": "Searches for a background by its name",
		"inheritance": "TLBaseClass",
		"return_type": "background",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setDefaultBackground",
		"methods": [
			{
				"name": "background",
				"type": "InputBackground",
				"description": "The input background to use; pass null to create a new filled background"
			},
			{
				"name": "type",
				"type": "BackgroundType",
				"description": "Background type; pass null to use the default type of the remote background; backgroundTypeChatTheme isn't supported"
			},
			{
				"name": "for_dark_theme",
				"type": "Bool",
				"description": "Pass true if the background is set for a dark theme"
			}
		],
		"description": "Sets default background for chats; adds the background to the list of installed backgrounds",
		"inheritance": "TLBaseClass",
		"return_type": "background",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteDefaultBackground",
		"methods": [
			{
				"name": "for_dark_theme",
				"type": "Bool",
				"description": "Pass true if the background is deleted for a dark theme"
			}
		],
		"description": "Deletes default background for chats",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getInstalledBackgrounds",
		"methods": [
			{
				"name": "for_dark_theme",
				"type": "Bool",
				"description": "Pass true to order returned backgrounds for a dark theme"
			}
		],
		"description": "Returns backgrounds installed by the user",
		"inheritance": "TLBaseClass",
		"return_type": "backgrounds",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "removeInstalledBackground",
		"methods": [
			{
				"name": "background_id",
				"type": "int64",
				"description": "The background identifier"
			}
		],
		"description": "Removes background from the list of installed backgrounds",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "resetInstalledBackgrounds",
		"methods": null,
		"description": "Resets list of installed backgrounds to its default value",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getLocalizationTargetInfo",
		"methods": [
			{
				"name": "only_local",
				"type": "Bool",
				"description": "Pass true to get only locally available information without sending network requests"
			}
		],
		"description": "Returns information about the current localization target. This is an offline method if only_local is true. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "localizationTargetInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getLanguagePackInfo",
		"methods": [
			{
				"name": "language_pack_id",
				"type": "string",
				"description": "Language pack identifier"
			}
		],
		"description": "Returns information about a language pack. Returned language pack identifier may be different from a provided one. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "languagePackInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getLanguagePackStrings",
		"methods": [
			{
				"name": "language_pack_id",
				"type": "string",
				"description": "Language pack identifier of the strings to be returned"
			},
			{
				"name": "keys",
				"type": "vector<string>",
				"description": "Language pack keys of the strings to be returned; leave empty to request all available strings"
			}
		],
		"description": "Returns strings from a language pack in the current localization target by their keys. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "languagePackStrings",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "synchronizeLanguagePack",
		"methods": [
			{
				"name": "language_pack_id",
				"type": "string",
				"description": "Language pack identifier"
			}
		],
		"description": "Fetches the latest versions of all strings from a language pack in the current localization target from the server. This method doesn't need to be called explicitly for the current used/base language packs. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "addCustomServerLanguagePack",
		"methods": [
			{
				"name": "language_pack_id",
				"type": "string",
				"description": "Identifier of a language pack to be added"
			}
		],
		"description": "Adds a custom server language pack to the list of installed language packs in current localization target. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setCustomLanguagePack",
		"methods": [
			{
				"name": "info",
				"type": "languagePackInfo",
				"description": "Information about the language pack. Language pack identifier must start with 'X', consist only of English letters, digits and hyphens, and must not exceed 64 characters. Can be called before authorization"
			},
			{
				"name": "strings",
				"type": "vector<languagePackString>",
				"description": "Strings of the new language pack"
			}
		],
		"description": "Adds or changes a custom local language pack to the current localization target",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editCustomLanguagePackInfo",
		"methods": [
			{
				"name": "info",
				"type": "languagePackInfo",
				"description": "New information about the custom local language pack"
			}
		],
		"description": "Edits information about a custom local language pack in the current localization target. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setCustomLanguagePackString",
		"methods": [
			{
				"name": "language_pack_id",
				"type": "string",
				"description": "Identifier of a previously added custom local language pack in the current localization target"
			},
			{
				"name": "new_string",
				"type": "languagePackString",
				"description": "New language pack string"
			}
		],
		"description": "Adds, edits or deletes a string in a custom local language pack. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteLanguagePack",
		"methods": [
			{
				"name": "language_pack_id",
				"type": "string",
				"description": "Identifier of the language pack to delete"
			}
		],
		"description": "Deletes all information about a language pack in the current localization target. The language pack which is currently in use (including base language pack) or is being synchronized can't be deleted. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "registerDevice",
		"methods": [
			{
				"name": "device_token",
				"type": "DeviceToken",
				"description": "Device token"
			},
			{
				"name": "other_user_ids",
				"type": "vector<int53>",
				"description": "List of user identifiers of other users currently using the application"
			}
		],
		"description": "Registers the currently used device for receiving push notifications. Returns a globally unique identifier of the push notification subscription",
		"inheritance": "TLBaseClass",
		"return_type": "pushReceiverId",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "processPushNotification",
		"methods": [
			{
				"name": "payload",
				"type": "string",
				"description": "JSON-encoded push notification payload with all fields sent by the server, and \"google.sent_time\" and \"google.notification.sound\" fields added"
			}
		],
		"description": "Handles a push notification. Returns error with code 406 if the push notification is not supported and connection to the server is required to fetch new data. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getPushReceiverId",
		"methods": [
			{
				"name": "payload",
				"type": "string",
				"description": "JSON-encoded push notification payload"
			}
		],
		"description": "Returns a globally unique push notification subscription identifier for identification of an account, which has received a push notification. Can be called synchronously",
		"inheritance": "TLBaseClass",
		"return_type": "pushReceiverId",
		"isFunction": true,
		"isSynchronous": true
	},
	{
		"name": "getRecentlyVisitedTMeUrls",
		"methods": [
			{
				"name": "referrer",
				"type": "string",
				"description": "Google Play referrer to identify the user"
			}
		],
		"description": "Returns t.me URLs recently visited by a newly registered user",
		"inheritance": "TLBaseClass",
		"return_type": "tMeUrls",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setUserPrivacySettingRules",
		"methods": [
			{
				"name": "setting",
				"type": "UserPrivacySetting",
				"description": "The privacy setting"
			},
			{
				"name": "rules",
				"type": "userPrivacySettingRules",
				"description": "The new privacy rules"
			}
		],
		"description": "Changes user privacy settings",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getUserPrivacySettingRules",
		"methods": [
			{
				"name": "setting",
				"type": "UserPrivacySetting",
				"description": "The privacy setting"
			}
		],
		"description": "Returns the current privacy settings",
		"inheritance": "TLBaseClass",
		"return_type": "userPrivacySettingRules",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setReadDatePrivacySettings",
		"methods": [
			{
				"name": "settings",
				"type": "readDatePrivacySettings",
				"description": "New settings"
			}
		],
		"description": "Changes privacy settings for message read date",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getReadDatePrivacySettings",
		"methods": null,
		"description": "Returns privacy settings for message read date",
		"inheritance": "TLBaseClass",
		"return_type": "readDatePrivacySettings",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setNewChatPrivacySettings",
		"methods": [
			{
				"name": "settings",
				"type": "newChatPrivacySettings",
				"description": "New settings"
			}
		],
		"description": "Changes privacy settings for new chat creation; can be used only if getOption(\"can_set_new_chat_privacy_settings\")",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getNewChatPrivacySettings",
		"methods": null,
		"description": "Returns privacy settings for new chat creation",
		"inheritance": "TLBaseClass",
		"return_type": "newChatPrivacySettings",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getPaidMessageRevenue",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user"
			}
		],
		"description": "Returns the total number of Telegram Stars received by the current user for paid messages from the given user",
		"inheritance": "TLBaseClass",
		"return_type": "starCount",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "allowUnpaidMessagesFromUser",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user"
			},
			{
				"name": "refund_payments",
				"type": "Bool",
				"description": "Pass true to refund the user previously paid messages"
			}
		],
		"description": "Allows the specified user to send unpaid private messages to the current user by adding a rule to userPrivacySettingAllowUnpaidMessages",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setChatPaidMessageStarCount",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the supergroup chat"
			},
			{
				"name": "paid_message_star_count",
				"type": "int53",
				"description": "The new number of Telegram Stars that must be paid for each message that is sent to the supergroup chat unless the sender is an administrator of the chat; 0-getOption(\"paid_message_star_count_max\"). The supergroup will receive getOption(\"paid_message_earnings_per_mille\") Telegram Stars for each 1000 Telegram Stars paid for message sending"
			}
		],
		"description": "Changes the amount of Telegram Stars that must be paid to send a message to a supergroup chat; requires can_restrict_members administrator right and supergroupFullInfo.can_enable_paid_messages",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "canSendMessageToUser",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the other user"
			},
			{
				"name": "only_local",
				"type": "Bool",
				"description": "Pass true to get only locally available information without sending network requests"
			}
		],
		"description": "Check whether the current user can message another user or try to create a chat with them",
		"inheritance": "TLBaseClass",
		"return_type": "CanSendMessageToUserResult",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getOption",
		"methods": [
			{
				"name": "name",
				"type": "string",
				"description": "The name of the option"
			}
		],
		"description": "Returns the value of an option by its name. (Check the list of available options on https://core.telegram.org/tdlib/options.) Can be called before authorization. Can be called synchronously for options \"version\" and \"commit_hash\"",
		"inheritance": "TLBaseClass",
		"return_type": "OptionValue",
		"isFunction": true,
		"isSynchronous": true
	},
	{
		"name": "setOption",
		"methods": [
			{
				"name": "name",
				"type": "string",
				"description": "The name of the option"
			},
			{
				"name": "value",
				"type": "OptionValue",
				"description": "The new value of the option; pass null to reset option value to a default value"
			}
		],
		"description": "Sets the value of an option. (Check the list of available options on https://core.telegram.org/tdlib/options.) Only writable options can be set. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setAccountTtl",
		"methods": [
			{
				"name": "ttl",
				"type": "accountTtl",
				"description": "New account TTL"
			}
		],
		"description": "Changes the period of inactivity after which the account of the current user will automatically be deleted",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getAccountTtl",
		"methods": null,
		"description": "Returns the period of inactivity after which the account of the current user will automatically be deleted",
		"inheritance": "TLBaseClass",
		"return_type": "accountTtl",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteAccount",
		"methods": [
			{
				"name": "reason",
				"type": "string",
				"description": "The reason why the account was deleted; optional"
			},
			{
				"name": "password",
				"type": "string",
				"description": "The 2-step verification password of the current user. If the current user isn't authorized, then an empty string can be passed and account deletion can be canceled within one week"
			}
		],
		"description": "Deletes the account of the current user, deleting all information associated with the user from the server. The phone number of the account can be used to create a new account. Can be called before authorization when the current authorization state is authorizationStateWaitPassword",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setDefaultMessageAutoDeleteTime",
		"methods": [
			{
				"name": "message_auto_delete_time",
				"type": "messageAutoDeleteTime",
				"description": "New default message auto-delete time; must be from 0 up to 365 * 86400 and be divisible by 86400. If 0, then messages aren't deleted automatically"
			}
		],
		"description": "Changes the default message auto-delete time for new chats",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getDefaultMessageAutoDeleteTime",
		"methods": null,
		"description": "Returns default message auto-delete time setting for new chats",
		"inheritance": "TLBaseClass",
		"return_type": "messageAutoDeleteTime",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "removeChatActionBar",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			}
		],
		"description": "Removes a chat action bar without any other action",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "reportChat",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "option_id",
				"type": "bytes",
				"description": "Option identifier chosen by the user; leave empty for the initial request"
			},
			{
				"name": "message_ids",
				"type": "vector<int53>",
				"description": "Identifiers of reported messages. Use messageProperties.can_report_chat to check whether the message can be reported"
			},
			{
				"name": "text",
				"type": "string",
				"description": "Additional report details if asked by the server; 0-1024 characters; leave empty for the initial request"
			}
		],
		"description": "Reports a chat to the Telegram moderators. A chat can be reported only from the chat action bar, or if chat.can_be_reported",
		"inheritance": "TLBaseClass",
		"return_type": "ReportChatResult",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "reportChatPhoto",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "file_id",
				"type": "int32",
				"description": "Identifier of the photo to report. Only full photos from chatPhoto can be reported"
			},
			{
				"name": "reason",
				"type": "ReportReason",
				"description": "The reason for reporting the chat photo"
			},
			{
				"name": "text",
				"type": "string",
				"description": "Additional report details; 0-1024 characters"
			}
		],
		"description": "Reports a chat photo to the Telegram moderators. A chat photo can be reported only if chat.can_be_reported",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "reportMessageReactions",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Message identifier"
			},
			{
				"name": "sender_id",
				"type": "MessageSender",
				"description": "Identifier of the sender, which added the reaction"
			}
		],
		"description": "Reports reactions set on a message to the Telegram moderators. Reactions on a message can be reported only if messageProperties.can_report_reactions",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatRevenueStatistics",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "is_dark",
				"type": "Bool",
				"description": "Pass true if a dark theme is used by the application"
			}
		],
		"description": "Returns detailed revenue statistics about a chat. Currently, this method can be used only for channels if supergroupFullInfo.can_get_revenue_statistics == true or bots if userFullInfo.bot_info.can_get_revenue_statistics == true",
		"inheritance": "TLBaseClass",
		"return_type": "chatRevenueStatistics",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatRevenueWithdrawalUrl",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "password",
				"type": "string",
				"description": "The 2-step verification password of the current user"
			}
		],
		"description": "Returns a URL for chat revenue withdrawal; requires owner privileges in the channel chat or the bot. Currently, this method can be used only if getOption(\"can_withdraw_chat_revenue\") for channels with supergroupFullInfo.can_get_revenue_statistics == true or bots with userFullInfo.bot_info.can_get_revenue_statistics == true",
		"inheritance": "TLBaseClass",
		"return_type": "httpUrl",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatRevenueTransactions",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "offset",
				"type": "int32",
				"description": "Number of transactions to skip"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of transactions to be returned; up to 200"
			}
		],
		"description": "Returns the list of revenue transactions for a chat. Currently, this method can be used only for channels if supergroupFullInfo.can_get_revenue_statistics == true or bots if userFullInfo.bot_info.can_get_revenue_statistics == true",
		"inheritance": "TLBaseClass",
		"return_type": "chatRevenueTransactions",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getStarRevenueStatistics",
		"methods": [
			{
				"name": "owner_id",
				"type": "MessageSender",
				"description": "Identifier of the owner of the Telegram Stars; can be identifier of the current user, an owned bot, or a supergroup or a channel chat with supergroupFullInfo.can_get_star_revenue_statistics == true"
			},
			{
				"name": "is_dark",
				"type": "Bool",
				"description": "Pass true if a dark theme is used by the application"
			}
		],
		"description": "Returns detailed Telegram Star revenue statistics",
		"inheritance": "TLBaseClass",
		"return_type": "starRevenueStatistics",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getStarWithdrawalUrl",
		"methods": [
			{
				"name": "owner_id",
				"type": "MessageSender",
				"description": "Identifier of the owner of the Telegram Stars; can be identifier of the current user, an owned bot, or an owned supergroup or channel chat"
			},
			{
				"name": "star_count",
				"type": "int53",
				"description": "The number of Telegram Stars to withdraw. Must be at least getOption(\"star_withdrawal_count_min\")"
			},
			{
				"name": "password",
				"type": "string",
				"description": "The 2-step verification password of the current user"
			}
		],
		"description": "Returns a URL for Telegram Star withdrawal",
		"inheritance": "TLBaseClass",
		"return_type": "httpUrl",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getStarAdAccountUrl",
		"methods": [
			{
				"name": "owner_id",
				"type": "MessageSender",
				"description": "Identifier of the owner of the Telegram Stars; can be identifier of an owned bot, or identifier of an owned channel chat"
			}
		],
		"description": "Returns a URL for a Telegram Ad platform account that can be used to set up advertisements for the chat paid in the owned Telegram Stars",
		"inheritance": "TLBaseClass",
		"return_type": "httpUrl",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getChatStatistics",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "is_dark",
				"type": "Bool",
				"description": "Pass true if a dark theme is used by the application"
			}
		],
		"description": "Returns detailed statistics about a chat. Currently, this method can be used only for supergroups and channels. Can be used only if supergroupFullInfo.can_get_statistics == true",
		"inheritance": "TLBaseClass",
		"return_type": "ChatStatistics",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getMessageStatistics",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Message identifier"
			},
			{
				"name": "is_dark",
				"type": "Bool",
				"description": "Pass true if a dark theme is used by the application"
			}
		],
		"description": "Returns detailed statistics about a message. Can be used only if messageProperties.can_get_statistics == true",
		"inheritance": "TLBaseClass",
		"return_type": "messageStatistics",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getMessagePublicForwards",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier of the message"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Message identifier"
			},
			{
				"name": "offset",
				"type": "string",
				"description": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of messages and stories to be returned; must be positive and can't be greater than 100. For optimal performance, the number of returned objects is chosen by TDLib and can be smaller than the specified limit"
			}
		],
		"description": "Returns forwarded copies of a channel message to different public channels and public reposts as a story. Can be used only if messageProperties.can_get_statistics == true. For optimal performance, the number of returned messages and stories is chosen by TDLib",
		"inheritance": "TLBaseClass",
		"return_type": "publicForwards",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getStoryStatistics",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "story_id",
				"type": "int32",
				"description": "Story identifier"
			},
			{
				"name": "is_dark",
				"type": "Bool",
				"description": "Pass true if a dark theme is used by the application"
			}
		],
		"description": "Returns detailed statistics about a story. Can be used only if story.can_get_statistics == true",
		"inheritance": "TLBaseClass",
		"return_type": "storyStatistics",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getStatisticalGraph",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Chat identifier"
			},
			{
				"name": "token",
				"type": "string",
				"description": "The token for graph loading"
			},
			{
				"name": "x",
				"type": "int53",
				"description": "X-value for zoomed in graph or 0 otherwise"
			}
		],
		"description": "Loads an asynchronous or a zoomed in statistical graph",
		"inheritance": "TLBaseClass",
		"return_type": "StatisticalGraph",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getStorageStatistics",
		"methods": [
			{
				"name": "chat_limit",
				"type": "int32",
				"description": "The maximum number of chats with the largest storage usage for which separate statistics need to be returned. All other chats will be grouped in entries with chat_id == 0. If the chat info database is not used, the chat_limit is ignored and is always set to 0"
			}
		],
		"description": "Returns storage usage statistics. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "storageStatistics",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getStorageStatisticsFast",
		"methods": null,
		"description": "Quickly returns approximate storage usage statistics. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "storageStatisticsFast",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getDatabaseStatistics",
		"methods": null,
		"description": "Returns database statistics",
		"inheritance": "TLBaseClass",
		"return_type": "databaseStatistics",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "optimizeStorage",
		"methods": [
			{
				"name": "size",
				"type": "int53",
				"description": "Limit on the total size of files after deletion, in bytes. Pass -1 to use the default limit"
			},
			{
				"name": "ttl",
				"type": "int32",
				"description": "Limit on the time that has passed since the last time a file was accessed (or creation time for some filesystems). Pass -1 to use the default limit"
			},
			{
				"name": "count",
				"type": "int32",
				"description": "Limit on the total number of files after deletion. Pass -1 to use the default limit"
			},
			{
				"name": "immunity_delay",
				"type": "int32",
				"description": "The amount of time after the creation of a file during which it can't be deleted, in seconds. Pass -1 to use the default value"
			},
			{
				"name": "file_types",
				"type": "vector<FileType>",
				"description": "If non-empty, only files with the given types are considered. By default, all types except thumbnails, profile photos, stickers and wallpapers are deleted"
			},
			{
				"name": "chat_ids",
				"type": "vector<int53>",
				"description": "If non-empty, only files from the given chats are considered. Use 0 as chat identifier to delete files not belonging to any chat (e.g., profile photos)"
			},
			{
				"name": "exclude_chat_ids",
				"type": "vector<int53>",
				"description": "If non-empty, files from the given chats are excluded. Use 0 as chat identifier to exclude all files not belonging to any chat (e.g., profile photos)"
			},
			{
				"name": "return_deleted_file_statistics",
				"type": "Bool",
				"description": "Pass true if statistics about the files that were deleted must be returned instead of the whole storage usage statistics. Affects only returned statistics"
			},
			{
				"name": "chat_limit",
				"type": "int32",
				"description": "Same as in getStorageStatistics. Affects only returned statistics"
			}
		],
		"description": "Optimizes storage usage, i.e. deletes some files and returns new storage usage statistics. Secret thumbnails can't be deleted",
		"inheritance": "TLBaseClass",
		"return_type": "storageStatistics",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setNetworkType",
		"methods": [
			{
				"name": "type",
				"type": "NetworkType",
				"description": "The new network type; pass null to set network type to networkTypeOther"
			}
		],
		"description": "Sets the current network type. Can be called before authorization. Calling this method forces all network connections to reopen, mitigating the delay in switching between different networks, so it must be called whenever the network is changed, even if the network type remains the same. Network type is used to check whether the library can use the network at all and also for collecting detailed network data usage statistics",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getNetworkStatistics",
		"methods": [
			{
				"name": "only_current",
				"type": "Bool",
				"description": "Pass true to get statistics only for the current library launch"
			}
		],
		"description": "Returns network data usage statistics. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "networkStatistics",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "addNetworkStatistics",
		"methods": [
			{
				"name": "entry",
				"type": "NetworkStatisticsEntry",
				"description": "The network statistics entry with the data to be added to statistics"
			}
		],
		"description": "Adds the specified data to data usage statistics. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "resetNetworkStatistics",
		"methods": null,
		"description": "Resets all network data usage statistics to zero. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getAutoDownloadSettingsPresets",
		"methods": null,
		"description": "Returns auto-download settings presets for the current user",
		"inheritance": "TLBaseClass",
		"return_type": "autoDownloadSettingsPresets",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setAutoDownloadSettings",
		"methods": [
			{
				"name": "settings",
				"type": "autoDownloadSettings",
				"description": "New user auto-download settings"
			},
			{
				"name": "type",
				"type": "NetworkType",
				"description": "Type of the network for which the new settings are relevant"
			}
		],
		"description": "Sets auto-download settings",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getAutosaveSettings",
		"methods": null,
		"description": "Returns autosave settings for the current user",
		"inheritance": "TLBaseClass",
		"return_type": "autosaveSettings",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setAutosaveSettings",
		"methods": [
			{
				"name": "scope",
				"type": "AutosaveSettingsScope",
				"description": "Autosave settings scope"
			},
			{
				"name": "settings",
				"type": "scopeAutosaveSettings",
				"description": "New autosave settings for the scope; pass null to set autosave settings to default"
			}
		],
		"description": "Sets autosave settings for the given scope. The method is guaranteed to work only after at least one call to getAutosaveSettings",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "clearAutosaveSettingsExceptions",
		"methods": null,
		"description": "Clears the list of all autosave settings exceptions. The method is guaranteed to work only after at least one call to getAutosaveSettings",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getBankCardInfo",
		"methods": [
			{
				"name": "bank_card_number",
				"type": "string",
				"description": "The bank card number"
			}
		],
		"description": "Returns information about a bank card",
		"inheritance": "TLBaseClass",
		"return_type": "bankCardInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getPassportElement",
		"methods": [
			{
				"name": "type",
				"type": "PassportElementType",
				"description": "Telegram Passport element type"
			},
			{
				"name": "password",
				"type": "string",
				"description": "The 2-step verification password of the current user"
			}
		],
		"description": "Returns one of the available Telegram Passport elements",
		"inheritance": "TLBaseClass",
		"return_type": "PassportElement",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getAllPassportElements",
		"methods": [
			{
				"name": "password",
				"type": "string",
				"description": "The 2-step verification password of the current user"
			}
		],
		"description": "Returns all available Telegram Passport elements",
		"inheritance": "TLBaseClass",
		"return_type": "passportElements",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setPassportElement",
		"methods": [
			{
				"name": "element",
				"type": "InputPassportElement",
				"description": "Input Telegram Passport element"
			},
			{
				"name": "password",
				"type": "string",
				"description": "The 2-step verification password of the current user"
			}
		],
		"description": "Adds an element to the user's Telegram Passport. May return an error with a message \"PHONE_VERIFICATION_NEEDED\" or \"EMAIL_VERIFICATION_NEEDED\" if the chosen phone number or the chosen email address must be verified first",
		"inheritance": "TLBaseClass",
		"return_type": "PassportElement",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deletePassportElement",
		"methods": [
			{
				"name": "type",
				"type": "PassportElementType",
				"description": "Element type"
			}
		],
		"description": "Deletes a Telegram Passport element",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setPassportElementErrors",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			},
			{
				"name": "errors",
				"type": "vector<inputPassportElementError>",
				"description": "The errors"
			}
		],
		"description": "Informs the user that some of the elements in their Telegram Passport contain errors; for bots only. The user will not be able to resend the elements, until the errors are fixed",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getPreferredCountryLanguage",
		"methods": [
			{
				"name": "country_code",
				"type": "string",
				"description": "A two-letter ISO 3166-1 alpha-2 country code"
			}
		],
		"description": "Returns an IETF language tag of the language preferred in the country, which must be used to fill native fields in Telegram Passport personal details. Returns a 404 error if unknown",
		"inheritance": "TLBaseClass",
		"return_type": "text",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "sendEmailAddressVerificationCode",
		"methods": [
			{
				"name": "email_address",
				"type": "string",
				"description": "Email address"
			}
		],
		"description": "Sends a code to verify an email address to be added to a user's Telegram Passport",
		"inheritance": "TLBaseClass",
		"return_type": "emailAddressAuthenticationCodeInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "resendEmailAddressVerificationCode",
		"methods": null,
		"description": "Resends the code to verify an email address to be added to a user's Telegram Passport",
		"inheritance": "TLBaseClass",
		"return_type": "emailAddressAuthenticationCodeInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "checkEmailAddressVerificationCode",
		"methods": [
			{
				"name": "code",
				"type": "string",
				"description": "Verification code to check"
			}
		],
		"description": "Checks the email address verification code for Telegram Passport",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getPassportAuthorizationForm",
		"methods": [
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "User identifier of the service's bot"
			},
			{
				"name": "scope",
				"type": "string",
				"description": "Telegram Passport element types requested by the service"
			},
			{
				"name": "public_key",
				"type": "string",
				"description": "Service's public key"
			},
			{
				"name": "nonce",
				"type": "string",
				"description": "Unique request identifier provided by the service"
			}
		],
		"description": "Returns a Telegram Passport authorization form for sharing data with a service",
		"inheritance": "TLBaseClass",
		"return_type": "passportAuthorizationForm",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getPassportAuthorizationFormAvailableElements",
		"methods": [
			{
				"name": "authorization_form_id",
				"type": "int32",
				"description": "Authorization form identifier"
			},
			{
				"name": "password",
				"type": "string",
				"description": "The 2-step verification password of the current user"
			}
		],
		"description": "Returns already available Telegram Passport elements suitable for completing a Telegram Passport authorization form. Result can be received only once for each authorization form",
		"inheritance": "TLBaseClass",
		"return_type": "passportElementsWithErrors",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "sendPassportAuthorizationForm",
		"methods": [
			{
				"name": "authorization_form_id",
				"type": "int32",
				"description": "Authorization form identifier"
			},
			{
				"name": "types",
				"type": "vector<PassportElementType>",
				"description": "Types of Telegram Passport elements chosen by user to complete the authorization form"
			}
		],
		"description": "Sends a Telegram Passport authorization form, effectively sharing data with the service. This method must be called after getPassportAuthorizationFormAvailableElements if some previously available elements are going to be reused",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setBotUpdatesStatus",
		"methods": [
			{
				"name": "pending_update_count",
				"type": "int32",
				"description": "The number of pending updates"
			},
			{
				"name": "error_message",
				"type": "string",
				"description": "The last error message"
			}
		],
		"description": "Informs the server about the number of pending bot updates if they haven't been processed for a long time; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "uploadStickerFile",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Sticker file owner; ignored for regular users"
			},
			{
				"name": "sticker_format",
				"type": "StickerFormat",
				"description": "Sticker format"
			},
			{
				"name": "sticker",
				"type": "InputFile",
				"description": "File file to upload; must fit in a 512x512 square. For WEBP stickers the file must be in WEBP or PNG format, which will be converted to WEBP server-side. See https://core.telegram.org/animated_stickers#technical-requirements for technical requirements"
			}
		],
		"description": "Uploads a file with a sticker; returns the uploaded file",
		"inheritance": "TLBaseClass",
		"return_type": "file",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getSuggestedStickerSetName",
		"methods": [
			{
				"name": "title",
				"type": "string",
				"description": "Sticker set title; 1-64 characters"
			}
		],
		"description": "Returns a suggested name for a new sticker set with a given title",
		"inheritance": "TLBaseClass",
		"return_type": "text",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "checkStickerSetName",
		"methods": [
			{
				"name": "name",
				"type": "string",
				"description": "Name to be checked"
			}
		],
		"description": "Checks whether a name can be used for a new sticker set",
		"inheritance": "TLBaseClass",
		"return_type": "CheckStickerSetNameResult",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "createNewStickerSet",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Sticker set owner; ignored for regular users"
			},
			{
				"name": "title",
				"type": "string",
				"description": "Sticker set title; 1-64 characters"
			},
			{
				"name": "name",
				"type": "string",
				"description": "Sticker set name. Can contain only English letters, digits and underscores. Must end with *\"_by_<bot username>\"* (*<bot_username>* is case insensitive) for bots; 0-64 characters. If empty, then the name returned by getSuggestedStickerSetName will be used automatically"
			},
			{
				"name": "sticker_type",
				"type": "StickerType",
				"description": "Type of the stickers in the set"
			},
			{
				"name": "needs_repainting",
				"type": "Bool",
				"description": "Pass true if stickers in the sticker set must be repainted; for custom emoji sticker sets only"
			},
			{
				"name": "stickers",
				"type": "vector<inputSticker>",
				"description": "List of stickers to be added to the set; 1-200 stickers for custom emoji sticker sets, and 1-120 stickers otherwise. For TGS stickers, uploadStickerFile must be used before the sticker is shown"
			},
			{
				"name": "source",
				"type": "string",
				"description": "Source of the sticker set; may be empty if unknown"
			}
		],
		"description": "Creates a new sticker set. Returns the newly created sticker set",
		"inheritance": "TLBaseClass",
		"return_type": "stickerSet",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "addStickerToSet",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Sticker set owner; ignored for regular users"
			},
			{
				"name": "name",
				"type": "string",
				"description": "Sticker set name. The sticker set must be owned by the current user, and contain less than 200 stickers for custom emoji sticker sets and less than 120 otherwise"
			},
			{
				"name": "sticker",
				"type": "inputSticker",
				"description": "Sticker to add to the set"
			}
		],
		"description": "Adds a new sticker to a set",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "replaceStickerInSet",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Sticker set owner; ignored for regular users"
			},
			{
				"name": "name",
				"type": "string",
				"description": "Sticker set name. The sticker set must be owned by the current user"
			},
			{
				"name": "old_sticker",
				"type": "InputFile",
				"description": "Sticker to remove from the set"
			},
			{
				"name": "new_sticker",
				"type": "inputSticker",
				"description": "Sticker to add to the set"
			}
		],
		"description": "Replaces existing sticker in a set. The function is equivalent to removeStickerFromSet, then addStickerToSet, then setStickerPositionInSet",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setStickerSetThumbnail",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Sticker set owner; ignored for regular users"
			},
			{
				"name": "name",
				"type": "string",
				"description": "Sticker set name. The sticker set must be owned by the current user"
			},
			{
				"name": "thumbnail",
				"type": "InputFile",
				"description": "Thumbnail to set; pass null to remove the sticker set thumbnail"
			},
			{
				"name": "format",
				"type": "StickerFormat",
				"description": "Format of the thumbnail; pass null if thumbnail is removed"
			}
		],
		"description": "Sets a sticker set thumbnail",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setCustomEmojiStickerSetThumbnail",
		"methods": [
			{
				"name": "name",
				"type": "string",
				"description": "Sticker set name. The sticker set must be owned by the current user"
			},
			{
				"name": "custom_emoji_id",
				"type": "int64",
				"description": "Identifier of the custom emoji from the sticker set, which will be set as sticker set thumbnail; pass 0 to remove the sticker set thumbnail"
			}
		],
		"description": "Sets a custom emoji sticker set thumbnail",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setStickerSetTitle",
		"methods": [
			{
				"name": "name",
				"type": "string",
				"description": "Sticker set name. The sticker set must be owned by the current user"
			},
			{
				"name": "title",
				"type": "string",
				"description": "New sticker set title"
			}
		],
		"description": "Sets a sticker set title",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "deleteStickerSet",
		"methods": [
			{
				"name": "name",
				"type": "string",
				"description": "Sticker set name. The sticker set must be owned by the current user"
			}
		],
		"description": "Completely deletes a sticker set",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setStickerPositionInSet",
		"methods": [
			{
				"name": "sticker",
				"type": "InputFile",
				"description": "Sticker"
			},
			{
				"name": "position",
				"type": "int32",
				"description": "New position of the sticker in the set, 0-based"
			}
		],
		"description": "Changes the position of a sticker in the set to which it belongs. The sticker set must be owned by the current user",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "removeStickerFromSet",
		"methods": [
			{
				"name": "sticker",
				"type": "InputFile",
				"description": "Sticker to remove from the set"
			}
		],
		"description": "Removes a sticker from the set to which it belongs. The sticker set must be owned by the current user",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setStickerEmojis",
		"methods": [
			{
				"name": "sticker",
				"type": "InputFile",
				"description": "Sticker"
			},
			{
				"name": "emojis",
				"type": "string",
				"description": "New string with 1-20 emoji corresponding to the sticker"
			}
		],
		"description": "Changes the list of emojis corresponding to a sticker. The sticker must belong to a regular or custom emoji sticker set that is owned by the current user",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setStickerKeywords",
		"methods": [
			{
				"name": "sticker",
				"type": "InputFile",
				"description": "Sticker"
			},
			{
				"name": "keywords",
				"type": "vector<string>",
				"description": "List of up to 20 keywords with total length up to 64 characters, which can be used to find the sticker"
			}
		],
		"description": "Changes the list of keywords of a sticker. The sticker must belong to a regular or custom emoji sticker set that is owned by the current user",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setStickerMaskPosition",
		"methods": [
			{
				"name": "sticker",
				"type": "InputFile",
				"description": "Sticker"
			},
			{
				"name": "mask_position",
				"type": "maskPosition",
				"description": "Position where the mask is placed; pass null to remove mask position"
			}
		],
		"description": "Changes the mask position of a mask sticker. The sticker must belong to a mask sticker set that is owned by the current user",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getOwnedStickerSets",
		"methods": [
			{
				"name": "offset_sticker_set_id",
				"type": "int64",
				"description": "Identifier of the sticker set from which to return owned sticker sets; use 0 to get results from the beginning"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of sticker sets to be returned; must be positive and can't be greater than 100. For optimal performance, the number of returned objects is chosen by TDLib and can be smaller than the specified limit"
			}
		],
		"description": "Returns sticker sets owned by the current user",
		"inheritance": "TLBaseClass",
		"return_type": "stickerSets",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getMapThumbnailFile",
		"methods": [
			{
				"name": "location",
				"type": "location",
				"description": "Location of the map center"
			},
			{
				"name": "zoom",
				"type": "int32",
				"description": "Map zoom level; 13-20"
			},
			{
				"name": "width",
				"type": "int32",
				"description": "Map width in pixels before applying scale; 16-1024"
			},
			{
				"name": "height",
				"type": "int32",
				"description": "Map height in pixels before applying scale; 16-1024"
			},
			{
				"name": "scale",
				"type": "int32",
				"description": "Map scale; 1-3"
			},
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of a chat in which the thumbnail will be shown. Use 0 if unknown"
			}
		],
		"description": "Returns information about a file with a map thumbnail in PNG format. Only map thumbnail files with size less than 1MB can be downloaded",
		"inheritance": "TLBaseClass",
		"return_type": "file",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getPremiumLimit",
		"methods": [
			{
				"name": "limit_type",
				"type": "PremiumLimitType",
				"description": "Type of the limit"
			}
		],
		"description": "Returns information about a limit, increased for Premium users. Returns a 404 error if the limit is unknown",
		"inheritance": "TLBaseClass",
		"return_type": "premiumLimit",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getPremiumFeatures",
		"methods": [
			{
				"name": "source",
				"type": "PremiumSource",
				"description": "Source of the request; pass null if the method is called from some non-standard source"
			}
		],
		"description": "Returns information about features, available to Premium users",
		"inheritance": "TLBaseClass",
		"return_type": "premiumFeatures",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getPremiumStickerExamples",
		"methods": null,
		"description": "Returns examples of premium stickers for demonstration purposes",
		"inheritance": "TLBaseClass",
		"return_type": "stickers",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getPremiumInfoSticker",
		"methods": [
			{
				"name": "month_count",
				"type": "int32",
				"description": "Number of months the Telegram Premium subscription will be active"
			}
		],
		"description": "Returns the sticker to be used as representation of the Telegram Premium subscription",
		"inheritance": "TLBaseClass",
		"return_type": "sticker",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "viewPremiumFeature",
		"methods": [
			{
				"name": "feature",
				"type": "PremiumFeature",
				"description": "The viewed premium feature"
			}
		],
		"description": "Informs TDLib that the user viewed detailed information about a Premium feature on the Premium features screen",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "clickPremiumSubscriptionButton",
		"methods": null,
		"description": "Informs TDLib that the user clicked Premium subscription button on the Premium features screen",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getPremiumState",
		"methods": null,
		"description": "Returns state of Telegram Premium subscription and promotion videos for Premium features",
		"inheritance": "TLBaseClass",
		"return_type": "premiumState",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getPremiumGiftPaymentOptions",
		"methods": null,
		"description": "Returns available options for gifting Telegram Premium to a user",
		"inheritance": "TLBaseClass",
		"return_type": "premiumGiftPaymentOptions",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getPremiumGiveawayPaymentOptions",
		"methods": [
			{
				"name": "boosted_chat_id",
				"type": "int53",
				"description": "Identifier of the supergroup or channel chat, which will be automatically boosted by receivers of the gift codes and which is administered by the user"
			}
		],
		"description": "Returns available options for creating of Telegram Premium giveaway or manual distribution of Telegram Premium among chat members",
		"inheritance": "TLBaseClass",
		"return_type": "premiumGiveawayPaymentOptions",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "checkPremiumGiftCode",
		"methods": [
			{
				"name": "code",
				"type": "string",
				"description": "The code to check"
			}
		],
		"description": "Return information about a Telegram Premium gift code",
		"inheritance": "TLBaseClass",
		"return_type": "premiumGiftCodeInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "applyPremiumGiftCode",
		"methods": [
			{
				"name": "code",
				"type": "string",
				"description": "The code to apply"
			}
		],
		"description": "Applies a Telegram Premium gift code",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "launchPrepaidGiveaway",
		"methods": [
			{
				"name": "giveaway_id",
				"type": "int64",
				"description": "Unique identifier of the prepaid giveaway"
			},
			{
				"name": "parameters",
				"type": "giveawayParameters",
				"description": "Giveaway parameters"
			},
			{
				"name": "winner_count",
				"type": "int32",
				"description": "The number of users to receive giveaway prize"
			},
			{
				"name": "star_count",
				"type": "int53",
				"description": "The number of Telegram Stars to be distributed through the giveaway; pass 0 for Telegram Premium giveaways"
			}
		],
		"description": "Launches a prepaid giveaway",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getGiveawayInfo",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the channel chat which started the giveaway"
			},
			{
				"name": "message_id",
				"type": "int53",
				"description": "Identifier of the giveaway or a giveaway winners message in the chat"
			}
		],
		"description": "Returns information about a giveaway",
		"inheritance": "TLBaseClass",
		"return_type": "GiveawayInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getStarPaymentOptions",
		"methods": null,
		"description": "Returns available options for Telegram Stars purchase",
		"inheritance": "TLBaseClass",
		"return_type": "starPaymentOptions",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getStarGiftPaymentOptions",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "Identifier of the user that will receive Telegram Stars; pass 0 to get options for an unspecified user"
			}
		],
		"description": "Returns available options for Telegram Stars gifting",
		"inheritance": "TLBaseClass",
		"return_type": "starPaymentOptions",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getStarGiveawayPaymentOptions",
		"methods": null,
		"description": "Returns available options for Telegram Star giveaway creation",
		"inheritance": "TLBaseClass",
		"return_type": "starGiveawayPaymentOptions",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getStarTransactions",
		"methods": [
			{
				"name": "owner_id",
				"type": "MessageSender",
				"description": "Identifier of the owner of the Telegram Stars; can be the identifier of the current user, identifier of an owned bot, or identifier of a supergroup or a channel chat with supergroupFullInfo.can_get_star_revenue_statistics == true"
			},
			{
				"name": "subscription_id",
				"type": "string",
				"description": "If non-empty, only transactions related to the Star Subscription will be returned"
			},
			{
				"name": "direction",
				"type": "StarTransactionDirection",
				"description": "Direction of the transactions to receive; pass null to get all transactions"
			},
			{
				"name": "offset",
				"type": "string",
				"description": "Offset of the first transaction to return as received from the previous request; use empty string to get the first chunk of results"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of transactions to return"
			}
		],
		"description": "Returns the list of Telegram Star transactions for the specified owner",
		"inheritance": "TLBaseClass",
		"return_type": "starTransactions",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getStarSubscriptions",
		"methods": [
			{
				"name": "only_expiring",
				"type": "Bool",
				"description": "Pass true to receive only expiring subscriptions for which there are no enough Telegram Stars to extend"
			},
			{
				"name": "offset",
				"type": "string",
				"description": "Offset of the first subscription to return as received from the previous request; use empty string to get the first chunk of results"
			}
		],
		"description": "Returns the list of Telegram Star subscriptions for the current user",
		"inheritance": "TLBaseClass",
		"return_type": "starSubscriptions",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "canPurchaseFromStore",
		"methods": [
			{
				"name": "purpose",
				"type": "StorePaymentPurpose",
				"description": "Transaction purpose"
			}
		],
		"description": "Checks whether an in-store purchase is possible. Must be called before any in-store purchase",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "assignAppStoreTransaction",
		"methods": [
			{
				"name": "receipt",
				"type": "bytes",
				"description": "App Store receipt"
			},
			{
				"name": "purpose",
				"type": "StorePaymentPurpose",
				"description": "Transaction purpose"
			}
		],
		"description": "Informs server about a purchase through App Store. For official applications only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "assignGooglePlayTransaction",
		"methods": [
			{
				"name": "package_name",
				"type": "string",
				"description": "Application package name"
			},
			{
				"name": "store_product_id",
				"type": "string",
				"description": "Identifier of the purchased store product"
			},
			{
				"name": "purchase_token",
				"type": "string",
				"description": "Google Play purchase token"
			},
			{
				"name": "purpose",
				"type": "StorePaymentPurpose",
				"description": "Transaction purpose"
			}
		],
		"description": "Informs server about a purchase through Google Play. For official applications only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editStarSubscription",
		"methods": [
			{
				"name": "subscription_id",
				"type": "string",
				"description": "Identifier of the subscription to change"
			},
			{
				"name": "is_canceled",
				"type": "Bool",
				"description": "New value of is_canceled"
			}
		],
		"description": "Cancels or re-enables Telegram Star subscription",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editUserStarSubscription",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			},
			{
				"name": "telegram_payment_charge_id",
				"type": "string",
				"description": "Telegram payment identifier of the subscription"
			},
			{
				"name": "is_canceled",
				"type": "Bool",
				"description": "Pass true to cancel the subscription; pass false to allow the user to enable it"
			}
		],
		"description": "Cancels or re-enables Telegram Star subscription for a user; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "reuseStarSubscription",
		"methods": [
			{
				"name": "subscription_id",
				"type": "string",
				"description": "Identifier of the subscription"
			}
		],
		"description": "Reuses an active Telegram Star subscription to a channel chat and joins the chat again",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setChatAffiliateProgram",
		"methods": [
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Identifier of the chat with an owned bot for which affiliate program is changed"
			},
			{
				"name": "parameters",
				"type": "affiliateProgramParameters",
				"description": "Parameters of the affiliate program; pass null to close the currently active program. If there is an active program, then commission and program duration can only be increased. If the active program is scheduled to be closed, then it can't be changed anymore"
			}
		],
		"description": "Changes affiliate program for a bot",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchChatAffiliateProgram",
		"methods": [
			{
				"name": "username",
				"type": "string",
				"description": "Username of the chat"
			},
			{
				"name": "referrer",
				"type": "string",
				"description": "The referrer from an internalLinkTypeChatAffiliateProgram link"
			}
		],
		"description": "Searches a chat with an affiliate program. Returns the chat if found and the program is active",
		"inheritance": "TLBaseClass",
		"return_type": "chat",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchAffiliatePrograms",
		"methods": [
			{
				"name": "affiliate",
				"type": "AffiliateType",
				"description": "The affiliate for which affiliate programs are searched for"
			},
			{
				"name": "sort_order",
				"type": "AffiliateProgramSortOrder",
				"description": "Sort order for the results"
			},
			{
				"name": "offset",
				"type": "string",
				"description": "Offset of the first affiliate program to return as received from the previous request; use empty string to get the first chunk of results"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of affiliate programs to return"
			}
		],
		"description": "Searches affiliate programs that can be connected to the given affiliate",
		"inheritance": "TLBaseClass",
		"return_type": "foundAffiliatePrograms",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "connectAffiliateProgram",
		"methods": [
			{
				"name": "affiliate",
				"type": "AffiliateType",
				"description": "The affiliate to which the affiliate program will be connected"
			},
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the bot, which affiliate program is connected"
			}
		],
		"description": "Connects an affiliate program to the given affiliate. Returns information about the connected affiliate program",
		"inheritance": "TLBaseClass",
		"return_type": "connectedAffiliateProgram",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "disconnectAffiliateProgram",
		"methods": [
			{
				"name": "affiliate",
				"type": "AffiliateType",
				"description": "The affiliate to which the affiliate program is connected"
			},
			{
				"name": "url",
				"type": "string",
				"description": "The referral link of the affiliate program"
			}
		],
		"description": "Disconnects an affiliate program from the given affiliate and immediately deactivates its referral link. Returns updated information about the disconnected affiliate program",
		"inheritance": "TLBaseClass",
		"return_type": "connectedAffiliateProgram",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getConnectedAffiliateProgram",
		"methods": [
			{
				"name": "affiliate",
				"type": "AffiliateType",
				"description": "The affiliate to which the affiliate program will be connected"
			},
			{
				"name": "bot_user_id",
				"type": "int53",
				"description": "Identifier of the bot that created the program"
			}
		],
		"description": "Returns an affiliate program that were connected to the given affiliate by identifier of the bot that created the program",
		"inheritance": "TLBaseClass",
		"return_type": "connectedAffiliateProgram",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getConnectedAffiliatePrograms",
		"methods": [
			{
				"name": "affiliate",
				"type": "AffiliateType",
				"description": "The affiliate to which the affiliate program were connected"
			},
			{
				"name": "offset",
				"type": "string",
				"description": "Offset of the first affiliate program to return as received from the previous request; use empty string to get the first chunk of results"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of affiliate programs to return"
			}
		],
		"description": "Returns affiliate programs that were connected to the given affiliate",
		"inheritance": "TLBaseClass",
		"return_type": "connectedAffiliatePrograms",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getBusinessFeatures",
		"methods": [
			{
				"name": "source",
				"type": "BusinessFeature",
				"description": "Source of the request; pass null if the method is called from settings or some non-standard source"
			}
		],
		"description": "Returns information about features, available to Business users",
		"inheritance": "TLBaseClass",
		"return_type": "businessFeatures",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "acceptTermsOfService",
		"methods": [
			{
				"name": "terms_of_service_id",
				"type": "string",
				"description": "Terms of service identifier"
			}
		],
		"description": "Accepts Telegram terms of services",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "searchStringsByPrefix",
		"methods": [
			{
				"name": "strings",
				"type": "vector<string>",
				"description": "The strings to search in for the query"
			},
			{
				"name": "query",
				"type": "string",
				"description": "Query to search for"
			},
			{
				"name": "limit",
				"type": "int32",
				"description": "The maximum number of objects to return"
			},
			{
				"name": "return_none_for_empty_query",
				"type": "Bool",
				"description": "Pass true to receive no results for an empty query"
			}
		],
		"description": "Searches specified query by word prefixes in the provided strings. Returns 0-based positions of strings that matched. Can be called synchronously",
		"inheritance": "TLBaseClass",
		"return_type": "foundPositions",
		"isFunction": true,
		"isSynchronous": true
	},
	{
		"name": "sendCustomRequest",
		"methods": [
			{
				"name": "method",
				"type": "string",
				"description": "The method name"
			},
			{
				"name": "parameters",
				"type": "string",
				"description": "JSON-serialized method parameters"
			}
		],
		"description": "Sends a custom request; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "customRequestResult",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "answerCustomQuery",
		"methods": [
			{
				"name": "custom_query_id",
				"type": "int64",
				"description": "Identifier of a custom query"
			},
			{
				"name": "data",
				"type": "string",
				"description": "JSON-serialized answer to the query"
			}
		],
		"description": "Answers a custom query; for bots only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setAlarm",
		"methods": [
			{
				"name": "seconds",
				"type": "double",
				"description": "Number of seconds before the function returns"
			}
		],
		"description": "Succeeds after a specified amount of time has passed. Can be called before initialization",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getCountries",
		"methods": null,
		"description": "Returns information about existing countries. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "countries",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getCountryCode",
		"methods": null,
		"description": "Uses the current IP address to find the current country. Returns two-letter ISO 3166-1 alpha-2 country code. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "text",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getPhoneNumberInfo",
		"methods": [
			{
				"name": "phone_number_prefix",
				"type": "string",
				"description": "The phone number prefix"
			}
		],
		"description": "Returns information about a phone number by its prefix. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "phoneNumberInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getPhoneNumberInfoSync",
		"methods": [
			{
				"name": "language_code",
				"type": "string",
				"description": "A two-letter ISO 639-1 language code for country information localization"
			},
			{
				"name": "phone_number_prefix",
				"type": "string",
				"description": "The phone number prefix"
			}
		],
		"description": "Returns information about a phone number by its prefix synchronously. getCountries must be called at least once after changing localization to the specified language if properly localized country information is expected. Can be called synchronously",
		"inheritance": "TLBaseClass",
		"return_type": "phoneNumberInfo",
		"isFunction": true,
		"isSynchronous": true
	},
	{
		"name": "getCollectibleItemInfo",
		"methods": [
			{
				"name": "type",
				"type": "CollectibleItemType",
				"description": "Type of the collectible item. The item must be used by a user and must be visible to the current user"
			}
		],
		"description": "Returns information about a given collectible item that was purchased at https://fragment.com",
		"inheritance": "TLBaseClass",
		"return_type": "collectibleItemInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getDeepLinkInfo",
		"methods": [
			{
				"name": "link",
				"type": "string",
				"description": "The link"
			}
		],
		"description": "Returns information about a tg:// deep link. Use \"tg://need_update_for_some_feature\" or \"tg:some_unsupported_feature\" for testing. Returns a 404 error for unknown links. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "deepLinkInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getApplicationConfig",
		"methods": null,
		"description": "Returns application config, provided by the server. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "JsonValue",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "saveApplicationLogEvent",
		"methods": [
			{
				"name": "type",
				"type": "string",
				"description": "Event type"
			},
			{
				"name": "chat_id",
				"type": "int53",
				"description": "Optional chat identifier, associated with the event"
			},
			{
				"name": "data",
				"type": "JsonValue",
				"description": "The log event data"
			}
		],
		"description": "Saves application log event on the server. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getApplicationDownloadLink",
		"methods": null,
		"description": "Returns the link for downloading official Telegram application to be used when the current user invites friends to Telegram",
		"inheritance": "TLBaseClass",
		"return_type": "httpUrl",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "addProxy",
		"methods": [
			{
				"name": "server",
				"type": "string",
				"description": "Proxy server domain or IP address"
			},
			{
				"name": "port",
				"type": "int32",
				"description": "Proxy server port"
			},
			{
				"name": "enable",
				"type": "Bool",
				"description": "Pass true to immediately enable the proxy"
			},
			{
				"name": "type",
				"type": "ProxyType",
				"description": "Proxy type"
			}
		],
		"description": "Adds a proxy server for network requests. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "proxy",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "editProxy",
		"methods": [
			{
				"name": "proxy_id",
				"type": "int32",
				"description": "Proxy identifier"
			},
			{
				"name": "server",
				"type": "string",
				"description": "Proxy server domain or IP address"
			},
			{
				"name": "port",
				"type": "int32",
				"description": "Proxy server port"
			},
			{
				"name": "enable",
				"type": "Bool",
				"description": "Pass true to immediately enable the proxy"
			},
			{
				"name": "type",
				"type": "ProxyType",
				"description": "Proxy type"
			}
		],
		"description": "Edits an existing proxy server for network requests. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "proxy",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "enableProxy",
		"methods": [
			{
				"name": "proxy_id",
				"type": "int32",
				"description": "Proxy identifier"
			}
		],
		"description": "Enables a proxy. Only one proxy can be enabled at a time. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "disableProxy",
		"methods": null,
		"description": "Disables the currently enabled proxy. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "removeProxy",
		"methods": [
			{
				"name": "proxy_id",
				"type": "int32",
				"description": "Proxy identifier"
			}
		],
		"description": "Removes a proxy server. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getProxies",
		"methods": null,
		"description": "Returns the list of proxies that are currently set up. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "proxies",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getProxyLink",
		"methods": [
			{
				"name": "proxy_id",
				"type": "int32",
				"description": "Proxy identifier"
			}
		],
		"description": "Returns an HTTPS link, which can be used to add a proxy. Available only for SOCKS5 and MTProto proxies. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "httpUrl",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "pingProxy",
		"methods": [
			{
				"name": "proxy_id",
				"type": "int32",
				"description": "Proxy identifier. Use 0 to ping a Telegram server without a proxy"
			}
		],
		"description": "Computes time needed to receive a response from a Telegram server through a proxy. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "seconds",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setLogStream",
		"methods": [
			{
				"name": "log_stream",
				"type": "LogStream",
				"description": "New log stream"
			}
		],
		"description": "Sets new log stream for internal logging of TDLib. Can be called synchronously",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": true
	},
	{
		"name": "getLogStream",
		"methods": null,
		"description": "Returns information about currently used log stream for internal logging of TDLib. Can be called synchronously",
		"inheritance": "TLBaseClass",
		"return_type": "LogStream",
		"isFunction": true,
		"isSynchronous": true
	},
	{
		"name": "setLogVerbosityLevel",
		"methods": [
			{
				"name": "new_verbosity_level",
				"type": "int32",
				"description": "New value of the verbosity level for logging. Value 0 corresponds to fatal errors, value 1 corresponds to errors, value 2 corresponds to warnings and debug warnings, value 3 corresponds to informational, value 4 corresponds to debug, value 5 corresponds to verbose debug, value greater than 5 and up to 1023 can be used to enable even more logging"
			}
		],
		"description": "Sets the verbosity level of the internal logging of TDLib. Can be called synchronously",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": true
	},
	{
		"name": "getLogVerbosityLevel",
		"methods": null,
		"description": "Returns current verbosity level of the internal logging of TDLib. Can be called synchronously",
		"inheritance": "TLBaseClass",
		"return_type": "logVerbosityLevel",
		"isFunction": true,
		"isSynchronous": true
	},
	{
		"name": "getLogTags",
		"methods": null,
		"description": "Returns the list of available TDLib internal log tags, for example, [\"actor\", \"binlog\", \"connections\", \"notifications\", \"proxy\"]. Can be called synchronously",
		"inheritance": "TLBaseClass",
		"return_type": "logTags",
		"isFunction": true,
		"isSynchronous": true
	},
	{
		"name": "setLogTagVerbosityLevel",
		"methods": [
			{
				"name": "tag",
				"type": "string",
				"description": "Logging tag to change verbosity level"
			},
			{
				"name": "new_verbosity_level",
				"type": "int32",
				"description": "New verbosity level; 1-1024"
			}
		],
		"description": "Sets the verbosity level for a specified TDLib internal log tag. Can be called synchronously",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": true
	},
	{
		"name": "getLogTagVerbosityLevel",
		"methods": [
			{
				"name": "tag",
				"type": "string",
				"description": "Logging tag to change verbosity level"
			}
		],
		"description": "Returns current verbosity level for a specified TDLib internal log tag. Can be called synchronously",
		"inheritance": "TLBaseClass",
		"return_type": "logVerbosityLevel",
		"isFunction": true,
		"isSynchronous": true
	},
	{
		"name": "addLogMessage",
		"methods": [
			{
				"name": "verbosity_level",
				"type": "int32",
				"description": "The minimum verbosity level needed for the message to be logged; 0-1023"
			},
			{
				"name": "text",
				"type": "string",
				"description": "Text of a message to log"
			}
		],
		"description": "Adds a message to TDLib internal log. Can be called synchronously",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": true
	},
	{
		"name": "getUserSupportInfo",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			}
		],
		"description": "Returns support information for the given user; for Telegram support only",
		"inheritance": "TLBaseClass",
		"return_type": "userSupportInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "setUserSupportInfo",
		"methods": [
			{
				"name": "user_id",
				"type": "int53",
				"description": "User identifier"
			},
			{
				"name": "message",
				"type": "formattedText",
				"description": "New information message"
			}
		],
		"description": "Sets support information for the given user; for Telegram support only",
		"inheritance": "TLBaseClass",
		"return_type": "userSupportInfo",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "getSupportName",
		"methods": null,
		"description": "Returns localized name of the Telegram support user; for Telegram support only",
		"inheritance": "TLBaseClass",
		"return_type": "text",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "testCallEmpty",
		"methods": null,
		"description": "Does nothing; for testing only. This is an offline method. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "testCallString",
		"methods": [
			{
				"name": "x",
				"type": "string",
				"description": "String to return"
			}
		],
		"description": "Returns the received string; for testing only. This is an offline method. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "testString",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "testCallBytes",
		"methods": [
			{
				"name": "x",
				"type": "bytes",
				"description": "Bytes to return"
			}
		],
		"description": "Returns the received bytes; for testing only. This is an offline method. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "testBytes",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "testCallVectorInt",
		"methods": [
			{
				"name": "x",
				"type": "vector<int32>",
				"description": "Vector of numbers to return"
			}
		],
		"description": "Returns the received vector of numbers; for testing only. This is an offline method. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "testVectorInt",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "testCallVectorIntObject",
		"methods": [
			{
				"name": "x",
				"type": "vector<testInt>",
				"description": "Vector of objects to return"
			}
		],
		"description": "Returns the received vector of objects containing a number; for testing only. This is an offline method. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "testVectorIntObject",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "testCallVectorString",
		"methods": [
			{
				"name": "x",
				"type": "vector<string>",
				"description": "Vector of strings to return"
			}
		],
		"description": "Returns the received vector of strings; for testing only. This is an offline method. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "testVectorString",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "testCallVectorStringObject",
		"methods": [
			{
				"name": "x",
				"type": "vector<testString>",
				"description": "Vector of objects to return"
			}
		],
		"description": "Returns the received vector of objects containing a string; for testing only. This is an offline method. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "testVectorStringObject",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "testSquareInt",
		"methods": [
			{
				"name": "x",
				"type": "int32",
				"description": "Number to square"
			}
		],
		"description": "Returns the squared received number; for testing only. This is an offline method. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "testInt",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "testNetwork",
		"methods": null,
		"description": "Sends a simple network request to the Telegram servers; for testing only. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "testProxy",
		"methods": [
			{
				"name": "server",
				"type": "string",
				"description": "Proxy server domain or IP address"
			},
			{
				"name": "port",
				"type": "int32",
				"description": "Proxy server port"
			},
			{
				"name": "type",
				"type": "ProxyType",
				"description": "Proxy type"
			},
			{
				"name": "dc_id",
				"type": "int32",
				"description": "Identifier of a datacenter with which to test connection"
			},
			{
				"name": "timeout",
				"type": "double",
				"description": "The maximum overall timeout for the request"
			}
		],
		"description": "Sends a simple network request to the Telegram servers via proxy; for testing only. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "testGetDifference",
		"methods": null,
		"description": "Forces an updates.getDifference call to the Telegram servers; for testing only",
		"inheritance": "TLBaseClass",
		"return_type": "ok",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "testUseUpdate",
		"methods": null,
		"description": "Does nothing and ensures that the Update object is used; for testing only. This is an offline method. Can be called before authorization",
		"inheritance": "TLBaseClass",
		"return_type": "Update",
		"isFunction": true,
		"isSynchronous": false
	},
	{
		"name": "testReturnError",
		"methods": [
			{
				"name": "error",
				"type": "error",
				"description": "The error to be returned"
			}
		],
		"description": "Returns the specified error and ensures that the Error object is used; for testing only. Can be called synchronously",
		"inheritance": "TLBaseClass",
		"return_type": "error",
		"isFunction": true,
		"isSynchronous": true
	}
]